{"docstore/data": {"32e51a37-983c-4862-9592-fe05a87c79cc": {"__data__": {"id_": "32e51a37-983c-4862-9592-fe05a87c79cc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}, {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}, {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}, {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}, {"node_id": "2b712d43-6221-440e-a002-d03602b380b8", "node_type": "1", "metadata": {}, "hash": "882992dced222a40f0a0b154e52f6c1eba635427e1382ef29af53ad92adcfc4c", "class_name": "RelatedNodeInfo"}]}, "text": "Economic Attention Networks:  \nAssociative Memory and Resource Allocation  \nfor General Intelligence  \nMatthew Ikle\u2019, Joel Pitt, Ben Goertzel, George Sellman  \n \nAdams State College (ASC), Singularity Institute for AI (SIAI), Novamente LLC and SIAI, ASC  \n1405 Berne rd Place, Rockville MD 20851, USA  \nben@goertzel.org , stephan@bugaj.com  \n \n \n \n \nAbstract  \nA novel method for simultaneously storing memories and \nallocating resources in AI systems is presented.  The \nmethod, Economic Attention Networks (ECANs), bears \nsome resemblance to the spread of activation in attractor \nneural networks, but differs via explicitly differentiating two \nkinds of \u201cactivation\u201d (Short Term Importance, related to \nproces sor allocation; and Long Term Importance, related to \nmemory allocation), and in using equations that are based \non ideas from economics rather than approximative neural \nmodeling.  Here we explain the basic ideas of ECANs, and \nthen investigate the functional ity of ECANs as associative \nmemories, via mathematical analysis and the reportage of experimental results obtained from the implementation of \nECANs in the OpenCog integrative  AGI system. \nIntroduction \nOne of the critical challenges confronting any system \naimed at advanced general intelligence is the allocation of \ncomputational resources.  The central nature of this issue is \nhighlighted by Hutter\u2019s (2004) mathematical results \nshowing that if one formalizes intelligence as the \nachievement of complex computabl e goals, then there are \nvery simple software programs that can achieve arbitrarily \nhigh degrees of intelligence, so long as they are allotted huge amounts of computational resources.  In this sense, \ncoping with space and time limitations is the crux of the  \nAGI problem.   \n Not surprisingly, given its central nature, the \nmanagement of computational resources ties in with a \nvariety of other concrete issues that AGI systems confront, \nin ways depending on the specific system in question.  In \nthe approach we will  describe here, resource allocation is \ncarried out by the same structures and dynamics as \nassociative memory, whereas the relationship between \nresource allocation and other system processes like reasoning and procedure learning involves feedback between di stinct software components.  \n We will describe here a specific approach to resource \nallocation and associative memory, which we call Economic Attention Networks or ECANs.  ECANs have \nbeen designed and implemented within an integrative AGI \nframework called O penCog (which overlaps with the \nrelated Novamente Cognition Engine system; see Goertzel, \n2006).  However, ECANs also have meaning outside the OpenCog context; they may be considered nonlinear dynamical systems in roughly the same family as attractor \nneural  networks such as Hopfield nets (Amit, 1992).  The \nmain focus of this paper is the study of ECANs as \nassociative memories, which involves mathematical and experimental analyses that are independent of the \nembedding of ECANs in OpenCog or other AGI systems.   \nBut we will also discuss the implications of these results \nfor specific interactions between ECANs and other \nOpenCog components  \nEconomic Attention Networks \nFirst we summarize the essential ideas of ECANs; in later \nsections two specific variants of ECAN e quational \nformalizations are presented.  \n An ECAN is a graph, consisting of un -typed nodes and \nlinks, and also links that may be typed either HebbianLink \nor InverseHebbianLink.   It is also useful sometimes to \nconsider ECANs that extend the traditional grap h \nformalism and involve links that point to links as well as to nodes.  The term Atom will be used to refer to either nodes \nor links.  Each Atom in an ECAN is weighted with two \nnumbers, called STI (short -term importance) and LTI \n(long -term importance).  Ea ch Hebbian or InverseHebbian \nlink is weighted with a probability value.  \n The equations of an ECAN explain how the STI, LTI \nand Hebbian probability values get updated over time.  The metaphor underlying these equations is the interpretation of STI and LTI v alues as (separate) artificial currencies.  \nThe motivation for this metaphor has been elaborated somewhat in (Goertzel, 2007) and will not be recapitulated \nhere.  The fact that STI (for instance) is a currency means \nthat the total amount of STI in the syst em is conserved \n(except in unusual instances where the ECAN controller  \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <1>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ndecides to introduce inflation or deflation and explicitly  \nmanipulate the amount of currency in circulation), a fact that makes the dynamics of an ECAN dramatically different than that  of, say, an attractor neural network (in \nwhich there is no law of conservation of activation).   \n Conceptually, the STI value of an Atom is interpreted to \nindicate the immediate urgency of the Atom to the ECAN at a certain point in time; whereas the LTI v alue of an \nAtom indicates the amount of value the ECAN perceives in the retention of the Atom in memory (RAM).  An ECAN \nwill often be coupled with a \u201cForgetting \u201d process that \nremoves low -LTI Atoms from memory according to \ncertain heuristics.   \n STI and LTI  values will generally vary continuously, but \nthe ECAN equations we introduce below contain the \nnotion of an AttentionalFocus (AF), consisting of those \nAtoms in the ECAN with the highest STI value s.  The AF \nis given its meaning by the existence of equation s that treat \nAtoms with STI above a certain threshold differently.  \n Conceptually, the probability value of a HebbianLink \nfrom A to B is the odds that if A is in the AF, so is B; and \ncorrespondingly, the InverseHebbianLink from A to B is \nweighted with the o dds that if A is in the AF, then B is not.  \nA critical aspect of the ECAN equations is that Atoms \nperiodically spread their STI and LTI to other Atoms that connect to them via Hebbian and InverseHebbianLinks; this is the ECAN analogue of activation spreadi ng in \nneural networks.  \n Based on the strong corr espondences, one could \nplausibly  label ECANs as \u201cEconomic Neural Networks\u201d; \nhowever we have chosen not to go that path, as ECANs are not intended as plausible neural models, but rather as nonlinear dynamical systems engineered to fulfill certain \nfunctions within non -brain -emulative AGI systems.  \nIntegration into OpenCog and the NCE  \nThe OpenCog AGI framework, within which the current ECAN implementation exists, is a complex framework with a complex underlying th eory, and here we will only \nhint at some of its key aspects.  OpenCog is an open -source \nsoftware framework designed to support the construction \nof multiple AI systems; and the current main thrust of work \nwithin OpenCog is the implementation of a specific A GI \ndesign called OpenCogPrime (OCP), which is presented in the online wikibook (Goertzel, 2008).  Much of the OpenCog software code, and many of the ideas in the OCP \ndesign, have derived from the open -sourcing of aspects of \nthe proprietary Novamente Cognit ion Engine, which has \nbeen described extensively in previous publications.  \n The first key entity in the OpenCog software \narchitecture is the AtomTable, which is a repository for \nweighted, labeled hypergraph nodes and hyperedges.  In \nthe OpenCog implementat ion of ECANs, the nodes and \nlinks involved in the ECAN are stored here.  OpenCog also \ncontains an object called the CogServer, which wraps up an AtomTable as well as (among other objects) a Scheduler that schedules a set of MindAgent objects that each (whe n allocated processor time by the Scheduler) carry out cognitive operations involving the AtomTable.  The essence of the OCP design consists of a specific set of MindAgents designed to work together in a collaborative \nway in order to create a system that c arries out actions \noriented toward achieving goals (where goals are \nrepresented as specific nodes in the AtomTable, and actions are represented as Procedure objects indexed by Atoms in the AtomTable, and the utility of a procedure for achieving a goal is r epresented by a certain set of \nprobabilistic logical links in the AtomTable, etc.).   \nOpenCog is still at an experimental stage but has been used \nfor such projects as statistical language analysis, \nprobabilistic inference, and the control of virtual agents  in \nonline virtual worlds (see opencog.org).  \n So, in an OpenCog context, ECAN consists of a set of \nAtom types, and then a set of MindAgents carrying out \nECAN operations such as HebbianLinkUpdating and \nImportanceUpdating.  OCP also requires many other MindA gents carrying out other cognitive processes such as \nprobabilistic logical inference according to the PLN system \n(Goertzel et al, 2008) and evolutionary procedure learning \naccording to the MOSES system (Looks, 2006).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 8902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9429d5c-b72c-4435-b4f4-10daf332d067": {"__data__": {"id_": "d9429d5c-b72c-4435-b4f4-10daf332d067", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}, {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}, {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}, {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}, {"node_id": "7aac72e1-b0f2-498a-a05e-71766094c87d", "node_type": "1", "metadata": {}, "hash": "103e9eb9623f0ff9fed4585d06b478e62eb47a0869becb5fd5a6b587c394777a", "class_name": "RelatedNodeInfo"}]}, "text": "The \ninteroperation of the ECAN MindAge nts with these other \nMindAgents is a subtle issue that will be briefly discussed \nin the final section of the paper, but the crux is simple to understand.  \n The CogServer is understood to maintain a kind of \ncentral bank of STI and LTI funds.  When a non -EAN \nMindAgent finds an Atom valuable, it sends that Atom a \ncertain amount of Stimulus, which results in that Atom\u2019s \nSTI and LTI values being increased (via equations to be presented below, that transfer STI and LTI funds from the CogServer to the Atoms in ques tion).  Then, the ECAN \nImportanceUpdating MindAgent carries out multiple \noperations, including some that transfer STI and LTI funds \nfrom s ome Atoms back to the CogServer.  \nDefinition and Analysis of Variant 1  \n We now define a specific set of equations in ac cordance \nwith the ECAN conceptual framework described above.  \nWe define   \n\u20ac HSTI=s1,\uf04c,sn [ ] to be the vector of STI \nvalues, and \n  \n\u20ac C=c11,\uf04c,c1n\n\uf04d\uf04f\uf04d\ncn1,\uf04c,cnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the connection matrix of \nHebbian probability values, where it is assumed that the \nexistence of a  HebbianLink or InverseHebbianLink \nbetween A and B are mutually exclusive possibilities. We \nalso define \n  \n\u20ac CLTI=g11,\uf04c,g1n\n\uf04d\uf04f\uf04d\ngn1,\uf04c,gnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the matrix of LTI \nvalues for each of the corresponding links.  \n We assume an updating scheme in which, periodically, a \nnumbe r of Atoms are allocated Stimulus amounts, which \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <2>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ncauses the corresponding STI values to change according \nto the equations  \n \n\u20ac \u2200i:si=si\u2212rent +wages , \n \nwhere rent and wages are given by  \n \n\u20ac rent=Rent \u22c5max 0,log20si\nrecentMaxSTI\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n2\uf8eb \n\uf8ed \uf8ec \n\uf8ec \n\uf8ec \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n\uf8f7 \n\uf8f7 \uf8f7 ,  if  si>0\n0,                                                          if  si\u22640\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \n \nand \n \n\u20ac wages =Wage Stimulus\npi\ni=1n\n\u2211,if  pi=1\nWage Stimulus\nn\u2212 pi\ni=1n\n\u2211,if  pi=0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4 \n\uf8f4 , \n \nwhere   \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{} is the cue \npattern for the pattern that is to be retieved.  \nAll quantities enclosed in angled brackets are system \nparameters, and LTI updating is accomplished using a completely analogous set of equations.  \n The chang ing STI values then cause updating of the \nconnection matrix, according to the \u201cconjunction\u201d equations. First define  \n \n\u20ac normi=si\nrecentMaxSTI,if si\u22650\nsi\nrecentMinSTI,if si<0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f3 \uf8f4 . \n \nNext define  \n \n\u20ac conj =Conjunction si,sj()=normi\u00d7normj   \n \nand  \n \n\u20ac \u2032 c ij=ConjDecay conj+1\u2212conj( )cij. \n \nFinally update the matrix elements by settin g \n \n\u20ac cij=cji=\u2032 c ij,if  \u2032 c ij\u22650\n\u2032 c ij,        if  \u2032 c ij<0\uf8f1 \n\uf8f2 \n\uf8f3 . \n \nWe are currently also experimenting with updating the \nconnection matrix in accordance with the equations suggested by Storkey (1997, 1998, 1999.)  \n  A key property of these equations is that both wages \npaid to, and rent paid by, each node are positively \ncorrelated to their STI values. That is, the more important \nnodes are paid more for their services, but they also pay \nmore in rent.  \n A fixed percentage of the links with the lowest LTI \nvalues is then forgotten (which corresponds e quationally to \nsetting the LTI to 0).  \n Separately from the above, the process of Hebbian \nprobability updating is carried out via a diffusion process in which some nodes \u201ctrade\u201d STI utilizing a diffusion \nmatrix D, a version of the connection matrix C norma lized \nso that D is a left stochastic matrix. D acts on a similarly \nscaled vector v, normalized so that v is equivalent to a \nprobability vector of STI values.   \n The decision about which nodes diffuse in each \ndiffusion cycle is carried out via a decision fu nction. We \ncurrently are working with two types of decision functions: \na standard threshold function, by which nodes diffuse if \nand only if the nodes are in the AF; and a stochastic decision function in which nodes diffuse with probability \n\u20ac tanh shape si\u2212FocusBoundary( ) ( )+1\n2, where shape and \nFocusBoundary are parameters.  \n The details of the diffusion process are as follows. First, \nconstruct the diffusion matrix from the entries in the \nconnection matrix as follows:  \n \n\u20ac If cij\u22650, then dij=cij,\nelse, set dji=\u2212cij. \n \nNext, we normalize the column s of D to make D a left \nstochastic matrix. In so doing, we ensure that each node \nspreads no more that a \n\u20ac MaxSpread  proportion of its STI, \nby setting  \n \n\u20ac if dij\ni=1n\n\u2211 >MaxSpread : \n\u20ac dij=dij\u00d7MaxSpread\ndij\ni=1n\n\u2211,  for i\u2260j\ndjj=1\u2212MaxSpread\uf8f1 \n\uf8f2 \uf8f4 \uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \nelse: \n\u20ac djj=1\u2212 dij\ni=1\ni\u2260jn\n\u2211 \n \nNow we obtain a scaled STI vector v by setting  \n \n  \n\u20ac minSTI =\ni\u22081,2,\uf04c,n { }minsi  and maxSTI =\ni\u22081,2,\uf04c,n { }maxsi \n \n\u20ac vi=si\u2212minSTI\nmaxSTI\u2212minSTI \n \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <3>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nThe diffusion matrix is then used to update the node STIs  \n \n\u20ac \u2032 v =Dv \n \nand the STI values are rescaled to the interval \n\u20ac minSTI, maxSTI [ ].  \n In both the re nt and wage stage and in the diffusion \nstage, the total STI and LTI funds of the system each \nseparately form a conserved quantity: in the case of diffusion, the vector v is simply the total STI times a \nprobability vector. To maintain overall system funds w ithin \nhomeostatic bounds, a mid -cycle tax and rent -adjustment \ncan be triggered if necessary; the equations currently used \nfor this are  \n \n\u2022 \n\u20ac Rent =recent stimulus awarded before update \u00d7Wage\nrecent size of AF; \n\u2022 \n\u20ac tax=x\nn, where x is the distance from the current \nAtomSpace bounds to the center  of the \nhomeostatic range for AtomSpace funds;  \n\u2022 \n\u20ac \u2200i:si=si\u2212tax \nInvestigation of Convergence Properties  \nNow we investigate some of the properties that the above \nECAN equations display when we use an ECAN defined by them as an associative memory netwo rk in the manner \nof a Hopfield network.  \n We consider a situation where the ECAN is supplied \nwith memories via a \u201ctraining\u201d phase in which one \nimprints it with a series of binary patterns of the form \n  \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{}. Nois y versions of \nthese patterns are then used as cue patterns during the \nretrieval process.  \n We obviously desire that the ECAN retrieve the stored \npattern corresponding to a given cue pattern. In order to \nachieve this goal, the ECAN must converge to the corr ect \nfixed point.", "mimetype": "text/plain", "start_char_idx": 8904, "end_char_idx": 15315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15324782-858d-4e53-acd1-a854bec067da": {"__data__": {"id_": "15324782-858d-4e53-acd1-a854bec067da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}, {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}, {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}, {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}, {"node_id": "b958e4f5-8eca-48b9-8adc-be9ea9040702", "node_type": "1", "metadata": {}, "hash": "9b9af49ad9bb08a360d5bfcd8f0226070f4681affc794b92bcd5577e03382fdc", "class_name": "RelatedNodeInfo"}]}, "text": "Theorem:  For a given value of e in the STI rent \ncalculation, there is a subset of hyperbolic decision functions for which the ECAN dynamics converge to an attracting fixed point.  \n Proof:  Rent is  zero whenever \n\u20ac si\u2264recentMaxSTI\n20,  so we \nconsider this case first.  The updating process for the rent \nand wage stage can then be written as\n\u20ac fs()=s+constant . The \nnext stage is governed by the hyperbolic decision function  \n \n\u20ac gs()=tanh shape s-FocusBoundary( ) ( )+1\n2. \n \nThe entire updating sequence is obtained  by the \ncomposition   \n\u20ac g\uf06ff( )s(), whose derivative is then  \n   \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51(), \n \nwhich has magnitude less than 1 whenever -2 < shape < 2. \nWe next consider the case \n\u20ac si>recentMaxSTI\n20. The function f  \nnow takes the form  \n \n\u20ac fs()=s\u2212log20s/recentMaxSTI ( )\n2+constant,  \n \nand we have  \n \n  \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51\u22121\ns\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 . \n \nwhich has magnitude less than 1 whenever \n\u20ac shape <2\u22c5recentMaxSTI\nrecentMaxSTI -20. Choosing the shape parameter to \nsatisfy \n\u20ac 0<shape <min 2, 2\u22c5recentMaxSTI\nrecentMaxSTI -20\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7  then \nguarantees that \n  \n\u20ac g\uf06ff( )\u2032<1. Finally,   \n\u20ac g\uf06ff maps the closed \ninterval [recentMinSti, recentMaxSTI] into itself, so \napplying the Contraction Mapping Theorem completes the proof.  \nDefinition and Analysis of Variant 2  \nThe ECAN variant described above has performed \ncompletely acceptably in our experimen ts so far; however \nwe have also experimented with an alternate variant, with different convergence properties.  In Variant 2, the dynamics of the ECAN are specifically designed so that a \ncertain conceptually intuitive function serves as a \nLiapunov function  of the dynamics.   \n At a given time t, for a given Atom indexed i, we define \ntwo quantities: OUT\ni(t) = the total amount that Atom i pays \nin rent and tax and diffusion during the time -t iteration of \nECAN ;  INi(t) = the total amount that Atom i receives in \ndiffusion, stimulus and welfare during the time -t iteration \nof ECAN .  Note that welfare is a new concept to  be \nintroduced below.  We then define DIFF i(t)  = |IN i(t)  - \nOUT i(t)| ; and define AVDIFF(t) as the average of DIFF i(t)  \nover all i in the ECAN.   \n The design goal of Variant 2 of the ECAN equations is \nto ensure that, if the parameters are tweaked appropriately, AVDIFF can serve as a (deterministic or stochastic, \ndepending on the details) Liapunov function for ECAN \ndynamics.  This implies that with ap propriate parameters \nthe ECAN dynamics will converge toward a state where AVDIFF=0, meaning that no Atom is making any profit or \nincurring any loss.  It must be noted that this kind of \nconvergence is not always desirable, and sometimes one might want the p arameters set otherwise.  But if one wants \nthe STI components of an ECAN to converge to some \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <4>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nspecific values, as for instance in a classic associative \nmemory application, Variant 2 can guarantee this easily.  \n In Variant 2, each ECAN cycle begins with rent \ncollection and welfare distribution, which occurs via \ncollecting rent via the Variant 1 equation, and then \nperforming the following two steps.  Step A: calculate X, \ndefined as the positive part of the total amount by which AVDIFF has been increased via the  overall rent collection \nprocess.  Step B: redistribute X to needy Atoms as follows: For each Atom z, calculate the positive part of (OUT - IN), \ndefined as deficit(z).    Distribute (X + e) wealth among all Atoms z, giving each Atom a percentage of X that is \nproportional to deficit(z), but never so much as to cause \nOUT < IN for any Atom (the welfare being given counts \ntoward IN).   Here e>0 ensures AVDIFF decrease; e=0 may \nbe appropriate if convergence is not required in a certain \nsituation.  \n Step B is the w elfare step, which guarantees that rent \ncollection will decrease AVDIFF.  Step A calculates the \namount by which the rich have been made poorer, and uses this to make the poor richer.  In the case that the sum of deficit(z) over all nodes z is less than X, a mid -cycle rent \nadjustment may be triggered, calculated so that step B will decrease AVDIFF.   (I.e. we cut rent on the rich, if the poor don't need their money to stay out of deficit.)  \n Similarly, in each Variant 2 ECAN cycle, there is a \nwage -paying proc ess, which involves the wage -paying \nequation from Variant 1 followed by two steps.  Step A: \ncalculate Y, defined as the positive part of the total amount \nby which AVDIFF has been increased via the overall wage \npayment process.  Step B: exert taxation based  on the \nsurplus Y as follows:  For each Atom z, calculate the \npositive part of (IN - OUT), defined as surplus(z).    Collect \n(Y + e1) wealth from all Atom z, collecting from each node \na percentage of Y that is proportional to surplus(z), but \nnever so much as to cause IN < OUT for any node (the \nnew STI being collected counts toward OUT).   \n In case the total of surplus(z) over all nodes z is less than \nY, one may trigger a mid -cycle wage adjustment, \ncalculated so that step B will decrease AVDIFF.   I.e. we \ncut wages since there is not enough surplus to support it.  \n Finally, in the Variant 2 ECAN cycle, diffusion is done a \nlittle differently, via iterating the following process: If \nAVDIFF has increased during the diffusion round so far, then choose a random node  whose diffusion would \ndecrease AVDIFF, and let it diffuse; if AVDIFF has \ndecreased during the diffusion round so far, then choose a \nrandom node whose diffusion would increase AVDIFF, \nand let it diffuse.  In carrying out these steps, we avoid letting the s ame node diffuse twice in the same round.  \nThis algorithm does not let all Atoms diffuse in each cycle, but it stochastically lets a lot of diffusion happen in a way \nthat maintains  AVDIFF constant.  The iteration may be \nmodified to bias toward an average decrease in AVDIFF.  \n The random element in the diffusion step, together with \nthe logic of the rent/welfare and wage/tax steps, combines \nto yield the result that for Variant 2 of ECAN dynamics, \nAVDIFF is a stochastic Lyaponov function.  The details of the p roof of this will be given elsewhere due to space \nconsiderations but the outline of the argument should be  \nclear from the construction of Variant 2.  And note that by setting the e and e1 parameter to 0, the convergence \nrequirement can be eliminated, allow ing the network to \nevolve more spontaneously as may be appropriate in some \ncontexts; these parameters allow one to explicitly adjust the convergence rate.   \n One may also derive results pertaining to the \nmeaningfulness of the attractors, in various special  cases.  \nFor instance, if we have a memory consisting of a set M of m nodes, and we imprint the memory on the ECAN by stimulating m nodes during an interval of time, then we \nwant to be able to show that the condition where precisely \nthose m nodes are in th e AF is a fixed -point attractor.  \nHowever, this is not difficult, because one must only show \nthat if these m nodes and none others are in the AF, this \ncondition will persist.  Rigorous proof of this and related theorems will appear in a follow -up paper.  \nAssociative  Memory  \nWe have carried out experiments gauging the performance of Variant 1 of ECAN as an associative memory, using the implementation of ECAN within OpenCog, and using both the conventional and Storkey Hebbian updating formulas.  Extensive disc ussion of these results (along with Variation \n2 results) will be deferred to a later publication due to \nspace limitations, but we will make a few relevant \ncomments here.  \n    As with a Hopfield net memory, the memory capacity (defined as the number of memor ies that can be retrieved \nfrom the network with high accuracy) depends on the sparsity of the network, with denser networks leading to \ngreater capacity.", "mimetype": "text/plain", "start_char_idx": 15319, "end_char_idx": 23281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5": {"__data__": {"id_": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}, {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}, {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}, {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}, {"node_id": "82801c68-7461-45d0-8db4-eb16255cca29", "node_type": "1", "metadata": {}, "hash": "7705b4d38fe246a00c967b6ad34119282148c2f9f7b9382bbe1b9a2324edc315", "class_name": "RelatedNodeInfo"}]}, "text": "In the ECAN case the capacity also \ndepends on a variety of parameters of the ECAN equations, \nand the p recise unraveling of these dependencies is a \nsubject of current research.  However, one interesting dependency has already been uncovered in our preliminary experimentation, which has to do with the size of the AF \nversus the size of the memories being stor ed. \n    Define the size of a memory (a pattern being imprinted) \nas the number of nodes that are stimulated during imprinting of that memory.  In a classical Hopfield net \nexperiment, the mean size of a memory is usually around, \nsay, .2 -.5 of the number of n eurons.  In typical OpenCog \nassociative memory situations, we believe the mean size of a memory will be one or two orders of magnitude smaller than that, so that each memory occupies only a relatively small portion of the overall network.  \n    What we have found is that the memory capacity of an \nECAN is generally comparable to that of a Hopfield net \nwith the same number of nodes and links, if and only if the \nECAN parameters are tuned so that the memories being imprinted can fit into the AF.  That is, the AF threshold or \n(in the hyperbolic case) shape parameter must be tuned so that the size of the memories is not so large that the active nodes in a memory cannot stably fit into the AF.  This \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <5>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ntuning may be done adaptively by testing the impact of \ndifferent thr eshold/shape values on various memories of  \nthe appropriate size; or potentially a theoretical relationship between these quantities could be derived, but \nthis has not been done yet.  This is a reasonably satisfying \nresult given the cognitive foundation of ECAN: in loose \nterms what it means is that ECAN works best for \nremembering things that fit into its focus of attention during the imprinting process.  \n \nInteraction between ECANs and other  \nOpenCog Components  \nOur analysis above has focused on the associativ e-memory \nproperties of the networks, however, from the perspective of their utility within OpenCog or other integrative AI systems, this is just one among many critical aspects of ECANs.   In this final section we will discuss the broader \nintended utilizat ion of ECANs in OpenCog in more depth.  \n First of all, associative -memory functionality is directly \nimportant in OpenCogPrime because it is used to drive \nconcept creation.  The OCP heuristic called \u201cmap formation\u201d creates new Nodes corresponding to prominen t \nattractors in the ECAN, a step that (according to our preliminary results) not only increases the  memory \ncapacity of the network beyond what can be achieved with \na pure ECAN but also enables attractors to be explicitly  \nmanipulated by PLN inference.  \n Equally important to associative memory is the \ncapability of ECANs to facilitate effective allocation of the attention of other cognitive processes to appropriate \nknowledge items (Atoms). For example, one key role of \nECANs in OCP is to guide the forward and backward \nchaining processes of PLN (Probabilistic Logic Network) inference.  At each step, the PLN inference chainer is faced \nwith a great number of inference steps from which to \nchoose; and a choice is made using a statistical \u201cbandit \nproblem\u201d mechanism t hat selects each possible inference \nstep with a probability proportional to its expected \n\u201cdesirability.\u201d  In this context, there is considerable appeal in the heuristic of weighting inference steps using probabilities proportional to the STI values of the Atoms \nthey contain.  One thus arrives at a combined PLN/EAN \ndynamic as follows:  \n \n1. An inference step is carried out, involving a \nchoice among multiple possible inference steps, which is made using STI -based weightings (and \nmade among Atoms that LTI weighting s have \ndeemed valuable enough to remain in RAM)  \n2. The Atoms involved in the inference step are rewarded with STI and LTI proportionally to the \nutility of the inference step (how much it \nincreases the confidence of Atoms in the system\u2019s memory)  \n3. The ECAN opera tes, and multiple Atom\u2019s \nimportance values are updated  \n4. Return to Step 1 if the inference isn\u2019t finished   An analogous interplay may occur between ECANs and the MOSES procedure learning algorithm that also plays a key role in OCP.  \n It seems intuitively cle ar that the same attractor -\nconvergence properties highlighted in the present analysis of associative -memory behavior, will also be highly \nvaluable for the application of ECANs to attention \nallocation.  If a collection of Atoms is often collectively \nuseful for some cognitive process (such as PLN), then the \nassociative -memory -type behavior of ECANs means that \nonce a handful of the Atoms in the collection are found useful in a certain inference process, the other Atoms in the collection will get their STI sign ificantly boosted, and will \nbe likely to get chosen in subsequent portions of that same inference process.  This is exactly the sort of dynamics one \nwould like to see occur.  Systematic experimentation with \nthese interactions between ECAN and other OpenCog  \nprocesses is one of our research priorities going forwards.  \nReferences \nAmit, Daniel (1992).  Modeling Brain Function .  Cambridge University Press.  \nGoertzel, Ben (2006).  The Hidden Pattern .  Brown Walker.  \nGoertzel, Ben (2007). Virtual Easter Egg Hunting .  In Advances in Artificial \nGeneral Intelligence , IOS Press.  \nGoertzel, Ben (2008).  OpenCogPrime: Design for a Thinking Machine , online at \nhttp://www.opencog.org/wiki/OpenCogPrime:WikiBook  \nGoertzel, Ben, Matthew Ikle\u2019, Izabela Goertzel and Ari Heljakka.  Probabilistic \nLogic Networks.   Springer.  \nHutter, Marcus (2004).   Universal AI .  Springer.  \nLooks, Moshe (2006).  Competent Program Evolution .  PhD thesis in CS \ndepartment, Washington Universi ty at St. Louis. \nStorkey A.J. (1997) Increasing the capacity of the Hopfield network without \nsacrificing functionality , ICANN97 p451 -456. \nStorkey, Amos (1998). Palimpsest Memories:\udbff\udc14 A New High\udbff\udc08Capacity Forgetful \nLearning Rule for Hopfield Networks .  \nStorkey A.J. and R. Valabregue (1999) The basins of attraction of a new Hopfield \nlearning rule , Neural Networks 12 869 -876. \n \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <6>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nSee discussions, st ats, and author pr ofiles f or this public ation at : https://www .researchgate.ne t/public ation/334769428\nAn Inferential Approach to Mining Su rprising Patterns in Hypergraphs\nChapt er \u00b7 July 2019\nDOI: 10.1007/978-3-030-27005-6_6\nCITATIONS\n2READS\n224\n2 author s, including:\nNil Geisw eiller\n92 PUBLICA TIONS \u00a0\u00a0\u00a0251 CITATIONS \u00a0\u00a0\u00a0\nSEE PROFILE\nAll c ontent f ollo wing this p age was uplo aded b y Nil Geisw eiller  on 30 No vember 2022.\nThe user has r equest ed enhanc ement of the do wnlo aded file.\n\nAn Inferential Approach to Mining Surprising\nPatterns in Hypergraphs\nNil Geisweiller and Ben Goertzel\nSingularityNET Foundation, The Netherlands\n{nil,ben}@singularitynet.io\nAbstract. A novel pattern mining algorithm and a novel formal def-\ninition of surprisingness are introduced, both framed in the context of\nformal reasoning. Hypergraphs are used to represent the data in which\npatterns are mined, the patterns themselves, and the control rules for\nthe pattern miner. The implementation of these tools in the OpenCog\nframework, as part of a broader multi-algorithm approach to AGI, is\ndescribed.\nKeywords: Pattern Miner\u00b7Surprisingness\u00b7Reasoning\u00b7Hypergraphs.\n1 Introduction\nPattern recognition is broadly recognized as a key aspect of general intelligence,\nas well as of many varieties of specialized intelligence. General intelligence can\nbe envisioned, among other ways, as the process of an agent recognizing patterns\nin itself and its environment, including patterns regarding which of its actions\ntend to achieve which goals in which contexts [5].\nThe scope of pattern recognition algorithms in AI and allied disciplines is\nvery broad, including many specialized algorithms aimed at recognizing pat-\nterns in particular sorts of data such as visual data, auditory data or genomic\ndata. Among more general-purpose approaches to pattern recognition, so-called\n\u201dpattern mining\u201d plays a prominent role. Mining here refers to the process of\nsystematically searching a body of data to \ufb01nd a large number of patterns sat-\nisfying certain criteria. Most pattern mining algorithms are greedy in operation,\nmeaning they start by \ufb01nding simple patterns and then try to combine these\nto guide their search for more complex patterns, and iterate this approach a\nfew times.", "mimetype": "text/plain", "start_char_idx": 23283, "end_char_idx": 32021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb": {"__data__": {"id_": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}, {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}, {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}, {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}, {"node_id": "3bda7171-3737-44d5-bece-ce2cf32331b9", "node_type": "1", "metadata": {}, "hash": "59f708f45fb5720993e4a239e8b2ca3febb68aade5779606aedf4b506a09f1da", "class_name": "RelatedNodeInfo"}]}, "text": "Pattern mining algorithms tend to work at the syntactic level, such\nas subtree mining [2], where patterns are subtrees within a database of trees,\nand each subtree represents a concept containing all the trees consistent with\nthat subtree. This is both a limit and a strength. Limit because they cannot\nexpress arbitrary abstractions, and strength because they can be relatively e\ufb03-\ncient. Moreover even purely syntactic pattern miners can go a long way if much\nof the semantic knowledge is represented in syntax. For instance if the data con-\ntains human(John) and human\u21d2mortal a purely syntactic pattern miner will\nnot be able to take into account the implicit datum mortal(John) unless a step\n\n2 N. Geisweiller et al.\nof inference is formerly taken to make it visible. Another shortcoming of pattern\nmining is the volume of patterns it tends to produce. For that reason it can be\nuseful to rank the patterns according to interestingness [12]. One can also use\npattern mining in combination with other pattern recognition techniques, e.g.\nevolutionary programming or logical inference.\nHere we present a novel approach to pattern mining that combines semantic\nwith syntactic understanding of patterns, and that uses a sophisticated measure\nof pattern surprisingness to \ufb01lter the combinatorial explosion of patterns. The\nsurprisingness measure and the semantic aspect of patterns are handled via\nembedding the pattern mining process in an inference engine, operating on a\nhighly general hypergraph-based knowledge representation.\n1.1 Contribution\nA pattern miner algorithm alongside a measure of surprisingness designed to\n\ufb01nd patterns in hypergraph database are introduced. Both are implemented on\nthe OpenCog framework [6], on top of the Uni\ufb01ed Rule Engine , URE for short,\nthe reasoning engine of OpenCog. Framing pattern mining as reasoning provides\nthe following advantages:\n1. Enable hybridizations between syntactic and semantic pattern mining.\n2. Allow to handle the full notion of surprisingness, as will be further shown.\n3. O\ufb00er more transparency. Produced knowledge can be reasoned upon. Rea-\nsoning steps selected during mining can be represented as data for subsequent\nmining and reasoning, enabling meta-learning by leveraging URE\u2019s inference\ncontrol mechanism.\nThe last point, although already important as it stands, goes further than it may\nat \ufb01rst seem. One of the motivations to have a pattern miner in OpenCog is to\nmine inference traces, to discover control rules and apply these control rules to\nspeed up reasoning, akin to a Heuristic Algorithmic Memory [9] for reasoning.\nBy framing not only pattern mining but more generally learning as reasoning\nwe hope to kickstart a virtuous self-improvement cycle. Towards that end more\ncomponents of OpenCog, such as MOSES [8], an evolutionary program learner,\nare in the process of being ported to the URE.\nFraming learning as reasoning is not without drawbacks as more transparency\ncomes at a computational cost. However by carefully partitioning transpar-\nent/costly versus opaque/e\ufb03cient computations we hope to reach an adequate\nbalance between e\ufb03ciency and open-endedness. For instance in the case of evolu-\ntionary programming, decisions pertaining to what regions of the program space\nto explore is best processed as reasoning, given the importance and the cost of\nsuch operation. While more systematic operations such as evaluating the \ufb01tness\nof a candidate can be left as opaque. One may draw a speculative analogy with\nthe distinction between conscious and unconscious processes.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 3\n1.2 Outline\nIn Section 2 a pattern mining algorithm over hypergraphs is presented; it is\nframed as reasoning in Section 3. In Section 4 a de\ufb01nition of surprisingness is\nprovided, and a more specialized implementation is derived from it. Then, in\nSection 5 an example of how it can be framed as reasoning is presented, both\nfor the specialized and abstract de\ufb01nitions of surprisingness.\n2 Pattern Mining in Hypergraph Database\n2.1 AtomSpace: Hypergraph Database\nLet us \ufb01rst rapidly recall what is the AtomSpace [6], the hypergraph knowledge\nstore with which we shall work here. The AtomSpace is the OpenCog AGI frame-\nwork\u2019s primary data storage solution. It is a labeled hypergraph particularly\nsuited for representing symbolic knowledge, but is also capable of representing\nsub-symbolic knowledge (probabilities, tensors, etc), and most importantly com-\nbinations of the two. In the OpenCog terminology, edges of that hypergraph are\ncalled links, vertices are called nodes , and atoms are either links or nodes.\nFor example one may express that cars are vehicles with\n(Inheritance (Concept \"car\") (Concept \"vehicle\"))\nInheritance is a link connecting two concept nodes, carand vehicle . If one\nwishes to express the other way around, how much vehicles are cars, then one\ncan attach the inheritance with a truth value\n(Inheritance (stv 0.4 0.8) (Concept \"vehicle\") (Concept \"car\"))\nwhere 0.4 represents a probability and 0.8 represents a con\ufb01dence.\nStoring knowledge as hypergraph rather than collections of formulae allows\nto rapidly query atoms and how they relate to other atoms.\n2.2 Pattern Matching\nOpenCog comes with a pattern matcher , a component that can query the Atom-\nSpace, similar in spirit to SQL, but di\ufb00erent in several aspects. For instance\nqueries are themselves programs represented as atoms in the AtomSpace. This\ninsures re\ufb02exivity where queries can be queried or produced by queries.\nHere\u2019s an example of such a query\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nwhich fetches instances of transitivity of inheritance in the AtomSpace. For in-\nstance if the AtomSpace contains\n\n4 N. Geisweiller et al.\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\n(Inheritance (Concept \"mammal\") (Concept \"animal\"))\n(Inheritance (Concept \"square\") (Concept \"shape\"))\nit retrieves\n(Set (List (Concept \"cat\") (Concept \"mammal\") (Concept \"animal\")))\nwhere cat,mammal andanimal are associated to variable $X,$Yand$Zaccording\nto the pre\ufb01x order of the query, but square andshape are not retrieved because\nthey do not exhibit transitivity. The construct Setrepresents a set of atoms,\nand List in this context represents tuples of values. The construct Getmeans\nretrieve. The construct Present means that the arguments are patterns to be\nconjunctively matched against the data present in the AtomSpace. We also call\nthe arguments of Present ,clauses , and say that the pattern is a conjunction of\nclauses .\nIn addition, the pattern matcher can rewrite. For instance a transitivity rule\ncould be implemented with\n(Bind (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\")))\n(Inheritance (Variable \"$X\") (Variable \"$Z\")))\nThe pattern matcher provides the building blocks for the reasoning engine. In\nfact the URE is, for the most part, pattern matching + uni\ufb01cation. The collection\nof atoms that can be executed in OpenCog, to query the atomspace, reason or\nsuch, forms a language called Atomese .\n2.3 Pattern Mining as Inverse of Pattern Matching\nThe pattern miner solves the inverse problem of pattern matching. It attempts\nto \ufb01nd queries that would retrieve a certain minimum number of matches. This\nnumber is called the support in the pattern mining terminology [1,2].\nIt is worth mentioning that the pattern matcher has more constructs than\nGet,Present andBind ; for declaring types, expressing preconditions, and per-\nforming general computations. However the pattern miner only supports a subset\nof constructs due to the inherent complexity of such expressiveness.\n2.4 High Level Algorithm of the Pattern Miner\nBefore showing how to express pattern mining as reasoning, let us explain the\nalgorithm itself.\nOur pattern mining algorithm operates like most pattern mining algorithms\n[2] by greedily searching the space of frequent patterns while pruning the parts\nthat do not reach the minimum support. It typically starts from the most ab-\nstract one, the toppattern, constructing specializations of it and only retain those\nthat have enough support, then repeat. The apriori property [1] guaranties that\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 5\nno pattern with enough support will be missed based on the fact that patterns\nwithout enough support cannot have specializations with enough support. More\nformally, given a database D, a minimal support Sand an initialize collection C\nof patterns with enough support, the mining algorithm is as follows\n1. Select a pattern PfromC.\n2. Produce a shallow specialization QofPwith support equal to or above S.\n3. Add QtoC, remove Pif all its shallow specializations have been produced.\n4. Repeat till a termination criterion has been met.\nThe pattern collection Cis usually initialized with the top pattern\n(Get (Present (Variable \"$X\")))\nthat matches the whole database, and from which all subsequent patterns are\nspecialized.", "mimetype": "text/plain", "start_char_idx": 32022, "end_char_idx": 41067, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6": {"__data__": {"id_": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "node_type": "1", "metadata": {}, "hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}, {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}, {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}, {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}]}, "text": "A shallow specialization is a specialization such that the expansion\nis only a level deep. For instance, if Dis the 3 inheritances links of Subsection\n2.2 (cat is a mammal, a mammal is an animal and square is a shape), a shallow\nspecialization of the top pattern could be\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nwhich would match all inheritance links, thus have a support of 3. A subsequent\nshallow specialization of it could be\n(Get (Present (Inheritance (Concept \"cat\") (Variable \"$Y\"))))\nwhich would only match\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\nand have a support of 1. So if the minimum support Sis 2, this one would\nbe discarded. In practice the algorithm is complemented by heuristics to avoid\nexhaustive search, but that is the core of it.\n3 Framing Pattern Mining as Reasoning\nThe hardest part of the algorithm above is step 1, selecting which pattern to\nexpand; this has the biggest impact on how the space is explored. When pat-\ntern mining is framed as reasoning such decision corresponds to a premise or\nconclusion selection . Let us formalize the type of propositions we need to prove\nin order to search the space of patterns. For sake of conciseness we will use a\nhybridization between mathematics and Atomese, it being understood that all\ncan be formalized in Atomese. Given a database Dand a minimum support S\nwe want to instantiate and prove the following theorem\nS\u2264support (P,D)\nwhich expresses that pattern Phas enough support with respect to the data\nbaseD. To simplify we introduce the predicate minsup (P, S,D) as a shorthand\nforS\u2264support (P,D). The primary inference rule we need is (given in Gentzen\nstyle),\n\n6 N. Geisweiller et al.\nminsup (Q, S,D) spec (Q, P)(AP)minsup (P, S,D)\nexpressing that if Qhas enough support, and Qis a specialization of P, then\nPhas enough support, essentially formalizing the apriori property (AP). We\ncan either apply such rule in a forward way, top-down, or in a backward way,\nbottom-up. If we search from more abstract to more specialized we want to\nuse it in a backward way. Meaning the reasoning engine needs to choose P\n(conclusion selection from minsup (P, S,D)) and then construct a specialization\nQ. In practice that rule is actually written backward so that choosing Pamounts\nto a premise selection , but is presented here this way for expository purpose.\nThe de\ufb01nition of spec is left out, but it is merely a variation of the subtree\nrelationship accounting for variables.\nOther heuristic rules can be used to infer knowledge about minsup . They are\nheuristics because unlike the apriori property, they do not guaranty complete-\nness, but can speed-up the search by eliminating large portions of the search\nspace. For instance the following rule\nminsup (P, S,D) minsup (Q, S,D) R(P\u2297Q)(CE)minsup (P\u2297Q, S,D)\nexpresses that if PandQhave enough support, and a certain combination P\u2297Q\nhas a certain property R, then such combination has enough support. Such rule\ncan be used to build the conjunction of patterns. For instance given PandQ\nboth equal to\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nOne can combine them (joint by variable $Y) to form\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nThe property Rhere is that both clauses must share at least one joint variable\nand the combination must have its support above or equal to the minimum\nthreshold.\n4 Surprisingness\nEven with the help of the apriori property and additional heuristics to prune\nthe search, the volume of mined patterns can still be overwhelming. For that it\nis helpful to assign to the patterns a measure of interestingness . This is a broad\nnotion and we will restrict our attention to the sub-notion of surprisingness , that\ncan be de\ufb01ned as what is contrary to expectations .\nJust like for pattern mining, surprisingness can be framed as reasoning. They\nare many ways to formalize it. We tentatively suggest that in its most general\nsense, surprisingness may be the considered as the di\ufb00erence of outcome between\ndi\ufb00erent inferences over the same conjecture.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 7\nOf course in most conventional logical systems, if consistent, di\ufb00erent infer-\nences will produce the same result. However in para-consistent systems, such as\nPLN for Probabilistic Logic Network [4], OpenCog\u2019s logic for common sense rea-\nsoning, con\ufb02icting outcomes are possible. In particular PLN allows propositions\nto be believed with various degrees of truth, ranging from total ignorance to\nabsolute certainty. Thus PLN is well suited for such de\ufb01nition of surprisingness.\nMore speci\ufb01cally we de\ufb01ne surprisingness as the distance of truth values be-\ntween di\ufb00erent inferences over the same conjecture . In PLN a truth value is a\nsecond order distribution, probabilities over probabilities, Chapter 4 of [4]. Sec-\nond order distributions are good at capturing uncertainties. Total ignorance is\nrepresented by a \ufb02at distribution (Bayesian prior), or a slightly concave one\n(Je\ufb00reys prior [7]), and absolute certainty by a Dirac delta function.\nSuch de\ufb01nition of surprisingness has the merit of encompassing a wide variety\nof cases; like the surprisingness of \ufb01nding a proof contradicting human intuition.\nFor instance the outcome of Euclid\u2019s proof of the in\ufb01nity of prime numbers might\ncontradict the intuition of a beginner upon observation that prime numbers\nrapidly rarefy as they grow. It also encompasses the surprisingness of observing\nan unexpected event, or the surprisingness of discovering a pattern in seemingly\nrandom data. All these cases can be framed as ways of constructing di\ufb00erent\ntypes of inferences and \ufb01nding contradictions between them. For instance in the\ncase of discovering a pattern in a database, one inference could calculate the\nempirical probability based on the data, while an other inference could calculate\na probability estimate based on variable independences.\nThe distance measure to use to compare conjecture outcomes remains to be\nde\ufb01ned. Since our truth values are distributions the Jensen-Shannon Distance ,\nJSD for short [3], suggested as surprisingness measure in [11], could be used. The\nadvantage of such distance is that it accounts well for uncertainty. If for instance\na pattern is discovered in a small data set displaying high levels of dependencies\nbetween variables (thus surprising relative to an independence assumption), the\nsurprisingness measure should consider the possibility that it might be a \ufb02uke\nsince the data set is small. Fortunately, the smaller the data set, the \ufb02atter the\nsecond order distributions representing the empirical and the estimated truth\nvalues of the pattern, consequently reducing the JSD.\nLikewise one can imagine the following experiments. In the \ufb01rst experiment\na coin is tossed 3 times, a probability p1of head is calculated, then the coin is\ntossed 3 more times, a second probability p2of head is calculated. p1andp2\nmight be very di\ufb00erent, but it should not be surprising given the low number\nof observations. On the contrary, in the second experiment the coin is tossed a\nbillion times, p1is calculated, then another billion times, p2is calculated. Here\neven tiny di\ufb00erences between p1andp2should be surprising. In both cases the\nJensen-Shannon Distance seems to adequatly accounts for the uncertainty.\nA slight re\ufb01nement of our de\ufb01nition of surprisingness, probably closer to\nhuman intuition, can be obtained by \ufb01xing one type of inference provided by the\ncurrent model of the world from which rapid (and usually uncertain) conclusions\ncan be derived, and the other type of inference implied by the world itself, either\n\n8 N. Geisweiller et al.\nvia observations, in the case of an experiential reality, or via crisp and long chains\nof deductions in the case of a mathematical reality.\n4.1 Independence-based Surprisingness\nHere we explore a limited form of surprisingness based on the independence\nof the variables involved in the clauses of a pattern, called I-Surprisingness for\nIndependence-based Surprisingness.", "mimetype": "text/plain", "start_char_idx": 41068, "end_char_idx": 49161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc54d88a-67e5-4ce8-9678-3120b35b8fd1": {"__data__": {"id_": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}, {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}, {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}, {"node_id": "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "node_type": "1", "metadata": {}, "hash": "f1a02cfd759052d33e112969d6b8efa33bc596758a3e6a4f1ab4b844569fb032", "class_name": "RelatedNodeInfo"}]}, "text": "For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nhas two clauses\n(Inheritance (Variable \"$X\") (Variable \"$Y\"))\nand\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))\nIf each clause is considered independently, that is the distribution of values taken\nby the variable tuples ( $X,$Y) appearing in the \ufb01rst clause is independent from\nthe distribution of values taken by the variable tuples ( $Y,$Z) in the second\nclause, one can simply use the product of the two probabilities to obtain an\nprobability estimate of their conjunctions. However the presence of joint vari-\nables, here $Y, makes this calculation incorrect. The connections need to be taken\ninto account. To do that we use the fact that a pattern of connected clauses is\nequivalent to a pattern of disconnected clauses combined with a condition of\nequality between the joint variables. For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nis equivalent to\n(Get (And (Present (Inheritance (Variable \"$X\") (Variable \"$Y1\"))\n(Inheritance (Variable \"$Y2\") (Variable \"$Z\")))\n(Equal (Variable \"$Y1\") (Variable \"$Y2\"))))\nwhere the joint variables, here $Y, have been replaced by variable occurrences in\neach clause, $Y1and $Y2. Then we can express the probability estimate as the\nproduct of the probabilities of the clauses, times the probability of having the\nvalues of the joint variables equal.\n5 I-Surprisingness Framed as Reasoning and Beyond\nThe proposition to infer in order to calculate surprisingness is de\ufb01ned as\nsurp (P,D, s)\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 9\nwhere surp is a predicate relating the pattern Pand the database Dto its\nsurprisingness s, de\ufb01ned as\ns:=dst(emp(P,D),est(P,D))\nwhere dstis the Jensen-Shannon distance, empis the empirical second order\ndistribution of P, and estits estimate. The calculation of emp(P,D) is easily\nhandled by a direct evaluation rule that uses the support of Pand the size\nofDto obtain the parameters of the beta-binomial-distribution describing its\nsecond order probability. However, the mean by which the estimate is calculated\nis let unspeci\ufb01ed. This is up to the reasoning engine to \ufb01nd an inference path\nto calculate it. Below is an example of inference tree to calculate surp based on\nI-Surprisingness\nPDPD(DE)emp(P,D)PD(IS)est(P,D)(JSD)dst(emp(P,D),est(P,D))(S)surp (P,D,dst(emp(P,D),est(P,D)))\nwhere\n\u2013(S) is a rule to construct the surp predicate,\n\u2013(JSD) is a rule to calculate the Jensen-Shannon Distance,\n\u2013(DE) is the direct evaluation rule to calculate the empirical second order\nprobability of Paccording toD,\n\u2013(IS) is a rule to calculate the estimate of Pbased on I-Surprisingness de-\nscribed in Section 4.1.\nThat inference tree uses a single rule (IS) to calculate the estimate. Most rules\nare complex, such as (JSD), and actually have the heavy part of the calculation\ncoded in C++ for maximum e\ufb03ciency. So all that the URE must do is put\ntogether such inference tree, which can be done reasonably well given how much\ncomplexity is encapsulated in the rules.\nAs of today we have only implemented (IS) for the estimate. In general,\nhowever, we want to have more rules, and ultimately enough so that the esti-\nmate can be inferred in an open-ended way. In such scenario, the inference tree\nwould look very similar to the one above, with the di\ufb00erence that the (IS) rule\nwould be replaced by a combination of other rules. Such approach naturally\nleads to a dynamic surprisingness measure. Indeed, inferring that some pattern\nis I-Surprising requires to infer its empirical probability, and this knowledge can\nbe further utilized to infer estimates of related patterns. For instance, if say an\nI-Surprising pattern is discovered about pets and food. A pattern about cats and\nfood might also be measured as I-Surprising, however the fact that cat inherits\npet may lead to constructing an inference that estimates the combination of cat\nand food based on the combination of pet and food, possibly leading to a much\nbetter estimate, and thus decreasing the surprisingness of that pattern.\n\n10 N. Geisweiller et al.\n6 Discussion\nThe ideas presented above have been implemented as open source C++ code in\nthe OpenCog framework, and have been evaluated on some initial test datasets,\nincluding a set of logical relationships drawn from the SUMO ontology [10]. The\nresults of this empirical experimentation are omitted here for space reasons and\nwill be posted online as supplementary information. These early experiments\nprovide tentative validation of the sensibleness of the approach presented: using\ninference on a hypergraph based representation to carry out pattern mining that\nweaves together semantics and syntax and is directed toward a sophisticated\nversion of surprisingness rather than simpler objective functions like frequency.\nFuture work will explore applications to a variety of practical datasets, in-\ncluding empirical data and logs from an inference engine; and richer integration\nof these methods with more powerful but more expensive techniques such as\npredicate logic inference and evolutionary learning.\nReferences\n1. Agrawal, R., Srikant, R.: Fast algorithms for mining association rules. Proceedings\nof the 20th International Conference on Very Large Data Bases (1994)\n2. Chi, Y., Muntz, R., Nijssen, S., N. Kok, J.: Frequent subtree mining - an overview.\nFundam. Inform. 66, 161\u2013198 (01 2005)\n3. Endres, D., Schindelin, J.: A new metric for probability distributions. Information\nTheory, IEEE Transactions on 49, 1858 \u2013 1860 (08 2003)\n4. Goertzel, B., Ikle, M., Goertzel, I.F., Heljakka, A.: Probabilistic Logic Networks.\nSpringer US (2009)\n5. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence, Part\n1: A Path to Advanced Agi Via Embodied Learning and Cognitive Synergy. At-\nlantis Press (2014)\n6. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence,\nPart 2: The CogPrime Architecture for Integrative, Embodied AGI. Atlantis Press\n(2014)\n7. Je\ufb00reys, H.: An Invariant Form for the Prior Probability in Estimation Problems.\nProceedings of the Royal Society of London Series A 186, 453\u2013461 (1946)\n8. Looks, M., Sc, B., Missouri, S.L., Louis, S.: Abstract competent program evolution\nby moshe looks (2006)\n9.\u00a8Ozkural, E.: Towards heuristic algorithmic memory. In: Schmidhuber, J.,\nTh\u00b4 orisson, K.R., Looks, M. (eds.) Arti\ufb01cial General Intelligence. pp. 382\u2013387.\nSpringer Berlin Heidelberg, Berlin, Heidelberg (2011)\n10. Pease, A.: Ontology: A practical guide. Articulate Software Press, Angwin, CA (01\n2011)\n11. Pienta, R., Lin, Z., Kahng, M., Vreeken, J., Talukdar, P.P., Abello, J.,\nParameswaran, G., Chau, D.H.P.: Adaptivenav: Discovering locally interesting and\nsurprising nodes in large graphs. IEEE VIS Conference (Poster) (2015)\n12. Vreeken, J., Tatti, N.: Interesting Patterns, pp. 105\u2013134. Springer International\nPublishing, Cham (2014)\nView publication stats", "mimetype": "text/plain", "start_char_idx": 49162, "end_char_idx": 56191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7336d48b-9dcb-4a55-93bb-60c4db9ff773": {"__data__": {"id_": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "408db57b-f4c6-4498-8fb7-62694d06d7e9", "node_type": "1", "metadata": {}, "hash": "e1add1e5821cc88eb23937a262e98284f2bfcd9b7330c9070cdfc2f3bb9d8624", "class_name": "RelatedNodeInfo"}, {"node_id": "131dcd82-56ea-471e-913c-078d8c8fa663", "node_type": "1", "metadata": {}, "hash": "2e24101a6b8f6c67882e3f5b9e430470bac2d8e855752be288ea9485f564cb69", "class_name": "RelatedNodeInfo"}, {"node_id": "18207c4a-77dc-44f7-86d9-ef2fbd1e3729", "node_type": "1", "metadata": {}, "hash": "b5c4d66366f24773580eb075f07ee4f1bd0ed7bcfb46b21dcd2e523e4d620f0f", "class_name": "RelatedNodeInfo"}, {"node_id": "000f8812-7534-46a9-8d88-f6ca499854b9", "node_type": "1", "metadata": {}, "hash": "7e1be3360fee1b2ca6f504f4aff404743455ab57f68a0f9dadfaef500f0e7c96", "class_name": "RelatedNodeInfo"}, {"node_id": "acf7ba6b-97b2-473f-a534-113d8d7e3f4a", "node_type": "1", "metadata": {}, "hash": "339a5f50e435026eeb88d9f85060ed4ae38bd9c28a6cfc017dce36c24a758429", "class_name": "RelatedNodeInfo"}]}, "text": "Economic Attention Networks:  \nAssociative Memory and Resource Allocation  \nfor General Intelligence  \nMatthew Ikle\u2019, Joel Pitt, Ben Goertzel, George Sellman  \n \nAdams State College (ASC), Singularity Institute for AI (SIAI), Novamente LLC and SIAI, ASC  \n1405 Berne rd Place, Rockville MD 20851, USA  \nben@goertzel.org , stephan@bugaj.com  \n \n \n \n \nAbstract  \nA novel method for simultaneously storing memories and \nallocating resources in AI systems is presented.  The \nmethod, Economic Attention Networks (ECANs), bears \nsome resemblance to the spread of activation in attractor \nneural networks, but differs via explicitly differentiating two \nkinds of \u201cactivation\u201d (Short Term Importance, related to \nproces sor allocation; and Long Term Importance, related to \nmemory allocation), and in using equations that are based \non ideas from economics rather than approximative neural \nmodeling.  Here we explain the basic ideas of ECANs, and \nthen investigate the functional ity of ECANs as associative \nmemories, via mathematical analysis and the reportage of experimental results obtained from the implementation of \nECANs in the OpenCog integrative  AGI system. \nIntroduction \nOne of the critical challenges confronting any system \naimed at advanced general intelligence is the allocation of \ncomputational resources.  The central nature of this issue is \nhighlighted by Hutter\u2019s (2004) mathematical results \nshowing that if one formalizes intelligence as the \nachievement of complex computabl e goals, then there are \nvery simple software programs that can achieve arbitrarily \nhigh degrees of intelligence, so long as they are allotted huge amounts of computational resources.  In this sense, \ncoping with space and time limitations is the crux of the  \nAGI problem.   \n Not surprisingly, given its central nature, the \nmanagement of computational resources ties in with a \nvariety of other concrete issues that AGI systems confront, \nin ways depending on the specific system in question.  In \nthe approach we will  describe here, resource allocation is \ncarried out by the same structures and dynamics as \nassociative memory, whereas the relationship between \nresource allocation and other system processes like reasoning and procedure learning involves feedback between di stinct software components.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1515a848-c1fc-4637-9485-ca775b919e9c": {"__data__": {"id_": "1515a848-c1fc-4637-9485-ca775b919e9c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7", "node_type": "1", "metadata": {}, "hash": "7107669b299d9e378f30fbb2add9821c0c22bde027c0fea0f82bda035c78109d", "class_name": "RelatedNodeInfo"}, {"node_id": "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa", "node_type": "1", "metadata": {}, "hash": "f34aace16aa7e91012281bb8b348a95e3f0d258790d1f91f97378e5e8a1ab4f5", "class_name": "RelatedNodeInfo"}, {"node_id": "c1c3092c-c836-4d61-86b9-6afce0b7a4e8", "node_type": "1", "metadata": {}, "hash": "a0a7d68daa50a9b88a50f0f4acad7f8325cd102ec97e5a1693e2d1b3ff2fc120", "class_name": "RelatedNodeInfo"}, {"node_id": "8ea77f12-1d3f-410a-825b-6db79ae05844", "node_type": "1", "metadata": {}, "hash": "67d434c4c6410e91e22a46adc0fc311cc5d4cc1e20f35ff63218af733179b859", "class_name": "RelatedNodeInfo"}]}, "text": "We will describe here a specific approach to resource \nallocation and associative memory, which we call Economic Attention Networks or ECANs.  ECANs have \nbeen designed and implemented within an integrative AGI \nframework called O penCog (which overlaps with the \nrelated Novamente Cognition Engine system; see Goertzel, \n2006).  However, ECANs also have meaning outside the OpenCog context; they may be considered nonlinear dynamical systems in roughly the same family as attractor \nneural  networks such as Hopfield nets (Amit, 1992).  The \nmain focus of this paper is the study of ECANs as \nassociative memories, which involves mathematical and experimental analyses that are independent of the \nembedding of ECANs in OpenCog or other AGI systems.   \nBut we will also discuss the implications of these results \nfor specific interactions between ECANs and other \nOpenCog components  \nEconomic Attention Networks \nFirst we summarize the essential ideas of ECANs; in later \nsections two specific variants of ECAN e quational \nformalizations are presented.  \n An ECAN is a graph, consisting of un -typed nodes and \nlinks, and also links that may be typed either HebbianLink \nor InverseHebbianLink.   It is also useful sometimes to \nconsider ECANs that extend the traditional grap h \nformalism and involve links that point to links as well as to nodes.  The term Atom will be used to refer to either nodes \nor links.  Each Atom in an ECAN is weighted with two \nnumbers, called STI (short -term importance) and LTI \n(long -term importance).  Ea ch Hebbian or InverseHebbian \nlink is weighted with a probability value.  \n The equations of an ECAN explain how the STI, LTI \nand Hebbian probability values get updated over time.  The metaphor underlying these equations is the interpretation of STI and LTI v alues as (separate) artificial currencies.  \nThe motivation for this metaphor has been elaborated somewhat in (Goertzel, 2007) and will not be recapitulated \nhere.", "mimetype": "text/plain", "start_char_idx": 2310, "end_char_idx": 4276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65": {"__data__": {"id_": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "2376e96b-0e5a-4e26-b840-329927592414", "node_type": "1", "metadata": {}, "hash": "94c55ec4c9b0803e07e299c32cbf448eece0d6f80ec71338cbc52458d52a86a0", "class_name": "RelatedNodeInfo"}, {"node_id": "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2", "node_type": "1", "metadata": {}, "hash": "45a62ab0ac7191ab2a3de7187bccb83aaf7137d3539d602cc64d9e4c787298af", "class_name": "RelatedNodeInfo"}, {"node_id": "654dba60-7b35-41c1-aaa2-3cb551813d76", "node_type": "1", "metadata": {}, "hash": "21e12306507cfb033834a9e35c78e8d6de96042db6afff189f4389fe6268d7e1", "class_name": "RelatedNodeInfo"}, {"node_id": "5943c3e5-ea7b-4808-b8d2-34a8a20dba51", "node_type": "1", "metadata": {}, "hash": "327e120867a56c6f9ee6d1c1c50befbc2ff0ddb78021a6bdc7fb3ed32f7951d4", "class_name": "RelatedNodeInfo"}, {"node_id": "9d75ec1b-1b58-4d1a-883c-f69f0040514c", "node_type": "1", "metadata": {}, "hash": "84c80545004b1d43e5666c29a6618d778a770ca2a2cea410b99fc66ae9e113e3", "class_name": "RelatedNodeInfo"}]}, "text": "The fact that STI (for instance) is a currency means \nthat the total amount of STI in the syst em is conserved \n(except in unusual instances where the ECAN controller  \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <1>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ndecides to introduce inflation or deflation and explicitly  \nmanipulate the amount of currency in circulation), a fact that makes the dynamics of an ECAN dramatically different than that  of, say, an attractor neural network (in \nwhich there is no law of conservation of activation).   \n Conceptually, the STI value of an Atom is interpreted to \nindicate the immediate urgency of the Atom to the ECAN at a certain point in time; whereas the LTI v alue of an \nAtom indicates the amount of value the ECAN perceives in the retention of the Atom in memory (RAM).  An ECAN \nwill often be coupled with a \u201cForgetting \u201d process that \nremoves low -LTI Atoms from memory according to \ncertain heuristics.   \n STI and LTI  values will generally vary continuously, but \nthe ECAN equations we introduce below contain the \nnotion of an AttentionalFocus (AF), consisting of those \nAtoms in the ECAN with the highest STI value s.  The AF \nis given its meaning by the existence of equation s that treat \nAtoms with STI above a certain threshold differently.  \n Conceptually, the probability value of a HebbianLink \nfrom A to B is the odds that if A is in the AF, so is B; and \ncorrespondingly, the InverseHebbianLink from A to B is \nweighted with the o dds that if A is in the AF, then B is not.  \nA critical aspect of the ECAN equations is that Atoms \nperiodically spread their STI and LTI to other Atoms that connect to them via Hebbian and InverseHebbianLinks; this is the ECAN analogue of activation spreadi ng in \nneural networks.", "mimetype": "text/plain", "start_char_idx": 4278, "end_char_idx": 6093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4": {"__data__": {"id_": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "3dd6d34c-673d-4dce-b686-4d637fa899af", "node_type": "1", "metadata": {}, "hash": "23cec5f2b42ef5a7543c25ea829b49fe12772394f4c111d055ea178bcb8d7d74", "class_name": "RelatedNodeInfo"}, {"node_id": "3f370525-4dd4-4317-a39b-6a035dddcf52", "node_type": "1", "metadata": {}, "hash": "6e5ed92253892d78ba85e23df7059aa983540f307e1bd063238810eebffd8bbd", "class_name": "RelatedNodeInfo"}, {"node_id": "740a137d-5178-46ef-9e69-8417f32d5c64", "node_type": "1", "metadata": {}, "hash": "8edb004bac2979ca104e3d0b6d170b476b7d1108044283854e20ef14e3f7d12f", "class_name": "RelatedNodeInfo"}, {"node_id": "9da10ac4-3051-4d72-b978-328049d5c617", "node_type": "1", "metadata": {}, "hash": "dbdfa667201ef5ad6ce0d5d8c54a43d0c7b485e7b397f85f7a308a1d36881662", "class_name": "RelatedNodeInfo"}]}, "text": "Based on the strong corr espondences, one could \nplausibly  label ECANs as \u201cEconomic Neural Networks\u201d; \nhowever we have chosen not to go that path, as ECANs are not intended as plausible neural models, but rather as nonlinear dynamical systems engineered to fulfill certain \nfunctions within non -brain -emulative AGI systems.  \nIntegration into OpenCog and the NCE  \nThe OpenCog AGI framework, within which the current ECAN implementation exists, is a complex framework with a complex underlying th eory, and here we will only \nhint at some of its key aspects.  OpenCog is an open -source \nsoftware framework designed to support the construction \nof multiple AI systems; and the current main thrust of work \nwithin OpenCog is the implementation of a specific A GI \ndesign called OpenCogPrime (OCP), which is presented in the online wikibook (Goertzel, 2008).  Much of the OpenCog software code, and many of the ideas in the OCP \ndesign, have derived from the open -sourcing of aspects of \nthe proprietary Novamente Cognit ion Engine, which has \nbeen described extensively in previous publications.  \n The first key entity in the OpenCog software \narchitecture is the AtomTable, which is a repository for \nweighted, labeled hypergraph nodes and hyperedges.  In \nthe OpenCog implementat ion of ECANs, the nodes and \nlinks involved in the ECAN are stored here.  OpenCog also \ncontains an object called the CogServer, which wraps up an AtomTable as well as (among other objects) a Scheduler that schedules a set of MindAgent objects that each (whe n allocated processor time by the Scheduler) carry out cognitive operations involving the AtomTable.  The essence of the OCP design consists of a specific set of MindAgents designed to work together in a collaborative \nway in order to create a system that c arries out actions \noriented toward achieving goals (where goals are \nrepresented as specific nodes in the AtomTable, and actions are represented as Procedure objects indexed by Atoms in the AtomTable, and the utility of a procedure for achieving a goal is r epresented by a certain set of \nprobabilistic logical links in the AtomTable, etc.).", "mimetype": "text/plain", "start_char_idx": 6097, "end_char_idx": 8243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b712d43-6221-440e-a002-d03602b380b8": {"__data__": {"id_": "2b712d43-6221-440e-a002-d03602b380b8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "32e51a37-983c-4862-9592-fe05a87c79cc", "node_type": "1", "metadata": {}, "hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "4d98f34f-2f72-43fb-ae65-f40a531ef44c", "node_type": "1", "metadata": {}, "hash": "131a907ad55f98112743b4cd5ee47c9ed93e4a0d7593cfabb107fd41b21f8b51", "class_name": "RelatedNodeInfo"}, {"node_id": "36c5231e-2425-4727-a927-f70fce261c29", "node_type": "1", "metadata": {}, "hash": "c33bf96b37710e66cec204f5159f99945f1543679b9ff1176296ab479607f376", "class_name": "RelatedNodeInfo"}]}, "text": "OpenCog is still at an experimental stage but has been used \nfor such projects as statistical language analysis, \nprobabilistic inference, and the control of virtual agents  in \nonline virtual worlds (see opencog.org).  \n So, in an OpenCog context, ECAN consists of a set of \nAtom types, and then a set of MindAgents carrying out \nECAN operations such as HebbianLinkUpdating and \nImportanceUpdating.  OCP also requires many other MindA gents carrying out other cognitive processes such as \nprobabilistic logical inference according to the PLN system \n(Goertzel et al, 2008) and evolutionary procedure learning \naccording to the MOSES system (Looks, 2006).", "mimetype": "text/plain", "start_char_idx": 8247, "end_char_idx": 8902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eca65ecd-63cf-496d-b6b8-e9a6754a2517": {"__data__": {"id_": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "4b2b591d-6223-4813-a17a-e28c6d1b39f1", "node_type": "1", "metadata": {}, "hash": "4849d7693462646c0ad6ac290e3e0dbc3dd8e8ac98fafac6a6b41efed7f2fb37", "class_name": "RelatedNodeInfo"}, {"node_id": "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50", "node_type": "1", "metadata": {}, "hash": "56c74c5721e4efecdded478b75b299654596b55a01dc0e423a9c68f9b1ced111", "class_name": "RelatedNodeInfo"}, {"node_id": "126f4762-aabd-4b1c-bc70-fe0799b95fc5", "node_type": "1", "metadata": {}, "hash": "3b95220080b366a1ac84db1374b038c4e0af606d5f732638b2cbd359c7a82b76", "class_name": "RelatedNodeInfo"}, {"node_id": "11e27bec-2a02-4e08-a07f-548853a4ecbf", "node_type": "1", "metadata": {}, "hash": "004505880d8bf9906d42128950af3edf06075bb38a9b92ffb80e2766cbb1d7b9", "class_name": "RelatedNodeInfo"}, {"node_id": "395e24d6-de01-4143-be35-23074911de9b", "node_type": "1", "metadata": {}, "hash": "1e166f5ba6b88602ebf6aa11fcfc260f292bd1920ea4f33d59fffedbe89546cb", "class_name": "RelatedNodeInfo"}]}, "text": "The \ninteroperation of the ECAN MindAge nts with these other \nMindAgents is a subtle issue that will be briefly discussed \nin the final section of the paper, but the crux is simple to understand.  \n The CogServer is understood to maintain a kind of \ncentral bank of STI and LTI funds.  When a non -EAN \nMindAgent finds an Atom valuable, it sends that Atom a \ncertain amount of Stimulus, which results in that Atom\u2019s \nSTI and LTI values being increased (via equations to be presented below, that transfer STI and LTI funds from the CogServer to the Atoms in ques tion).  Then, the ECAN \nImportanceUpdating MindAgent carries out multiple \noperations, including some that transfer STI and LTI funds \nfrom s ome Atoms back to the CogServer.  \nDefinition and Analysis of Variant 1  \n We now define a specific set of equations in ac cordance \nwith the ECAN conceptual framework described above.  \nWe define   \n\u20ac HSTI=s1,\uf04c,sn [ ] to be the vector of STI \nvalues, and \n  \n\u20ac C=c11,\uf04c,c1n\n\uf04d\uf04f\uf04d\ncn1,\uf04c,cnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the connection matrix of \nHebbian probability values, where it is assumed that the \nexistence of a  HebbianLink or InverseHebbianLink \nbetween A and B are mutually exclusive possibilities. We \nalso define \n  \n\u20ac CLTI=g11,\uf04c,g1n\n\uf04d\uf04f\uf04d\ngn1,\uf04c,gnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the matrix of LTI \nvalues for each of the corresponding links.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ddb5c13-0698-4e9e-99f2-44a4ceeca699": {"__data__": {"id_": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "63d3cd33-19a1-4e9d-94dc-00e702a3b83d", "node_type": "1", "metadata": {}, "hash": "a28e37e11435db77159e128189c1fa77cfa880f2c2f678df4f8cd39768c2a3e4", "class_name": "RelatedNodeInfo"}, {"node_id": "704ce44f-9926-4c7d-bf09-208fd0b00092", "node_type": "1", "metadata": {}, "hash": "44b484857ecc9d963dd518f6941ce1afd5d1e9d66f874d84bbb78a8febb61c67", "class_name": "RelatedNodeInfo"}, {"node_id": "46e8eb53-3933-4357-85e3-b02d260613d4", "node_type": "1", "metadata": {}, "hash": "ef399150364f792b6bace4942e32cf90b753b03e70f613be9840f546e8ef75a1", "class_name": "RelatedNodeInfo"}, {"node_id": "d508dcf7-d57b-422a-b5dd-02abecb69bdd", "node_type": "1", "metadata": {}, "hash": "fb55e202db70aa5b96e5c7f32d6b79d7f71e859c1012f897b480259d89788839", "class_name": "RelatedNodeInfo"}, {"node_id": "fed9fdc3-2d5a-486b-b4a6-0b4ee68bd6ef", "node_type": "1", "metadata": {}, "hash": "9191352c550be9ab6198cba9aed5c7ddb04bb30336fdbf8d7f31ce703592a696", "class_name": "RelatedNodeInfo"}]}, "text": "We assume an updating scheme in which, periodically, a \nnumbe r of Atoms are allocated Stimulus amounts, which \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <2>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ncauses the corresponding STI values to change according \nto the equations  \n \n\u20ac \u2200i:si=si\u2212rent +wages , \n \nwhere rent and wages are given by  \n \n\u20ac rent=Rent \u22c5max 0,log20si\nrecentMaxSTI\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n2\uf8eb \n\uf8ed \uf8ec \n\uf8ec \n\uf8ec \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n\uf8f7 \n\uf8f7 \uf8f7 ,  if  si>0\n0,                                                          if  si\u22640\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \n \nand \n \n\u20ac wages =Wage Stimulus\npi\ni=1n\n\u2211,if  pi=1\nWage Stimulus\nn\u2212 pi\ni=1n\n\u2211,if  pi=0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4 \n\uf8f4 , \n \nwhere   \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{} is the cue \npattern for the pattern that is to be retieved.  \nAll quantities enclosed in angled brackets are system \nparameters, and LTI updating is accomplished using a completely analogous set of equations.  \n The chang ing STI values then cause updating of the \nconnection matrix, according to the \u201cconjunction\u201d equations. First define  \n \n\u20ac normi=si\nrecentMaxSTI,if si\u22650\nsi\nrecentMinSTI,if si<0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f3 \uf8f4 . \n \nNext define  \n \n\u20ac conj =Conjunction si,sj()=normi\u00d7normj   \n \nand  \n \n\u20ac \u2032 c ij=ConjDecay conj+1\u2212conj( )cij.", "mimetype": "text/plain", "start_char_idx": 1362, "end_char_idx": 2610, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f70233f1-b278-4421-a43e-84cfb9ee4bb5": {"__data__": {"id_": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "4ca44850-60f8-4c2d-b9b0-57f2e3863e90", "node_type": "1", "metadata": {}, "hash": "30adba1802bb1989a3258a95bf5be02d2cb90ca02f8f4e0ceb8f73ad9a163577", "class_name": "RelatedNodeInfo"}, {"node_id": "bb1ff6b9-48ce-4c21-87bc-666983d445c7", "node_type": "1", "metadata": {}, "hash": "2f7517ccb30a96e68151d5f0a1ee4fa808553f20c17aed39663bf64c6ff18a5a", "class_name": "RelatedNodeInfo"}, {"node_id": "4c31bf44-ce91-46aa-a31f-e768460944f1", "node_type": "1", "metadata": {}, "hash": "e09d87ef39020cd7b1572a42f6525177ab0b9b6c0f77fc35675eb89742075df4", "class_name": "RelatedNodeInfo"}, {"node_id": "ec2dbf9e-9371-4712-91ae-2c496f713cd1", "node_type": "1", "metadata": {}, "hash": "99df25af729a5c056c4fb0719b745bb8842084e90443e5c1a9552eebb698a9ef", "class_name": "RelatedNodeInfo"}]}, "text": "Finally update the matrix elements by settin g \n \n\u20ac cij=cji=\u2032 c ij,if  \u2032 c ij\u22650\n\u2032 c ij,        if  \u2032 c ij<0\uf8f1 \n\uf8f2 \n\uf8f3 . \n \nWe are currently also experimenting with updating the \nconnection matrix in accordance with the equations suggested by Storkey (1997, 1998, 1999.)  \n  A key property of these equations is that both wages \npaid to, and rent paid by, each node are positively \ncorrelated to their STI values. That is, the more important \nnodes are paid more for their services, but they also pay \nmore in rent.  \n A fixed percentage of the links with the lowest LTI \nvalues is then forgotten (which corresponds e quationally to \nsetting the LTI to 0).  \n Separately from the above, the process of Hebbian \nprobability updating is carried out via a diffusion process in which some nodes \u201ctrade\u201d STI utilizing a diffusion \nmatrix D, a version of the connection matrix C norma lized \nso that D is a left stochastic matrix. D acts on a similarly \nscaled vector v, normalized so that v is equivalent to a \nprobability vector of STI values.   \n The decision about which nodes diffuse in each \ndiffusion cycle is carried out via a decision fu nction. We \ncurrently are working with two types of decision functions: \na standard threshold function, by which nodes diffuse if \nand only if the nodes are in the AF; and a stochastic decision function in which nodes diffuse with probability \n\u20ac tanh shape si\u2212FocusBoundary( ) ( )+1\n2, where shape and \nFocusBoundary are parameters.  \n The details of the diffusion process are as follows. First, \nconstruct the diffusion matrix from the entries in the \nconnection matrix as follows:  \n \n\u20ac If cij\u22650, then dij=cij,\nelse, set dji=\u2212cij. \n \nNext, we normalize the column s of D to make D a left \nstochastic matrix.", "mimetype": "text/plain", "start_char_idx": 2614, "end_char_idx": 4360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa57e059-57a6-4dbc-82d2-770ab207e208": {"__data__": {"id_": "aa57e059-57a6-4dbc-82d2-770ab207e208", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5", "node_type": "1", "metadata": {}, "hash": "3f12378c123c87499debde5c7a1febff0329917168e96513fadd865632c2cff3", "class_name": "RelatedNodeInfo"}, {"node_id": "bdb63763-b762-400b-b87f-ae36cfb35f15", "node_type": "1", "metadata": {}, "hash": "a669599fa7ef2f0758dcff238ca2af67866ae48de90e036b666403e267ce62f9", "class_name": "RelatedNodeInfo"}, {"node_id": "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0", "node_type": "1", "metadata": {}, "hash": "35eb6caf21020bdeb4d01ca3e5af8992b2a8cdeed674a7a6ae3ae73a81f8cd81", "class_name": "RelatedNodeInfo"}, {"node_id": "1c888b2e-7dfe-40a3-aeb9-bf8c56f72c6a", "node_type": "1", "metadata": {}, "hash": "78c5f2f4d1e996298137042c2f065f06766bbdc45d7b926e37b28103622f477f", "class_name": "RelatedNodeInfo"}]}, "text": "Next, we normalize the column s of D to make D a left \nstochastic matrix. In so doing, we ensure that each node \nspreads no more that a \n\u20ac MaxSpread  proportion of its STI, \nby setting  \n \n\u20ac if dij\ni=1n\n\u2211 >MaxSpread : \n\u20ac dij=dij\u00d7MaxSpread\ndij\ni=1n\n\u2211,  for i\u2260j\ndjj=1\u2212MaxSpread\uf8f1 \n\uf8f2 \uf8f4 \uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \nelse: \n\u20ac djj=1\u2212 dij\ni=1\ni\u2260jn\n\u2211 \n \nNow we obtain a scaled STI vector v by setting  \n \n  \n\u20ac minSTI =\ni\u22081,2,\uf04c,n { }minsi  and maxSTI =\ni\u22081,2,\uf04c,n { }maxsi \n \n\u20ac vi=si\u2212minSTI\nmaxSTI\u2212minSTI \n \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <3>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nThe diffusion matrix is then used to update the node STIs  \n \n\u20ac \u2032 v =Dv \n \nand the STI values are rescaled to the interval \n\u20ac minSTI, maxSTI [ ].  \n In both the re nt and wage stage and in the diffusion \nstage, the total STI and LTI funds of the system each \nseparately form a conserved quantity: in the case of diffusion, the vector v is simply the total STI times a \nprobability vector.", "mimetype": "text/plain", "start_char_idx": 4287, "end_char_idx": 5283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7aac72e1-b0f2-498a-a05e-71766094c87d": {"__data__": {"id_": "7aac72e1-b0f2-498a-a05e-71766094c87d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d9429d5c-b72c-4435-b4f4-10daf332d067", "node_type": "1", "metadata": {}, "hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "89e65ffb-d683-4684-ac42-b6024f306cbe", "node_type": "1", "metadata": {}, "hash": "4552449f4a6550db6857e1032b7bec78539abaa2984238feb6a2a080bade7aa6", "class_name": "RelatedNodeInfo"}, {"node_id": "2cd1764b-da9e-4729-bf31-92b63b9c9e25", "node_type": "1", "metadata": {}, "hash": "46546bb16f073eaf202d5420c25efd09107813308f5cf98525905d402b5af7b6", "class_name": "RelatedNodeInfo"}, {"node_id": "d0ff4020-d983-45a3-85b0-d7271108e0b4", "node_type": "1", "metadata": {}, "hash": "577780b1badceab74f7672fdac044d526efefb7268e20c63ca05b2290a01ada0", "class_name": "RelatedNodeInfo"}]}, "text": "To maintain overall system funds w ithin \nhomeostatic bounds, a mid -cycle tax and rent -adjustment \ncan be triggered if necessary; the equations currently used \nfor this are  \n \n\u2022 \n\u20ac Rent =recent stimulus awarded before update \u00d7Wage\nrecent size of AF; \n\u2022 \n\u20ac tax=x\nn, where x is the distance from the current \nAtomSpace bounds to the center  of the \nhomeostatic range for AtomSpace funds;  \n\u2022 \n\u20ac \u2200i:si=si\u2212tax \nInvestigation of Convergence Properties  \nNow we investigate some of the properties that the above \nECAN equations display when we use an ECAN defined by them as an associative memory netwo rk in the manner \nof a Hopfield network.  \n We consider a situation where the ECAN is supplied \nwith memories via a \u201ctraining\u201d phase in which one \nimprints it with a series of binary patterns of the form \n  \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{}. Nois y versions of \nthese patterns are then used as cue patterns during the \nretrieval process.  \n We obviously desire that the ECAN retrieve the stored \npattern corresponding to a given cue pattern. In order to \nachieve this goal, the ECAN must converge to the corr ect \nfixed point.", "mimetype": "text/plain", "start_char_idx": 5284, "end_char_idx": 6411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2f97ad6-ba74-4652-8457-a3c8d1339f85": {"__data__": {"id_": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "6aa9061a-fd26-4762-8f7f-6bce5dd13371", "node_type": "1", "metadata": {}, "hash": "3ce8c2072fa4396df225250d4d31aeeeace2146d1246d1c23d53a3b4e339b4c5", "class_name": "RelatedNodeInfo"}, {"node_id": "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9", "node_type": "1", "metadata": {}, "hash": "e64adfb5ce58b17ed7611f63f13477521082bdc38e772f1426d44029767b5287", "class_name": "RelatedNodeInfo"}, {"node_id": "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc", "node_type": "1", "metadata": {}, "hash": "8e68382afbf5fac19eac7356b494612573b9b13fd6283ff0e3f081bffa3c121e", "class_name": "RelatedNodeInfo"}, {"node_id": "3637f9ee-d5cc-48f5-9d4e-18428e594cbc", "node_type": "1", "metadata": {}, "hash": "eb407612f7b02439e1f9af192bfdad21880f8c8999a3e03a81dbd19dbb105826", "class_name": "RelatedNodeInfo"}, {"node_id": "9545c519-89ef-41ff-94e5-5089066dd525", "node_type": "1", "metadata": {}, "hash": "071babd3ec3764bf2c24b45de337a13dfcaaaf316e054d3bf8c6080e35cd1722", "class_name": "RelatedNodeInfo"}]}, "text": "Theorem:  For a given value of e in the STI rent \ncalculation, there is a subset of hyperbolic decision functions for which the ECAN dynamics converge to an attracting fixed point.  \n Proof:  Rent is  zero whenever \n\u20ac si\u2264recentMaxSTI\n20,  so we \nconsider this case first.  The updating process for the rent \nand wage stage can then be written as\n\u20ac fs()=s+constant . The \nnext stage is governed by the hyperbolic decision function  \n \n\u20ac gs()=tanh shape s-FocusBoundary( ) ( )+1\n2. \n \nThe entire updating sequence is obtained  by the \ncomposition   \n\u20ac g\uf06ff( )s(), whose derivative is then  \n   \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51(), \n \nwhich has magnitude less than 1 whenever -2 < shape < 2. \nWe next consider the case \n\u20ac si>recentMaxSTI\n20. The function f  \nnow takes the form  \n \n\u20ac fs()=s\u2212log20s/recentMaxSTI ( )\n2+constant,  \n \nand we have  \n \n  \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51\u22121\ns\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 . \n \nwhich has magnitude less than 1 whenever \n\u20ac shape <2\u22c5recentMaxSTI\nrecentMaxSTI -20. Choosing the shape parameter to \nsatisfy \n\u20ac 0<shape <min 2, 2\u22c5recentMaxSTI\nrecentMaxSTI -20\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7  then \nguarantees that \n  \n\u20ac g\uf06ff( )\u2032<1. Finally,   \n\u20ac g\uf06ff maps the closed \ninterval [recentMinSti, recentMaxSTI] into itself, so \napplying the Contraction Mapping Theorem completes the proof.  \nDefinition and Analysis of Variant 2  \nThe ECAN variant described above has performed \ncompletely acceptably in our experimen ts so far; however \nwe have also experimented with an alternate variant, with different convergence properties.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6e98ea0-635b-4fe4-9424-b47a84863043": {"__data__": {"id_": "e6e98ea0-635b-4fe4-9424-b47a84863043", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "1c923514-3e96-4737-a3c7-7ab1d1531db7", "node_type": "1", "metadata": {}, "hash": "b2385013bbb7485288c6aa929491da0a5ecd5f4bd5ca4f005649ad70d11082f9", "class_name": "RelatedNodeInfo"}, {"node_id": "7222d101-a3a5-4374-bd55-ee6a2680cd15", "node_type": "1", "metadata": {}, "hash": "e044e24f9a2feaca0f09078c6ca48c9c9a24b64ee0ac4ba894d757f58e5bb0e0", "class_name": "RelatedNodeInfo"}, {"node_id": "84e7d415-f40b-4b30-8b79-a701d2fc6c2e", "node_type": "1", "metadata": {}, "hash": "240b3733c271a2b50c6c48fc1ad4ba559065ca103587c934ffe9c6eb40658667", "class_name": "RelatedNodeInfo"}, {"node_id": "210287bb-99d5-402d-b624-3a632204d66a", "node_type": "1", "metadata": {}, "hash": "3a89ef509e659dc770e49ed5510becd1986e8b6d07233cb1c58ced27f2a4587f", "class_name": "RelatedNodeInfo"}, {"node_id": "6ebc1059-4fa0-488b-8d83-2b6bd9222ff8", "node_type": "1", "metadata": {}, "hash": "a1c77ba0afa580702a0e15fd744a49a794896200bb98397dc7f731695c0e2ac8", "class_name": "RelatedNodeInfo"}]}, "text": "In Variant 2, the dynamics of the ECAN are specifically designed so that a \ncertain conceptually intuitive function serves as a \nLiapunov function  of the dynamics.   \n At a given time t, for a given Atom indexed i, we define \ntwo quantities: OUT\ni(t) = the total amount that Atom i pays \nin rent and tax and diffusion during the time -t iteration of \nECAN ;  INi(t) = the total amount that Atom i receives in \ndiffusion, stimulus and welfare during the time -t iteration \nof ECAN .  Note that welfare is a new concept to  be \nintroduced below.  We then define DIFF i(t)  = |IN i(t)  - \nOUT i(t)| ; and define AVDIFF(t) as the average of DIFF i(t)  \nover all i in the ECAN.   \n The design goal of Variant 2 of the ECAN equations is \nto ensure that, if the parameters are tweaked appropriately, AVDIFF can serve as a (deterministic or stochastic, \ndepending on the details) Liapunov function for ECAN \ndynamics.  This implies that with ap propriate parameters \nthe ECAN dynamics will converge toward a state where AVDIFF=0, meaning that no Atom is making any profit or \nincurring any loss.  It must be noted that this kind of \nconvergence is not always desirable, and sometimes one might want the p arameters set otherwise.  But if one wants \nthe STI components of an ECAN to converge to some \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <4>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nspecific values, as for instance in a classic associative \nmemory application, Variant 2 can guarantee this easily.  \n In Variant 2, each ECAN cycle begins with rent \ncollection and welfare distribution, which occurs via \ncollecting rent via the Variant 1 equation, and then \nperforming the following two steps.  Step A: calculate X, \ndefined as the positive part of the total amount by which AVDIFF has been increased via the  overall rent collection \nprocess.  Step B: redistribute X to needy Atoms as follows: For each Atom z, calculate the positive part of (OUT - IN), \ndefined as deficit(z).", "mimetype": "text/plain", "start_char_idx": 1521, "end_char_idx": 3538, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "757ac2bf-2531-4356-a7f9-afedf4c00900": {"__data__": {"id_": "757ac2bf-2531-4356-a7f9-afedf4c00900", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "39be06f3-9820-42d9-98d4-7d8bf4a9f226", "node_type": "1", "metadata": {}, "hash": "d1b3ffbf2e08bccabf56a2a260ea8afc7cbcdc47e8d42af0225eed499f523e04", "class_name": "RelatedNodeInfo"}, {"node_id": "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9", "node_type": "1", "metadata": {}, "hash": "26b3387d028668b052767a32e3fe446f0c4ae4d7e5c388c68e227b57d7435fa5", "class_name": "RelatedNodeInfo"}, {"node_id": "334731eb-0664-4639-812a-e9cfb52e78b3", "node_type": "1", "metadata": {}, "hash": "b96011613be7797c130f5f1e094e4f9eccd5373c373942e7cf43fd849da87388", "class_name": "RelatedNodeInfo"}, {"node_id": "5fd38d23-2ad0-4d41-a8c2-56f0517ca0ec", "node_type": "1", "metadata": {}, "hash": "0f6269ea80fda30b1b4b98fd9c0ef4769184d084e563949cd54680499b831fce", "class_name": "RelatedNodeInfo"}]}, "text": "Distribute (X + e) wealth among all Atoms z, giving each Atom a percentage of X that is \nproportional to deficit(z), but never so much as to cause \nOUT < IN for any Atom (the welfare being given counts \ntoward IN).   Here e>0 ensures AVDIFF decrease; e=0 may \nbe appropriate if convergence is not required in a certain \nsituation.  \n Step B is the w elfare step, which guarantees that rent \ncollection will decrease AVDIFF.  Step A calculates the \namount by which the rich have been made poorer, and uses this to make the poor richer.  In the case that the sum of deficit(z) over all nodes z is less than X, a mid -cycle rent \nadjustment may be triggered, calculated so that step B will decrease AVDIFF.   (I.e. we cut rent on the rich, if the poor don't need their money to stay out of deficit.)  \n Similarly, in each Variant 2 ECAN cycle, there is a \nwage -paying proc ess, which involves the wage -paying \nequation from Variant 1 followed by two steps.  Step A: \ncalculate Y, defined as the positive part of the total amount \nby which AVDIFF has been increased via the overall wage \npayment process.  Step B: exert taxation based  on the \nsurplus Y as follows:  For each Atom z, calculate the \npositive part of (IN - OUT), defined as surplus(z).    Collect \n(Y + e1) wealth from all Atom z, collecting from each node \na percentage of Y that is proportional to surplus(z), but \nnever so much as to cause IN < OUT for any node (the \nnew STI being collected counts toward OUT).   \n In case the total of surplus(z) over all nodes z is less than \nY, one may trigger a mid -cycle wage adjustment, \ncalculated so that step B will decrease AVDIFF.   I.e. we \ncut wages since there is not enough surplus to support it.", "mimetype": "text/plain", "start_char_idx": 3542, "end_char_idx": 5254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d39bf1a-4fbe-4836-9d73-7e660465d8e0": {"__data__": {"id_": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69", "node_type": "1", "metadata": {}, "hash": "950cac1690d2b3e07c0ff258d44ebef40a0a4fc249a53ca6b184a00538df81c1", "class_name": "RelatedNodeInfo"}, {"node_id": "7353fbe9-e724-4ada-849d-6394f166642f", "node_type": "1", "metadata": {}, "hash": "d09e6dc0fb692df6c3646632aaf5277cda8376b916e67aea952ca4dacf962dbe", "class_name": "RelatedNodeInfo"}, {"node_id": "bfcb3baa-25cf-47ec-897d-4bcaf0842a70", "node_type": "1", "metadata": {}, "hash": "f32bb92858bb0294d94e223323bb7de5113f0df3d952b648401f07d9fedc803e", "class_name": "RelatedNodeInfo"}, {"node_id": "58d204f0-3277-4072-b963-2877104fed8b", "node_type": "1", "metadata": {}, "hash": "cd90eb335356c8f97d6b5f02e2b2ab29193af6dcf3d2fe6ae9fead5ba141e260", "class_name": "RelatedNodeInfo"}]}, "text": "I.e. we \ncut wages since there is not enough surplus to support it.  \n Finally, in the Variant 2 ECAN cycle, diffusion is done a \nlittle differently, via iterating the following process: If \nAVDIFF has increased during the diffusion round so far, then choose a random node  whose diffusion would \ndecrease AVDIFF, and let it diffuse; if AVDIFF has \ndecreased during the diffusion round so far, then choose a \nrandom node whose diffusion would increase AVDIFF, \nand let it diffuse.  In carrying out these steps, we avoid letting the s ame node diffuse twice in the same round.  \nThis algorithm does not let all Atoms diffuse in each cycle, but it stochastically lets a lot of diffusion happen in a way \nthat maintains  AVDIFF constant.  The iteration may be \nmodified to bias toward an average decrease in AVDIFF.  \n The random element in the diffusion step, together with \nthe logic of the rent/welfare and wage/tax steps, combines \nto yield the result that for Variant 2 of ECAN dynamics, \nAVDIFF is a stochastic Lyaponov function.  The details of the p roof of this will be given elsewhere due to space \nconsiderations but the outline of the argument should be  \nclear from the construction of Variant 2.  And note that by setting the e and e1 parameter to 0, the convergence \nrequirement can be eliminated, allow ing the network to \nevolve more spontaneously as may be appropriate in some \ncontexts; these parameters allow one to explicitly adjust the convergence rate.   \n One may also derive results pertaining to the \nmeaningfulness of the attractors, in various special  cases.  \nFor instance, if we have a memory consisting of a set M of m nodes, and we imprint the memory on the ECAN by stimulating m nodes during an interval of time, then we \nwant to be able to show that the condition where precisely \nthose m nodes are in th e AF is a fixed -point attractor.  \nHowever, this is not difficult, because one must only show \nthat if these m nodes and none others are in the AF, this \ncondition will persist.  Rigorous proof of this and related theorems will appear in a follow -up paper.", "mimetype": "text/plain", "start_char_idx": 5187, "end_char_idx": 7282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b958e4f5-8eca-48b9-8adc-be9ea9040702": {"__data__": {"id_": "b958e4f5-8eca-48b9-8adc-be9ea9040702", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "15324782-858d-4e53-acd1-a854bec067da", "node_type": "1", "metadata": {}, "hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "2d53beac-47e5-47ae-a228-28e2af2f4ab4", "node_type": "1", "metadata": {}, "hash": "0a760f0f9031d6d87143ed9c04eadf1fa8a4f96cc0c99dc6be9726338331378a", "class_name": "RelatedNodeInfo"}, {"node_id": "d7473e1c-5880-4768-bda8-b805e3227cf4", "node_type": "1", "metadata": {}, "hash": "253e3d1e84de800b0577ba8b1ad27aaa3422f9ea0f84c4f77fffc981c1b2df05", "class_name": "RelatedNodeInfo"}]}, "text": "Associative  Memory  \nWe have carried out experiments gauging the performance of Variant 1 of ECAN as an associative memory, using the implementation of ECAN within OpenCog, and using both the conventional and Storkey Hebbian updating formulas.  Extensive disc ussion of these results (along with Variation \n2 results) will be deferred to a later publication due to \nspace limitations, but we will make a few relevant \ncomments here.  \n    As with a Hopfield net memory, the memory capacity (defined as the number of memor ies that can be retrieved \nfrom the network with high accuracy) depends on the sparsity of the network, with denser networks leading to \ngreater capacity.", "mimetype": "text/plain", "start_char_idx": 7285, "end_char_idx": 7962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2244cae-1cab-458e-92d8-476fdc951855": {"__data__": {"id_": "c2244cae-1cab-458e-92d8-476fdc951855", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d", "node_type": "1", "metadata": {}, "hash": "9d862303cf44c83a07d8cabb83d6e32f43a5e73369f980b3427a8cdb1e48d706", "class_name": "RelatedNodeInfo"}, {"node_id": "f046b2e0-29ef-4aca-8462-4e3bcf57410f", "node_type": "1", "metadata": {}, "hash": "390683f7ed9a9025cb86078c1f62158f13a085b4ba3fb64eb79bcdf59967d08b", "class_name": "RelatedNodeInfo"}, {"node_id": "61e37d99-77c4-470d-8a56-c7c1fbd89819", "node_type": "1", "metadata": {}, "hash": "4959ff2bd3ca6f33dad47aff435d1529b5c635caaae9ca75d8cb52115196f52f", "class_name": "RelatedNodeInfo"}, {"node_id": "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb", "node_type": "1", "metadata": {}, "hash": "aa75a6a98e2122e6d03629c1253de10cc21701ee640c3a727bd76251fc97aa24", "class_name": "RelatedNodeInfo"}, {"node_id": "06589a63-7cf8-4ce0-bb77-23b7519d53bc", "node_type": "1", "metadata": {}, "hash": "78bd0ea6792a6e6f03a7dc234584f367c70f06d688bd741fea65db899b9bb95d", "class_name": "RelatedNodeInfo"}]}, "text": "In the ECAN case the capacity also \ndepends on a variety of parameters of the ECAN equations, \nand the p recise unraveling of these dependencies is a \nsubject of current research.  However, one interesting dependency has already been uncovered in our preliminary experimentation, which has to do with the size of the AF \nversus the size of the memories being stor ed. \n    Define the size of a memory (a pattern being imprinted) \nas the number of nodes that are stimulated during imprinting of that memory.  In a classical Hopfield net \nexperiment, the mean size of a memory is usually around, \nsay, .2 -.5 of the number of n eurons.  In typical OpenCog \nassociative memory situations, we believe the mean size of a memory will be one or two orders of magnitude smaller than that, so that each memory occupies only a relatively small portion of the overall network.  \n    What we have found is that the memory capacity of an \nECAN is generally comparable to that of a Hopfield net \nwith the same number of nodes and links, if and only if the \nECAN parameters are tuned so that the memories being imprinted can fit into the AF.  That is, the AF threshold or \n(in the hyperbolic case) shape parameter must be tuned so that the size of the memories is not so large that the active nodes in a memory cannot stably fit into the AF.  This \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <5>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ntuning may be done adaptively by testing the impact of \ndifferent thr eshold/shape values on various memories of  \nthe appropriate size; or potentially a theoretical relationship between these quantities could be derived, but \nthis has not been done yet.  This is a reasonably satisfying \nresult given the cognitive foundation of ECAN: in loose \nterms what it means is that ECAN works best for \nremembering things that fit into its focus of attention during the imprinting process.  \n \nInteraction between ECANs and other  \nOpenCog Components  \nOur analysis above has focused on the associativ e-memory \nproperties of the networks, however, from the perspective of their utility within OpenCog or other integrative AI systems, this is just one among many critical aspects of ECANs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "034f3096-dcf3-492e-b658-e398170d2f34": {"__data__": {"id_": "034f3096-dcf3-492e-b658-e398170d2f34", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "a07b7a52-511f-4a98-a681-3e77fa08fe61", "node_type": "1", "metadata": {}, "hash": "d8b38556e1ac8edee842b7280bf4a442e030520f5c484e916c9e48ca670c4c53", "class_name": "RelatedNodeInfo"}, {"node_id": "1bef524b-9188-491d-b2f0-ba8a26e84747", "node_type": "1", "metadata": {}, "hash": "0afb62cea597b464652e4da16b0e79cea3fe5048419381e829160ef4a9bf29d1", "class_name": "RelatedNodeInfo"}, {"node_id": "24814402-beb4-46ad-a988-6e8b52fabbee", "node_type": "1", "metadata": {}, "hash": "c89a18c8119f8a49f25fb22d13ba1e2234f84ba1867a5506dc3619a1cea21b34", "class_name": "RelatedNodeInfo"}, {"node_id": "66441850-c26f-4920-b4bb-31dd09585bbb", "node_type": "1", "metadata": {}, "hash": "f22ef8206b97e5caa91b26b986f2d98c0da3bd2e0c05c7638e7c41a7a692257f", "class_name": "RelatedNodeInfo"}, {"node_id": "a61dc099-0969-4535-9f2b-c99cf3162517", "node_type": "1", "metadata": {}, "hash": "12ba3272841b4478a8c2385dbf44763ed3743856c1df171a72ff219c61823e13", "class_name": "RelatedNodeInfo"}, {"node_id": "acb3faa5-db68-4d9c-a7cd-af0743e37625", "node_type": "1", "metadata": {}, "hash": "d0e184ba50c682d193f35334944b4c37281bd8876e87c54094133758fc4f5906", "class_name": "RelatedNodeInfo"}]}, "text": "In this final section we will discuss the broader \nintended utilizat ion of ECANs in OpenCog in more depth.  \n First of all, associative -memory functionality is directly \nimportant in OpenCogPrime because it is used to drive \nconcept creation.  The OCP heuristic called \u201cmap formation\u201d creates new Nodes corresponding to prominen t \nattractors in the ECAN, a step that (according to our preliminary results) not only increases the  memory \ncapacity of the network beyond what can be achieved with \na pure ECAN but also enables attractors to be explicitly  \nmanipulated by PLN inference.  \n Equally important to associative memory is the \ncapability of ECANs to facilitate effective allocation of the attention of other cognitive processes to appropriate \nknowledge items (Atoms). For example, one key role of \nECANs in OCP is to guide the forward and backward \nchaining processes of PLN (Probabilistic Logic Network) inference.  At each step, the PLN inference chainer is faced \nwith a great number of inference steps from which to \nchoose; and a choice is made using a statistical \u201cbandit \nproblem\u201d mechanism t hat selects each possible inference \nstep with a probability proportional to its expected \n\u201cdesirability.\u201d  In this context, there is considerable appeal in the heuristic of weighting inference steps using probabilities proportional to the STI values of the Atoms \nthey contain.  One thus arrives at a combined PLN/EAN \ndynamic as follows:  \n \n1. An inference step is carried out, involving a \nchoice among multiple possible inference steps, which is made using STI -based weightings (and \nmade among Atoms that LTI weighting s have \ndeemed valuable enough to remain in RAM)  \n2. The Atoms involved in the inference step are rewarded with STI and LTI proportionally to the \nutility of the inference step (how much it \nincreases the confidence of Atoms in the system\u2019s memory)  \n3. The ECAN opera tes, and multiple Atom\u2019s \nimportance values are updated  \n4. Return to Step 1 if the inference isn\u2019t finished   An analogous interplay may occur between ECANs and the MOSES procedure learning algorithm that also plays a key role in OCP.", "mimetype": "text/plain", "start_char_idx": 2246, "end_char_idx": 4391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a": {"__data__": {"id_": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "75b1eee5-4e21-4b9c-afe4-513ebd477f6a", "node_type": "1", "metadata": {}, "hash": "b442e676186e1d4137f0e3af09f96f6233611a3d7479ac30603d223fc7a8229d", "class_name": "RelatedNodeInfo"}, {"node_id": "43a68db3-de7b-46e1-a9ca-00cfc4346362", "node_type": "1", "metadata": {}, "hash": "a4062b56edf7af110c3c7977e3cd756c7076c485b2fab33c98faf30d30d6eecc", "class_name": "RelatedNodeInfo"}, {"node_id": "28f9323d-fa92-4fbb-bc85-f782dcfe061f", "node_type": "1", "metadata": {}, "hash": "83010b91c3fc15076e22689586a242faab281ea5e6cf3d5097ae58d96bb8caa5", "class_name": "RelatedNodeInfo"}, {"node_id": "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4", "node_type": "1", "metadata": {}, "hash": "7d24a65834e8709fbdfb6e74d5db5cb7f9054cf1b3f3dcd946ccca3bbf85ec3f", "class_name": "RelatedNodeInfo"}, {"node_id": "3971a7e7-6b2c-4542-840a-e12beae42c35", "node_type": "1", "metadata": {}, "hash": "b6cac1eb4b7ea6fbb6f324977f0420901a5f572d187415c60641e65f8b782912", "class_name": "RelatedNodeInfo"}, {"node_id": "e722ffae-4b80-40cd-b448-ed89f8baa3a6", "node_type": "1", "metadata": {}, "hash": "f1c2696682894137d04219b01d7eec017d59a4a82731206d7c8a27c14b957a96", "class_name": "RelatedNodeInfo"}]}, "text": "It seems intuitively cle ar that the same attractor -\nconvergence properties highlighted in the present analysis of associative -memory behavior, will also be highly \nvaluable for the application of ECANs to attention \nallocation.  If a collection of Atoms is often collectively \nuseful for some cognitive process (such as PLN), then the \nassociative -memory -type behavior of ECANs means that \nonce a handful of the Atoms in the collection are found useful in a certain inference process, the other Atoms in the collection will get their STI sign ificantly boosted, and will \nbe likely to get chosen in subsequent portions of that same inference process.  This is exactly the sort of dynamics one \nwould like to see occur.  Systematic experimentation with \nthese interactions between ECAN and other OpenCog  \nprocesses is one of our research priorities going forwards.  \nReferences \nAmit, Daniel (1992).  Modeling Brain Function .  Cambridge University Press.  \nGoertzel, Ben (2006).  The Hidden Pattern .  Brown Walker.  \nGoertzel, Ben (2007). Virtual Easter Egg Hunting .  In Advances in Artificial \nGeneral Intelligence , IOS Press.  \nGoertzel, Ben (2008).  OpenCogPrime: Design for a Thinking Machine , online at \nhttp://www.opencog.org/wiki/OpenCogPrime:WikiBook  \nGoertzel, Ben, Matthew Ikle\u2019, Izabela Goertzel and Ari Heljakka.  Probabilistic \nLogic Networks.   Springer.  \nHutter, Marcus (2004).   Universal AI .  Springer.  \nLooks, Moshe (2006).  Competent Program Evolution .  PhD thesis in CS \ndepartment, Washington Universi ty at St. Louis. \nStorkey A.J. (1997) Increasing the capacity of the Hopfield network without \nsacrificing functionality , ICANN97 p451 -456. \nStorkey, Amos (1998). Palimpsest Memories:\udbff\udc14 A New High\udbff\udc08Capacity Forgetful \nLearning Rule for Hopfield Networks .  \nStorkey A.J. and R. Valabregue (1999) The basins of attraction of a new Hopfield \nlearning rule , Neural Networks 12 869 -876.", "mimetype": "text/plain", "start_char_idx": 4395, "end_char_idx": 6317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d391100b-91b0-4c50-b915-ab8622a68516": {"__data__": {"id_": "d391100b-91b0-4c50-b915-ab8622a68516", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "0f0f307d-0247-4c93-a962-941215b424e0", "node_type": "1", "metadata": {}, "hash": "04a29bf765d44cc80f57de5cb04dddbd5e58c40c409ee5aa365c16d4805d15b2", "class_name": "RelatedNodeInfo"}, {"node_id": "3426f4a0-4591-43eb-b84d-ac97c8e5e374", "node_type": "1", "metadata": {}, "hash": "e33a863455ca387b876a2099fbe992eb265c4cd3e192fe1799af81811619ee5d", "class_name": "RelatedNodeInfo"}, {"node_id": "681298e8-023c-445c-b8ca-5d73e64a7bda", "node_type": "1", "metadata": {}, "hash": "a35891e410035900b44fea618e9926ae27288b836dbb12f17e91acec57a812c0", "class_name": "RelatedNodeInfo"}, {"node_id": "15f7a5f9-cc57-435b-a399-444957d02a1b", "node_type": "1", "metadata": {}, "hash": "eceb4854cd88e9c20ca45b4e30c6a349be0a5de66e451c0cc41922542aaa9422", "class_name": "RelatedNodeInfo"}, {"node_id": "fa4601c0-6b54-4a5e-954e-8fe0d97ad64e", "node_type": "1", "metadata": {}, "hash": "10c578ae182abffe8b306878e888885f3bf0c3a02dbf462e85b7ef509a565768", "class_name": "RelatedNodeInfo"}]}, "text": "AGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <6>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nSee discussions, st ats, and author pr ofiles f or this public ation at : https://www .researchgate.ne t/public ation/334769428\nAn Inferential Approach to Mining Su rprising Patterns in Hypergraphs\nChapt er \u00b7 July 2019\nDOI: 10.1007/978-3-030-27005-6_6\nCITATIONS\n2READS\n224\n2 author s, including:\nNil Geisw eiller\n92 PUBLICA TIONS \u00a0\u00a0\u00a0251 CITATIONS \u00a0\u00a0\u00a0\nSEE PROFILE\nAll c ontent f ollo wing this p age was uplo aded b y Nil Geisw eiller  on 30 No vember 2022.\nThe user has r equest ed enhanc ement of the do wnlo aded file.\n\nAn Inferential Approach to Mining Surprising\nPatterns in Hypergraphs\nNil Geisweiller and Ben Goertzel\nSingularityNET Foundation, The Netherlands\n{nil,ben}@singularitynet.io\nAbstract. A novel pattern mining algorithm and a novel formal def-\ninition of surprisingness are introduced, both framed in the context of\nformal reasoning. Hypergraphs are used to represent the data in which\npatterns are mined, the patterns themselves, and the control rules for\nthe pattern miner. The implementation of these tools in the OpenCog\nframework, as part of a broader multi-algorithm approach to AGI, is\ndescribed.\nKeywords: Pattern Miner\u00b7Surprisingness\u00b7Reasoning\u00b7Hypergraphs.\n1 Introduction\nPattern recognition is broadly recognized as a key aspect of general intelligence,\nas well as of many varieties of specialized intelligence. General intelligence can\nbe envisioned, among other ways, as the process of an agent recognizing patterns\nin itself and its environment, including patterns regarding which of its actions\ntend to achieve which goals in which contexts [5].\nThe scope of pattern recognition algorithms in AI and allied disciplines is\nvery broad, including many specialized algorithms aimed at recognizing pat-\nterns in particular sorts of data such as visual data, auditory data or genomic\ndata. Among more general-purpose approaches to pattern recognition, so-called\n\u201dpattern mining\u201d plays a prominent role.", "mimetype": "text/plain", "start_char_idx": 6321, "end_char_idx": 8377, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82801c68-7461-45d0-8db4-eb16255cca29": {"__data__": {"id_": "82801c68-7461-45d0-8db4-eb16255cca29", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "node_type": "1", "metadata": {}, "hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "885da95a-b5a6-4466-8755-7aba3c2cbb4b", "node_type": "1", "metadata": {}, "hash": "7705b4d38fe246a00c967b6ad34119282148c2f9f7b9382bbe1b9a2324edc315", "class_name": "RelatedNodeInfo"}]}, "text": "Mining here refers to the process of\nsystematically searching a body of data to \ufb01nd a large number of patterns sat-\nisfying certain criteria. Most pattern mining algorithms are greedy in operation,\nmeaning they start by \ufb01nding simple patterns and then try to combine these\nto guide their search for more complex patterns, and iterate this approach a\nfew times.", "mimetype": "text/plain", "start_char_idx": 8378, "end_char_idx": 8738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5": {"__data__": {"id_": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "cd2631ef-da81-4a56-a503-e6eda1c05db7", "node_type": "1", "metadata": {}, "hash": "31336b8b468b61c6bf69199c5c46491d11ae9173ca3348c024ae49c19954971d", "class_name": "RelatedNodeInfo"}, {"node_id": "07b1c1b7-df4e-4ddc-858c-87fc62ea5600", "node_type": "1", "metadata": {}, "hash": "75fada1db868027c084bf4beb5a7dd8db364ea26a19ef5f2b2fa04875e20d4db", "class_name": "RelatedNodeInfo"}, {"node_id": "44dc1a75-9e66-4ae9-83f9-f454ee5027c1", "node_type": "1", "metadata": {}, "hash": "86a0ada44b8d68d30b0a6dac07f394e110dc79f35650e77eaab2387a14d7e2a1", "class_name": "RelatedNodeInfo"}, {"node_id": "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd", "node_type": "1", "metadata": {}, "hash": "573bf034916381246d48498c741e24d3016df55bb7f562a98389c21584c61d43", "class_name": "RelatedNodeInfo"}, {"node_id": "03397da8-70c2-4a37-89c3-235fb95c17da", "node_type": "1", "metadata": {}, "hash": "dca4e42477369aa1162fa17f6092055d4469818ad6be22f6b3468a83a932c38c", "class_name": "RelatedNodeInfo"}]}, "text": "Pattern mining algorithms tend to work at the syntactic level, such\nas subtree mining [2], where patterns are subtrees within a database of trees,\nand each subtree represents a concept containing all the trees consistent with\nthat subtree. This is both a limit and a strength. Limit because they cannot\nexpress arbitrary abstractions, and strength because they can be relatively e\ufb03-\ncient. Moreover even purely syntactic pattern miners can go a long way if much\nof the semantic knowledge is represented in syntax. For instance if the data con-\ntains human(John) and human\u21d2mortal a purely syntactic pattern miner will\nnot be able to take into account the implicit datum mortal(John) unless a step\n\n2 N. Geisweiller et al.\nof inference is formerly taken to make it visible. Another shortcoming of pattern\nmining is the volume of patterns it tends to produce. For that reason it can be\nuseful to rank the patterns according to interestingness [12]. One can also use\npattern mining in combination with other pattern recognition techniques, e.g.\nevolutionary programming or logical inference.\nHere we present a novel approach to pattern mining that combines semantic\nwith syntactic understanding of patterns, and that uses a sophisticated measure\nof pattern surprisingness to \ufb01lter the combinatorial explosion of patterns. The\nsurprisingness measure and the semantic aspect of patterns are handled via\nembedding the pattern mining process in an inference engine, operating on a\nhighly general hypergraph-based knowledge representation.\n1.1 Contribution\nA pattern miner algorithm alongside a measure of surprisingness designed to\n\ufb01nd patterns in hypergraph database are introduced. Both are implemented on\nthe OpenCog framework [6], on top of the Uni\ufb01ed Rule Engine , URE for short,\nthe reasoning engine of OpenCog. Framing pattern mining as reasoning provides\nthe following advantages:\n1. Enable hybridizations between syntactic and semantic pattern mining.\n2. Allow to handle the full notion of surprisingness, as will be further shown.\n3. O\ufb00er more transparency. Produced knowledge can be reasoned upon. Rea-\nsoning steps selected during mining can be represented as data for subsequent\nmining and reasoning, enabling meta-learning by leveraging URE\u2019s inference\ncontrol mechanism.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b209620d-edf9-4ee9-8bec-c511561b5272": {"__data__": {"id_": "b209620d-edf9-4ee9-8bec-c511561b5272", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "3d8024f4-1756-4db1-8eb1-907f492dcbb2", "node_type": "1", "metadata": {}, "hash": "f4dc8d7caf55737a0b5a68a8d30c0959e0a86e892755f674a7004d0ed254deda", "class_name": "RelatedNodeInfo"}, {"node_id": "10b15a04-60a5-41b7-9452-bbc2daa5c635", "node_type": "1", "metadata": {}, "hash": "9110be3ccc54b761cc49f312c86a1328f7fb01384ee902fb34b92533216af7b2", "class_name": "RelatedNodeInfo"}, {"node_id": "888ecc74-47e4-4d9d-b442-46f9920b3b8d", "node_type": "1", "metadata": {}, "hash": "ee813eb9115a825701e8a3a0c687251fc0f371cef6fd68ec882a801c20d70b55", "class_name": "RelatedNodeInfo"}, {"node_id": "13b044c4-c3bd-428f-8a0c-5c86bc26340e", "node_type": "1", "metadata": {}, "hash": "970a7487284c6da0ff5b1e73ba0f131510c01217be5fa7804a822abd42fec74d", "class_name": "RelatedNodeInfo"}, {"node_id": "10b83668-f8dc-410e-9068-b9b3162a90e4", "node_type": "1", "metadata": {}, "hash": "b16c3f39602ff14d2f9997c7d097336ffe931fbf50387ae0c32bcd01874f3326", "class_name": "RelatedNodeInfo"}]}, "text": "The last point, although already important as it stands, goes further than it may\nat \ufb01rst seem. One of the motivations to have a pattern miner in OpenCog is to\nmine inference traces, to discover control rules and apply these control rules to\nspeed up reasoning, akin to a Heuristic Algorithmic Memory [9] for reasoning.\nBy framing not only pattern mining but more generally learning as reasoning\nwe hope to kickstart a virtuous self-improvement cycle. Towards that end more\ncomponents of OpenCog, such as MOSES [8], an evolutionary program learner,\nare in the process of being ported to the URE.\nFraming learning as reasoning is not without drawbacks as more transparency\ncomes at a computational cost. However by carefully partitioning transpar-\nent/costly versus opaque/e\ufb03cient computations we hope to reach an adequate\nbalance between e\ufb03ciency and open-endedness. For instance in the case of evolu-\ntionary programming, decisions pertaining to what regions of the program space\nto explore is best processed as reasoning, given the importance and the cost of\nsuch operation. While more systematic operations such as evaluating the \ufb01tness\nof a candidate can be left as opaque. One may draw a speculative analogy with\nthe distinction between conscious and unconscious processes.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 3\n1.2 Outline\nIn Section 2 a pattern mining algorithm over hypergraphs is presented; it is\nframed as reasoning in Section 3. In Section 4 a de\ufb01nition of surprisingness is\nprovided, and a more specialized implementation is derived from it. Then, in\nSection 5 an example of how it can be framed as reasoning is presented, both\nfor the specialized and abstract de\ufb01nitions of surprisingness.\n2 Pattern Mining in Hypergraph Database\n2.1 AtomSpace: Hypergraph Database\nLet us \ufb01rst rapidly recall what is the AtomSpace [6], the hypergraph knowledge\nstore with which we shall work here. The AtomSpace is the OpenCog AGI frame-\nwork\u2019s primary data storage solution. It is a labeled hypergraph particularly\nsuited for representing symbolic knowledge, but is also capable of representing\nsub-symbolic knowledge (probabilities, tensors, etc), and most importantly com-\nbinations of the two.", "mimetype": "text/plain", "start_char_idx": 2278, "end_char_idx": 4505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83ce28df-2b6c-4272-a60c-062c4afece97": {"__data__": {"id_": "83ce28df-2b6c-4272-a60c-062c4afece97", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844", "node_type": "1", "metadata": {}, "hash": "9b60cdc2905828269caa5312981d932940bbeb9f28b4edc986777bbec0292167", "class_name": "RelatedNodeInfo"}, {"node_id": "668e7c9f-4385-4926-b145-788a8e4ab66c", "node_type": "1", "metadata": {}, "hash": "fb80aca456b3aead8a1a86fc3b4144c373923f07593b1424855d6a3befe4e0a4", "class_name": "RelatedNodeInfo"}, {"node_id": "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0", "node_type": "1", "metadata": {}, "hash": "968735809f773ee973704448b04c1177cce66958894bc48f00c260f6b7b94890", "class_name": "RelatedNodeInfo"}, {"node_id": "6f4c3da8-71af-46fd-91a9-a1a9dd58b264", "node_type": "1", "metadata": {}, "hash": "f3076376ab96c23e49ae65cab8419cb2444fdd120176cd1c9f10568cc3aa5c4a", "class_name": "RelatedNodeInfo"}, {"node_id": "58e61e39-eceb-4384-9db6-bb9ecb926f94", "node_type": "1", "metadata": {}, "hash": "17ffe8b08974040d93d96d4306d844dfeac5a6fdb7c030e26ef9f9e2f27e7f0f", "class_name": "RelatedNodeInfo"}, {"node_id": "f5460ff6-5527-4729-b38d-26d955dc8837", "node_type": "1", "metadata": {}, "hash": "c8b7a772b37117e7725def8bffb9192d091f61af0052d6cc75921242a6fc5fc0", "class_name": "RelatedNodeInfo"}]}, "text": "In the OpenCog terminology, edges of that hypergraph are\ncalled links, vertices are called nodes , and atoms are either links or nodes.\nFor example one may express that cars are vehicles with\n(Inheritance (Concept \"car\") (Concept \"vehicle\"))\nInheritance is a link connecting two concept nodes, carand vehicle . If one\nwishes to express the other way around, how much vehicles are cars, then one\ncan attach the inheritance with a truth value\n(Inheritance (stv 0.4 0.8) (Concept \"vehicle\") (Concept \"car\"))\nwhere 0.4 represents a probability and 0.8 represents a con\ufb01dence.\nStoring knowledge as hypergraph rather than collections of formulae allows\nto rapidly query atoms and how they relate to other atoms.\n2.2 Pattern Matching\nOpenCog comes with a pattern matcher , a component that can query the Atom-\nSpace, similar in spirit to SQL, but di\ufb00erent in several aspects. For instance\nqueries are themselves programs represented as atoms in the AtomSpace. This\ninsures re\ufb02exivity where queries can be queried or produced by queries.\nHere\u2019s an example of such a query\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nwhich fetches instances of transitivity of inheritance in the AtomSpace. For in-\nstance if the AtomSpace contains\n\n4 N. Geisweiller et al.\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\n(Inheritance (Concept \"mammal\") (Concept \"animal\"))\n(Inheritance (Concept \"square\") (Concept \"shape\"))\nit retrieves\n(Set (List (Concept \"cat\") (Concept \"mammal\") (Concept \"animal\")))\nwhere cat,mammal andanimal are associated to variable $X,$Yand$Zaccording\nto the pre\ufb01x order of the query, but square andshape are not retrieved because\nthey do not exhibit transitivity. The construct Setrepresents a set of atoms,\nand List in this context represents tuples of values. The construct Getmeans\nretrieve. The construct Present means that the arguments are patterns to be\nconjunctively matched against the data present in the AtomSpace. We also call\nthe arguments of Present ,clauses , and say that the pattern is a conjunction of\nclauses .", "mimetype": "text/plain", "start_char_idx": 4506, "end_char_idx": 6601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35fe60d5-9729-4613-af55-ea0344f5ba4d": {"__data__": {"id_": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "6470c3e0-540a-4b63-b550-99fb7a144731", "node_type": "1", "metadata": {}, "hash": "5abeb86871ef9b7abe653e035989bc7a8061b88fa592db93601abb95a92d3cac", "class_name": "RelatedNodeInfo"}, {"node_id": "d3e752d3-841f-472d-8ab3-a51caee198f9", "node_type": "1", "metadata": {}, "hash": "2e13076db72aa0c670fbdc9d892ff13779ef5807907a033bd8e86602bf3c288a", "class_name": "RelatedNodeInfo"}, {"node_id": "c92d4036-793d-465b-94d2-ee31c907ac42", "node_type": "1", "metadata": {}, "hash": "ad5331cc4c85255400ee83de54847733a809b0eb0ae3c9f8be608e3a5bf7c18b", "class_name": "RelatedNodeInfo"}, {"node_id": "1890a880-585e-4161-af3d-138fb313accd", "node_type": "1", "metadata": {}, "hash": "16b2dc76874d7f285c760d1e29116d64c05ecc8fb2a0050ec29bc1ca671dff5a", "class_name": "RelatedNodeInfo"}, {"node_id": "08366056-1fb3-499c-bed3-a3374071986b", "node_type": "1", "metadata": {}, "hash": "eb60079cfbe3f898510a93692271a50dc865386720374dbaf6f44bbaf3fe14ab", "class_name": "RelatedNodeInfo"}]}, "text": "In addition, the pattern matcher can rewrite. For instance a transitivity rule\ncould be implemented with\n(Bind (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\")))\n(Inheritance (Variable \"$X\") (Variable \"$Z\")))\nThe pattern matcher provides the building blocks for the reasoning engine. In\nfact the URE is, for the most part, pattern matching + uni\ufb01cation. The collection\nof atoms that can be executed in OpenCog, to query the atomspace, reason or\nsuch, forms a language called Atomese .\n2.3 Pattern Mining as Inverse of Pattern Matching\nThe pattern miner solves the inverse problem of pattern matching. It attempts\nto \ufb01nd queries that would retrieve a certain minimum number of matches. This\nnumber is called the support in the pattern mining terminology [1,2].\nIt is worth mentioning that the pattern matcher has more constructs than\nGet,Present andBind ; for declaring types, expressing preconditions, and per-\nforming general computations. However the pattern miner only supports a subset\nof constructs due to the inherent complexity of such expressiveness.\n2.4 High Level Algorithm of the Pattern Miner\nBefore showing how to express pattern mining as reasoning, let us explain the\nalgorithm itself.\nOur pattern mining algorithm operates like most pattern mining algorithms\n[2] by greedily searching the space of frequent patterns while pruning the parts\nthat do not reach the minimum support. It typically starts from the most ab-\nstract one, the toppattern, constructing specializations of it and only retain those\nthat have enough support, then repeat. The apriori property [1] guaranties that\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 5\nno pattern with enough support will be missed based on the fact that patterns\nwithout enough support cannot have specializations with enough support. More\nformally, given a database D, a minimal support Sand an initialize collection C\nof patterns with enough support, the mining algorithm is as follows\n1. Select a pattern PfromC.\n2. Produce a shallow specialization QofPwith support equal to or above S.\n3. Add QtoC, remove Pif all its shallow specializations have been produced.\n4. Repeat till a termination criterion has been met.", "mimetype": "text/plain", "start_char_idx": 6602, "end_char_idx": 8856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bda7171-3737-44d5-bece-ce2cf32331b9": {"__data__": {"id_": "3bda7171-3737-44d5-bece-ce2cf32331b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "node_type": "1", "metadata": {}, "hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "3efa6881-bc15-4b5f-b1ef-90b2478e157c", "node_type": "1", "metadata": {}, "hash": "59f708f45fb5720993e4a239e8b2ca3febb68aade5779606aedf4b506a09f1da", "class_name": "RelatedNodeInfo"}]}, "text": "4. Repeat till a termination criterion has been met.\nThe pattern collection Cis usually initialized with the top pattern\n(Get (Present (Variable \"$X\")))\nthat matches the whole database, and from which all subsequent patterns are\nspecialized.", "mimetype": "text/plain", "start_char_idx": 8804, "end_char_idx": 9045, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00e71b59-1d3c-40fe-ba95-f28f456faa39": {"__data__": {"id_": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f", "node_type": "1", "metadata": {}, "hash": "2b67fd48f143be878cdf96f00bbcc4e9cf61e477a160aba15af4086c8807b396", "class_name": "RelatedNodeInfo"}, {"node_id": "d41f3050-1f04-4c65-ac40-be3a391aad84", "node_type": "1", "metadata": {}, "hash": "5639ce8ff65aa685a33e6b1573726784dee004e4d54468ff1288570dbdcd4d07", "class_name": "RelatedNodeInfo"}, {"node_id": "72274b31-0107-4bb5-adb3-647f06a9c264", "node_type": "1", "metadata": {}, "hash": "19a6f2ed74431bfd0c9dc0157d961bd3daebd66ce6ed4a1ad7a85f0b38e593ac", "class_name": "RelatedNodeInfo"}, {"node_id": "df92c951-b195-4213-8bd8-686c3c4fb161", "node_type": "1", "metadata": {}, "hash": "88e2ce7bd76e14a334924bd992cfdb7c51f49c38b5204a08ccbfd22327775189", "class_name": "RelatedNodeInfo"}, {"node_id": "e6bdb32f-365a-410f-8d36-cc20eba47ac3", "node_type": "1", "metadata": {}, "hash": "3adab1916c9046298310d0dabe98fe6dbe188e6e27ba79d9999d7d5a5dc2494a", "class_name": "RelatedNodeInfo"}]}, "text": "A shallow specialization is a specialization such that the expansion\nis only a level deep. For instance, if Dis the 3 inheritances links of Subsection\n2.2 (cat is a mammal, a mammal is an animal and square is a shape), a shallow\nspecialization of the top pattern could be\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nwhich would match all inheritance links, thus have a support of 3. A subsequent\nshallow specialization of it could be\n(Get (Present (Inheritance (Concept \"cat\") (Variable \"$Y\"))))\nwhich would only match\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\nand have a support of 1. So if the minimum support Sis 2, this one would\nbe discarded. In practice the algorithm is complemented by heuristics to avoid\nexhaustive search, but that is the core of it.\n3 Framing Pattern Mining as Reasoning\nThe hardest part of the algorithm above is step 1, selecting which pattern to\nexpand; this has the biggest impact on how the space is explored. When pat-\ntern mining is framed as reasoning such decision corresponds to a premise or\nconclusion selection . Let us formalize the type of propositions we need to prove\nin order to search the space of patterns. For sake of conciseness we will use a\nhybridization between mathematics and Atomese, it being understood that all\ncan be formalized in Atomese. Given a database Dand a minimum support S\nwe want to instantiate and prove the following theorem\nS\u2264support (P,D)\nwhich expresses that pattern Phas enough support with respect to the data\nbaseD. To simplify we introduce the predicate minsup (P, S,D) as a shorthand\nforS\u2264support (P,D). The primary inference rule we need is (given in Gentzen\nstyle),\n\n6 N. Geisweiller et al.\nminsup (Q, S,D) spec (Q, P)(AP)minsup (P, S,D)\nexpressing that if Qhas enough support, and Qis a specialization of P, then\nPhas enough support, essentially formalizing the apriori property (AP). We\ncan either apply such rule in a forward way, top-down, or in a backward way,\nbottom-up.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92c54c82-d608-40fc-b2e4-9add7448dbae": {"__data__": {"id_": "92c54c82-d608-40fc-b2e4-9add7448dbae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "c0cecfe5-c34e-4996-ba27-8b80d728a8c9", "node_type": "1", "metadata": {}, "hash": "48b377146aefe3d57b55a70ba49914060c02ea242324c95a6c268b82c55fcf52", "class_name": "RelatedNodeInfo"}, {"node_id": "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6", "node_type": "1", "metadata": {}, "hash": "825d18d0c3454b87f99a538042cc737ed77856c0062342d4807b9ef4325e4234", "class_name": "RelatedNodeInfo"}, {"node_id": "dbd63e28-8a46-4a13-9136-3731b4bc7b86", "node_type": "1", "metadata": {}, "hash": "83d880f33488ffbaacbcf458fd118ab73ccab33b45154f808c85eff6f69b07a3", "class_name": "RelatedNodeInfo"}, {"node_id": "f8dcbeed-9812-41d7-8b8c-7945ef76f63a", "node_type": "1", "metadata": {}, "hash": "995f45bcc0fc9c278a76d4479559f783bdccb4d5d177d4e605abf15cb3b553f7", "class_name": "RelatedNodeInfo"}, {"node_id": "bfce8e9f-a1c8-43e6-9fe9-c5fe8889a35f", "node_type": "1", "metadata": {}, "hash": "b7239d37a8f1643df05474595a50ea9d2d8f6c2814422af12f9eae8e17cf929b", "class_name": "RelatedNodeInfo"}]}, "text": "If we search from more abstract to more specialized we want to\nuse it in a backward way. Meaning the reasoning engine needs to choose P\n(conclusion selection from minsup (P, S,D)) and then construct a specialization\nQ. In practice that rule is actually written backward so that choosing Pamounts\nto a premise selection , but is presented here this way for expository purpose.\nThe de\ufb01nition of spec is left out, but it is merely a variation of the subtree\nrelationship accounting for variables.\nOther heuristic rules can be used to infer knowledge about minsup . They are\nheuristics because unlike the apriori property, they do not guaranty complete-\nness, but can speed-up the search by eliminating large portions of the search\nspace. For instance the following rule\nminsup (P, S,D) minsup (Q, S,D) R(P\u2297Q)(CE)minsup (P\u2297Q, S,D)\nexpresses that if PandQhave enough support, and a certain combination P\u2297Q\nhas a certain property R, then such combination has enough support. Such rule\ncan be used to build the conjunction of patterns. For instance given PandQ\nboth equal to\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nOne can combine them (joint by variable $Y) to form\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nThe property Rhere is that both clauses must share at least one joint variable\nand the combination must have its support above or equal to the minimum\nthreshold.\n4 Surprisingness\nEven with the help of the apriori property and additional heuristics to prune\nthe search, the volume of mined patterns can still be overwhelming. For that it\nis helpful to assign to the patterns a measure of interestingness . This is a broad\nnotion and we will restrict our attention to the sub-notion of surprisingness , that\ncan be de\ufb01ned as what is contrary to expectations .\nJust like for pattern mining, surprisingness can be framed as reasoning. They\nare many ways to formalize it.", "mimetype": "text/plain", "start_char_idx": 1981, "end_char_idx": 3937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cebeec0e-7cb2-499b-822c-b985697592dc": {"__data__": {"id_": "cebeec0e-7cb2-499b-822c-b985697592dc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "de95fd07-02e8-4a7d-944d-7cbb1b3e974d", "node_type": "1", "metadata": {}, "hash": "a0bad2ee5155f76d5147440ed8f6a72e74425625ba1120206bf241cae9e609d8", "class_name": "RelatedNodeInfo"}, {"node_id": "1d6e4b57-5b96-4430-950d-d2a0d3af1329", "node_type": "1", "metadata": {}, "hash": "728a2274f9adb49bf2a6e066ecb04922cc430f0bfcb93cb8fec0956a600fc220", "class_name": "RelatedNodeInfo"}, {"node_id": "818b970a-96b4-48e6-aceb-a67d5a3ecb7b", "node_type": "1", "metadata": {}, "hash": "6fbbb29ee2aed3c1b1ef1ca2fae162f0875263944310da399d240117abb69d2e", "class_name": "RelatedNodeInfo"}, {"node_id": "49d42f7c-db02-4840-9396-0c6d15ebc2ce", "node_type": "1", "metadata": {}, "hash": "4760283db3c240ab5aa11093b24902b19116f23abd4775605f512926c346fab0", "class_name": "RelatedNodeInfo"}, {"node_id": "e632fbdd-ac29-4be9-b74e-b2a9dec0cc01", "node_type": "1", "metadata": {}, "hash": "5b7e4b9c798783c88a77f858f08e88844c69344ccc97ad697789df50b379eff0", "class_name": "RelatedNodeInfo"}]}, "text": "They\nare many ways to formalize it. We tentatively suggest that in its most general\nsense, surprisingness may be the considered as the di\ufb00erence of outcome between\ndi\ufb00erent inferences over the same conjecture.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 7\nOf course in most conventional logical systems, if consistent, di\ufb00erent infer-\nences will produce the same result. However in para-consistent systems, such as\nPLN for Probabilistic Logic Network [4], OpenCog\u2019s logic for common sense rea-\nsoning, con\ufb02icting outcomes are possible. In particular PLN allows propositions\nto be believed with various degrees of truth, ranging from total ignorance to\nabsolute certainty. Thus PLN is well suited for such de\ufb01nition of surprisingness.\nMore speci\ufb01cally we de\ufb01ne surprisingness as the distance of truth values be-\ntween di\ufb00erent inferences over the same conjecture . In PLN a truth value is a\nsecond order distribution, probabilities over probabilities, Chapter 4 of [4]. Sec-\nond order distributions are good at capturing uncertainties. Total ignorance is\nrepresented by a \ufb02at distribution (Bayesian prior), or a slightly concave one\n(Je\ufb00reys prior [7]), and absolute certainty by a Dirac delta function.\nSuch de\ufb01nition of surprisingness has the merit of encompassing a wide variety\nof cases; like the surprisingness of \ufb01nding a proof contradicting human intuition.\nFor instance the outcome of Euclid\u2019s proof of the in\ufb01nity of prime numbers might\ncontradict the intuition of a beginner upon observation that prime numbers\nrapidly rarefy as they grow. It also encompasses the surprisingness of observing\nan unexpected event, or the surprisingness of discovering a pattern in seemingly\nrandom data. All these cases can be framed as ways of constructing di\ufb00erent\ntypes of inferences and \ufb01nding contradictions between them. For instance in the\ncase of discovering a pattern in a database, one inference could calculate the\nempirical probability based on the data, while an other inference could calculate\na probability estimate based on variable independences.\nThe distance measure to use to compare conjecture outcomes remains to be\nde\ufb01ned.", "mimetype": "text/plain", "start_char_idx": 3902, "end_char_idx": 6063, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e73c683-2014-42b6-8021-49e0306c5579": {"__data__": {"id_": "1e73c683-2014-42b6-8021-49e0306c5579", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "node_type": "1", "metadata": {}, "hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "c5d067e9-5241-45d6-a128-84e3c4f95900", "node_type": "1", "metadata": {}, "hash": "1a9567eccd926a744fc687e2da1cc5877b648f87145251dbd04864a70f57993b", "class_name": "RelatedNodeInfo"}, {"node_id": "48cdaa2f-36eb-407c-80ec-3591f27d6a94", "node_type": "1", "metadata": {}, "hash": "50b04ac4848f37ab74af7f68cfaf2747a245263f150aee25ddb92c74dfcf4453", "class_name": "RelatedNodeInfo"}, {"node_id": "2a596085-481e-45cb-b03e-cd7143a30116", "node_type": "1", "metadata": {}, "hash": "d7532098fa667650347556fe86277b626407d4939f6e9d1bfb20891e5f04dbb8", "class_name": "RelatedNodeInfo"}, {"node_id": "f2324a4b-d287-4f37-936f-3aa29d4ff177", "node_type": "1", "metadata": {}, "hash": "cd42dab939bdf8096239a1190ed481e78777117836f7db0403c908a778f2b858", "class_name": "RelatedNodeInfo"}, {"node_id": "856ca3dc-734d-4cac-a6d4-e30750bee8f2", "node_type": "1", "metadata": {}, "hash": "8cbe583051a1a6f121002fbac63c20085da4a5bfd4414f79024138fc945b5fc8", "class_name": "RelatedNodeInfo"}]}, "text": "The distance measure to use to compare conjecture outcomes remains to be\nde\ufb01ned. Since our truth values are distributions the Jensen-Shannon Distance ,\nJSD for short [3], suggested as surprisingness measure in [11], could be used. The\nadvantage of such distance is that it accounts well for uncertainty. If for instance\na pattern is discovered in a small data set displaying high levels of dependencies\nbetween variables (thus surprising relative to an independence assumption), the\nsurprisingness measure should consider the possibility that it might be a \ufb02uke\nsince the data set is small. Fortunately, the smaller the data set, the \ufb02atter the\nsecond order distributions representing the empirical and the estimated truth\nvalues of the pattern, consequently reducing the JSD.\nLikewise one can imagine the following experiments. In the \ufb01rst experiment\na coin is tossed 3 times, a probability p1of head is calculated, then the coin is\ntossed 3 more times, a second probability p2of head is calculated. p1andp2\nmight be very di\ufb00erent, but it should not be surprising given the low number\nof observations. On the contrary, in the second experiment the coin is tossed a\nbillion times, p1is calculated, then another billion times, p2is calculated. Here\neven tiny di\ufb00erences between p1andp2should be surprising. In both cases the\nJensen-Shannon Distance seems to adequatly accounts for the uncertainty.\nA slight re\ufb01nement of our de\ufb01nition of surprisingness, probably closer to\nhuman intuition, can be obtained by \ufb01xing one type of inference provided by the\ncurrent model of the world from which rapid (and usually uncertain) conclusions\ncan be derived, and the other type of inference implied by the world itself, either\n\n8 N. Geisweiller et al.\nvia observations, in the case of an experiential reality, or via crisp and long chains\nof deductions in the case of a mathematical reality.\n4.1 Independence-based Surprisingness\nHere we explore a limited form of surprisingness based on the independence\nof the variables involved in the clauses of a pattern, called I-Surprisingness for\nIndependence-based Surprisingness.", "mimetype": "text/plain", "start_char_idx": 5983, "end_char_idx": 8093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e187e190-220d-4917-a7a2-e9f42f5a424f": {"__data__": {"id_": "e187e190-220d-4917-a7a2-e9f42f5a424f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "node_type": "1", "metadata": {}, "hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d", "node_type": "1", "metadata": {}, "hash": "a8186e20a32df9b9c3364834a5fce989d269c34d9fb08982185068e0d59b3b02", "class_name": "RelatedNodeInfo"}, {"node_id": "e8a768ab-d186-4f11-904a-fe7c8ad137b4", "node_type": "1", "metadata": {}, "hash": "c1882f834079fa1a5ec8e1170a5290eff46fe9226b54dda147fc47bf71283dee", "class_name": "RelatedNodeInfo"}, {"node_id": "399d020c-3cf6-410c-94f4-7a8db05bb85c", "node_type": "1", "metadata": {}, "hash": "31685d6387ecf04b327cf32401bbde0857eb3cc081af8b8d5f7cff43570ae24d", "class_name": "RelatedNodeInfo"}, {"node_id": "069cdfcc-630c-46f0-a945-8f0ad3479755", "node_type": "1", "metadata": {}, "hash": "b8acda1068d2f780f322d3781b0bcfbce96665c5b33f766b940037f005758e9f", "class_name": "RelatedNodeInfo"}, {"node_id": "0884879f-7bc7-4530-ad46-fbded1002edb", "node_type": "1", "metadata": {}, "hash": "6fb3704a49da6723587639a48c0b2c381869bb35423c8d0e28506b5779168ae7", "class_name": "RelatedNodeInfo"}, {"node_id": "25a106eb-234f-4edc-816f-a307fdd9d3db", "node_type": "1", "metadata": {}, "hash": "4fc2a375ad59004f753b97e0fea5398cbc1b57cf301ab2e74611e79e36fe14df", "class_name": "RelatedNodeInfo"}]}, "text": "For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nhas two clauses\n(Inheritance (Variable \"$X\") (Variable \"$Y\"))\nand\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))\nIf each clause is considered independently, that is the distribution of values taken\nby the variable tuples ( $X,$Y) appearing in the \ufb01rst clause is independent from\nthe distribution of values taken by the variable tuples ( $Y,$Z) in the second\nclause, one can simply use the product of the two probabilities to obtain an\nprobability estimate of their conjunctions. However the presence of joint vari-\nables, here $Y, makes this calculation incorrect. The connections need to be taken\ninto account. To do that we use the fact that a pattern of connected clauses is\nequivalent to a pattern of disconnected clauses combined with a condition of\nequality between the joint variables. For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nis equivalent to\n(Get (And (Present (Inheritance (Variable \"$X\") (Variable \"$Y1\"))\n(Inheritance (Variable \"$Y2\") (Variable \"$Z\")))\n(Equal (Variable \"$Y1\") (Variable \"$Y2\"))))\nwhere the joint variables, here $Y, have been replaced by variable occurrences in\neach clause, $Y1and $Y2. Then we can express the probability estimate as the\nproduct of the probabilities of the clauses, times the probability of having the\nvalues of the joint variables equal.\n5 I-Surprisingness Framed as Reasoning and Beyond\nThe proposition to infer in order to calculate surprisingness is de\ufb01ned as\nsurp (P,D, s)\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 9\nwhere surp is a predicate relating the pattern Pand the database Dto its\nsurprisingness s, de\ufb01ned as\ns:=dst(emp(P,D),est(P,D))\nwhere dstis the Jensen-Shannon distance, empis the empirical second order\ndistribution of P, and estits estimate. The calculation of emp(P,D) is easily\nhandled by a direct evaluation rule that uses the support of Pand the size\nofDto obtain the parameters of the beta-binomial-distribution describing its\nsecond order probability.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8": {"__data__": {"id_": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "node_type": "1", "metadata": {}, "hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "5f64043c-7e2a-41c4-b648-aaa15229d033", "node_type": "1", "metadata": {}, "hash": "6c5ced2af2d8bcf1e1ec7cfd61677dd233a1b0c07dde97df50647c5e55208860", "class_name": "RelatedNodeInfo"}, {"node_id": "acb61c45-4767-49de-b055-017e9054fa4a", "node_type": "1", "metadata": {}, "hash": "25b296c59ce65bd4ed13101eb8456784114bcd9b418fb8451f5677167d21ef91", "class_name": "RelatedNodeInfo"}, {"node_id": "4c69460d-250a-4b64-93a2-b144aa6b0090", "node_type": "1", "metadata": {}, "hash": "43956761caac5fb9b7b17f97e65c7909418dc9ed1d62416d061b313b42bba7c1", "class_name": "RelatedNodeInfo"}, {"node_id": "210e3c58-7c26-4d4d-aeeb-f38743467f93", "node_type": "1", "metadata": {}, "hash": "146ec564314cb666caeab931cc07ace5a91683ebf42f2f3da4ac534e3b52f4a6", "class_name": "RelatedNodeInfo"}, {"node_id": "5c2cd12f-6f9a-4900-8849-11dbbacb8153", "node_type": "1", "metadata": {}, "hash": "2de04b44894527854b038bda58266b6194ce03f606c02e593e9a6f3386e3ee37", "class_name": "RelatedNodeInfo"}, {"node_id": "06bc1abc-1485-47b1-99e6-f91f1b039183", "node_type": "1", "metadata": {}, "hash": "fde575b7955a45de6e543b44aa7b8c6694896ecebd26c38efb450f1448ac276a", "class_name": "RelatedNodeInfo"}]}, "text": "However, the mean by which the estimate is calculated\nis let unspeci\ufb01ed. This is up to the reasoning engine to \ufb01nd an inference path\nto calculate it. Below is an example of inference tree to calculate surp based on\nI-Surprisingness\nPDPD(DE)emp(P,D)PD(IS)est(P,D)(JSD)dst(emp(P,D),est(P,D))(S)surp (P,D,dst(emp(P,D),est(P,D)))\nwhere\n\u2013(S) is a rule to construct the surp predicate,\n\u2013(JSD) is a rule to calculate the Jensen-Shannon Distance,\n\u2013(DE) is the direct evaluation rule to calculate the empirical second order\nprobability of Paccording toD,\n\u2013(IS) is a rule to calculate the estimate of Pbased on I-Surprisingness de-\nscribed in Section 4.1.\nThat inference tree uses a single rule (IS) to calculate the estimate. Most rules\nare complex, such as (JSD), and actually have the heavy part of the calculation\ncoded in C++ for maximum e\ufb03ciency. So all that the URE must do is put\ntogether such inference tree, which can be done reasonably well given how much\ncomplexity is encapsulated in the rules.\nAs of today we have only implemented (IS) for the estimate. In general,\nhowever, we want to have more rules, and ultimately enough so that the esti-\nmate can be inferred in an open-ended way. In such scenario, the inference tree\nwould look very similar to the one above, with the di\ufb00erence that the (IS) rule\nwould be replaced by a combination of other rules. Such approach naturally\nleads to a dynamic surprisingness measure. Indeed, inferring that some pattern\nis I-Surprising requires to infer its empirical probability, and this knowledge can\nbe further utilized to infer estimates of related patterns. For instance, if say an\nI-Surprising pattern is discovered about pets and food. A pattern about cats and\nfood might also be measured as I-Surprising, however the fact that cat inherits\npet may lead to constructing an inference that estimates the combination of cat\nand food based on the combination of pet and food, possibly leading to a much\nbetter estimate, and thus decreasing the surprisingness of that pattern.", "mimetype": "text/plain", "start_char_idx": 2154, "end_char_idx": 4174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0": {"__data__": {"id_": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "node_type": "1", "metadata": {}, "hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "e83ce9b4-a63e-499d-9145-58d680c0ad1e", "node_type": "1", "metadata": {}, "hash": "ebf4068c1723a0e667051ec254ebc18b4a11632f4a9f94a61441ce8b888bb88e", "class_name": "RelatedNodeInfo"}, {"node_id": "ac8499c2-41f9-43ea-ba89-b0d0110e7736", "node_type": "1", "metadata": {}, "hash": "528d47f9e3a7866371190a7034228016571b7694d79789102cf71df13c8b0434", "class_name": "RelatedNodeInfo"}, {"node_id": "2d8577ff-2165-41af-8b82-c02212fd1928", "node_type": "1", "metadata": {}, "hash": "fb22a7742f0b6c8f9818b6e591327a859ef7e7c11103ccd3505f45829a4702ba", "class_name": "RelatedNodeInfo"}, {"node_id": "9db3d52e-ffdf-4639-b596-ae6b58a290de", "node_type": "1", "metadata": {}, "hash": "615f4723a7663f4a42352b191398feac46d2e394db6f6186e10e2f550c200193", "class_name": "RelatedNodeInfo"}, {"node_id": "2a4534fb-b959-4077-9e95-c63e1e552d28", "node_type": "1", "metadata": {}, "hash": "b5c7ab4d6d99cfeca13f2ac9836a659f46417f99ef519090cc5c8035f406ce5b", "class_name": "RelatedNodeInfo"}]}, "text": "10 N. Geisweiller et al.\n6 Discussion\nThe ideas presented above have been implemented as open source C++ code in\nthe OpenCog framework, and have been evaluated on some initial test datasets,\nincluding a set of logical relationships drawn from the SUMO ontology [10]. The\nresults of this empirical experimentation are omitted here for space reasons and\nwill be posted online as supplementary information. These early experiments\nprovide tentative validation of the sensibleness of the approach presented: using\ninference on a hypergraph based representation to carry out pattern mining that\nweaves together semantics and syntax and is directed toward a sophisticated\nversion of surprisingness rather than simpler objective functions like frequency.\nFuture work will explore applications to a variety of practical datasets, in-\ncluding empirical data and logs from an inference engine; and richer integration\nof these methods with more powerful but more expensive techniques such as\npredicate logic inference and evolutionary learning.\nReferences\n1. Agrawal, R., Srikant, R.: Fast algorithms for mining association rules. Proceedings\nof the 20th International Conference on Very Large Data Bases (1994)\n2. Chi, Y., Muntz, R., Nijssen, S., N. Kok, J.: Frequent subtree mining - an overview.\nFundam. Inform. 66, 161\u2013198 (01 2005)\n3. Endres, D., Schindelin, J.: A new metric for probability distributions. Information\nTheory, IEEE Transactions on 49, 1858 \u2013 1860 (08 2003)\n4. Goertzel, B., Ikle, M., Goertzel, I.F., Heljakka, A.: Probabilistic Logic Networks.\nSpringer US (2009)\n5. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence, Part\n1: A Path to Advanced Agi Via Embodied Learning and Cognitive Synergy. At-\nlantis Press (2014)\n6. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence,\nPart 2: The CogPrime Architecture for Integrative, Embodied AGI. Atlantis Press\n(2014)\n7. Je\ufb00reys, H.: An Invariant Form for the Prior Probability in Estimation Problems.", "mimetype": "text/plain", "start_char_idx": 4176, "end_char_idx": 6186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "edfab44b-48cf-4ae7-a53b-67c49503d9b1": {"__data__": {"id_": "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "node_type": "1", "metadata": {}, "hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "class_name": "RelatedNodeInfo"}, "5": [{"node_id": "dbe64b43-880f-425f-86d3-c2a94ce8f965", "node_type": "1", "metadata": {}, "hash": "b09421275b2d3f0759534d9bb7025106e0d1d31811b798450205903c1286c735", "class_name": "RelatedNodeInfo"}, {"node_id": "1557ee2b-a84a-495f-abae-7fa0af15edf5", "node_type": "1", "metadata": {}, "hash": "9f96fb801e7e55a62e95d4ccaea10442c5ff8a368fcc2eaebf3087541ca18364", "class_name": "RelatedNodeInfo"}, {"node_id": "eda6c0a3-56aa-4790-a353-45853740bf09", "node_type": "1", "metadata": {}, "hash": "eefd6286d7ff439c63911b4ddf3431beb7e2c4d8b7ed4a5ca74a3a23f457580a", "class_name": "RelatedNodeInfo"}]}, "text": "Proceedings of the Royal Society of London Series A 186, 453\u2013461 (1946)\n8. Looks, M., Sc, B., Missouri, S.L., Louis, S.: Abstract competent program evolution\nby moshe looks (2006)\n9.\u00a8Ozkural, E.: Towards heuristic algorithmic memory. In: Schmidhuber, J.,\nTh\u00b4 orisson, K.R., Looks, M. (eds.) Arti\ufb01cial General Intelligence. pp. 382\u2013387.\nSpringer Berlin Heidelberg, Berlin, Heidelberg (2011)\n10. Pease, A.: Ontology: A practical guide. Articulate Software Press, Angwin, CA (01\n2011)\n11. Pienta, R., Lin, Z., Kahng, M., Vreeken, J., Talukdar, P.P., Abello, J.,\nParameswaran, G., Chau, D.H.P.: Adaptivenav: Discovering locally interesting and\nsurprising nodes in large graphs. IEEE VIS Conference (Poster) (2015)\n12. Vreeken, J., Tatti, N.: Interesting Patterns, pp. 105\u2013134. Springer International\nPublishing, Cham (2014)\nView publication stats", "mimetype": "text/plain", "start_char_idx": 6187, "end_char_idx": 7029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "408db57b-f4c6-4498-8fb7-62694d06d7e9": {"__data__": {"id_": "408db57b-f4c6-4498-8fb7-62694d06d7e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}}, "text": "Economic Attention Networks:  \nAssociative Memory and Resource Allocation  \nfor General Intelligence  \nMatthew Ikle\u2019, Joel Pitt, Ben Goertzel, George Sellman  \n \nAdams State College (ASC), Singularity Institute for AI (SIAI), Novamente LLC and SIAI, ASC  \n1405 Berne rd Place, Rockville MD 20851, USA  \nben@goertzel.org , stephan@bugaj.com  \n \n \n \n \nAbstract  \nA novel method for simultaneously storing memories and \nallocating resources in AI systems is presented.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 465, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "131dcd82-56ea-471e-913c-078d8c8fa663": {"__data__": {"id_": "131dcd82-56ea-471e-913c-078d8c8fa663", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "408db57b-f4c6-4498-8fb7-62694d06d7e9", "node_type": "1", "metadata": {}, "hash": "e1add1e5821cc88eb23937a262e98284f2bfcd9b7330c9070cdfc2f3bb9d8624", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}}, "text": "The \nmethod, Economic Attention Networks (ECANs), bears \nsome resemblance to the spread of activation in attractor \nneural networks, but differs via explicitly differentiating two \nkinds of \u201cactivation\u201d (Short Term Importance, related to \nproces sor allocation; and Long Term Importance, related to \nmemory allocation), and in using equations that are based \non ideas from economics rather than approximative neural \nmodeling.", "mimetype": "text/plain", "start_char_idx": 467, "end_char_idx": 893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18207c4a-77dc-44f7-86d9-ef2fbd1e3729": {"__data__": {"id_": "18207c4a-77dc-44f7-86d9-ef2fbd1e3729", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "131dcd82-56ea-471e-913c-078d8c8fa663", "node_type": "1", "metadata": {}, "hash": "2e24101a6b8f6c67882e3f5b9e430470bac2d8e855752be288ea9485f564cb69", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}}, "text": "Here we explain the basic ideas of ECANs, and \nthen investigate the functional ity of ECANs as associative \nmemories, via mathematical analysis and the reportage of experimental results obtained from the implementation of \nECANs in the OpenCog integrative  AGI system. \nIntroduction \nOne of the critical challenges confronting any system \naimed at advanced general intelligence is the allocation of \ncomputational resources.", "mimetype": "text/plain", "start_char_idx": 895, "end_char_idx": 1319, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "000f8812-7534-46a9-8d88-f6ca499854b9": {"__data__": {"id_": "000f8812-7534-46a9-8d88-f6ca499854b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18207c4a-77dc-44f7-86d9-ef2fbd1e3729", "node_type": "1", "metadata": {}, "hash": "b5c4d66366f24773580eb075f07ee4f1bd0ed7bcfb46b21dcd2e523e4d620f0f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}}, "text": "The central nature of this issue is \nhighlighted by Hutter\u2019s (2004) mathematical results \nshowing that if one formalizes intelligence as the \nachievement of complex computabl e goals, then there are \nvery simple software programs that can achieve arbitrarily \nhigh degrees of intelligence, so long as they are allotted huge amounts of computational resources.  In this sense, \ncoping with space and time limitations is the crux of the  \nAGI problem.", "mimetype": "text/plain", "start_char_idx": 1321, "end_char_idx": 1770, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acf7ba6b-97b2-473f-a534-113d8d7e3f4a": {"__data__": {"id_": "acf7ba6b-97b2-473f-a534-113d8d7e3f4a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "000f8812-7534-46a9-8d88-f6ca499854b9", "node_type": "1", "metadata": {}, "hash": "7e1be3360fee1b2ca6f504f4aff404743455ab57f68a0f9dadfaef500f0e7c96", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "node_type": "1", "metadata": {}, "hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "class_name": "RelatedNodeInfo"}}, "text": "Not surprisingly, given its central nature, the \nmanagement of computational resources ties in with a \nvariety of other concrete issues that AGI systems confront, \nin ways depending on the specific system in question.  In \nthe approach we will  describe here, resource allocation is \ncarried out by the same structures and dynamics as \nassociative memory, whereas the relationship between \nresource allocation and other system processes like reasoning and procedure learning involves feedback between di stinct software components.", "mimetype": "text/plain", "start_char_idx": 1775, "end_char_idx": 2306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7": {"__data__": {"id_": "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}}, "text": "We will describe here a specific approach to resource \nallocation and associative memory, which we call Economic Attention Networks or ECANs.  ECANs have \nbeen designed and implemented within an integrative AGI \nframework called O penCog (which overlaps with the \nrelated Novamente Cognition Engine system; see Goertzel, \n2006).  However, ECANs also have meaning outside the OpenCog context; they may be considered nonlinear dynamical systems in roughly the same family as attractor \nneural  networks such as Hopfield nets (Amit, 1992).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 536, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa": {"__data__": {"id_": "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7", "node_type": "1", "metadata": {}, "hash": "7107669b299d9e378f30fbb2add9821c0c22bde027c0fea0f82bda035c78109d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}}, "text": "The \nmain focus of this paper is the study of ECANs as \nassociative memories, which involves mathematical and experimental analyses that are independent of the \nembedding of ECANs in OpenCog or other AGI systems.   \nBut we will also discuss the implications of these results \nfor specific interactions between ECANs and other \nOpenCog components  \nEconomic Attention Networks \nFirst we summarize the essential ideas of ECANs; in later \nsections two specific variants of ECAN e quational \nformalizations are presented.", "mimetype": "text/plain", "start_char_idx": 538, "end_char_idx": 1055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1c3092c-c836-4d61-86b9-6afce0b7a4e8": {"__data__": {"id_": "c1c3092c-c836-4d61-86b9-6afce0b7a4e8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa", "node_type": "1", "metadata": {}, "hash": "f34aace16aa7e91012281bb8b348a95e3f0d258790d1f91f97378e5e8a1ab4f5", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}}, "text": "An ECAN is a graph, consisting of un -typed nodes and \nlinks, and also links that may be typed either HebbianLink \nor InverseHebbianLink.   It is also useful sometimes to \nconsider ECANs that extend the traditional grap h \nformalism and involve links that point to links as well as to nodes.  The term Atom will be used to refer to either nodes \nor links.  Each Atom in an ECAN is weighted with two \nnumbers, called STI (short -term importance) and LTI \n(long -term importance).", "mimetype": "text/plain", "start_char_idx": 1059, "end_char_idx": 1537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ea77f12-1d3f-410a-825b-6db79ae05844": {"__data__": {"id_": "8ea77f12-1d3f-410a-825b-6db79ae05844", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1c3092c-c836-4d61-86b9-6afce0b7a4e8", "node_type": "1", "metadata": {}, "hash": "a0a7d68daa50a9b88a50f0f4acad7f8325cd102ec97e5a1693e2d1b3ff2fc120", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1515a848-c1fc-4637-9485-ca775b919e9c", "node_type": "1", "metadata": {}, "hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "class_name": "RelatedNodeInfo"}}, "text": "Ea ch Hebbian or InverseHebbian \nlink is weighted with a probability value.  \n The equations of an ECAN explain how the STI, LTI \nand Hebbian probability values get updated over time.  The metaphor underlying these equations is the interpretation of STI and LTI v alues as (separate) artificial currencies.  \nThe motivation for this metaphor has been elaborated somewhat in (Goertzel, 2007) and will not be recapitulated \nhere.", "mimetype": "text/plain", "start_char_idx": 1539, "end_char_idx": 1966, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2376e96b-0e5a-4e26-b840-329927592414": {"__data__": {"id_": "2376e96b-0e5a-4e26-b840-329927592414", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}}, "text": "The fact that STI (for instance) is a currency means \nthat the total amount of STI in the syst em is conserved \n(except in unusual instances where the ECAN controller  \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <1>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ndecides to introduce inflation or deflation and explicitly  \nmanipulate the amount of currency in circulation), a fact that makes the dynamics of an ECAN dramatically different than that  of, say, an attractor neural network (in \nwhich there is no law of conservation of activation).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 580, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2": {"__data__": {"id_": "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2376e96b-0e5a-4e26-b840-329927592414", "node_type": "1", "metadata": {}, "hash": "94c55ec4c9b0803e07e299c32cbf448eece0d6f80ec71338cbc52458d52a86a0", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}}, "text": "Conceptually, the STI value of an Atom is interpreted to \nindicate the immediate urgency of the Atom to the ECAN at a certain point in time; whereas the LTI v alue of an \nAtom indicates the amount of value the ECAN perceives in the retention of the Atom in memory (RAM).  An ECAN \nwill often be coupled with a \u201cForgetting \u201d process that \nremoves low -LTI Atoms from memory according to \ncertain heuristics.", "mimetype": "text/plain", "start_char_idx": 585, "end_char_idx": 991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "654dba60-7b35-41c1-aaa2-3cb551813d76": {"__data__": {"id_": "654dba60-7b35-41c1-aaa2-3cb551813d76", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2", "node_type": "1", "metadata": {}, "hash": "45a62ab0ac7191ab2a3de7187bccb83aaf7137d3539d602cc64d9e4c787298af", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}}, "text": "STI and LTI  values will generally vary continuously, but \nthe ECAN equations we introduce below contain the \nnotion of an AttentionalFocus (AF), consisting of those \nAtoms in the ECAN with the highest STI value s.  The AF \nis given its meaning by the existence of equation s that treat \nAtoms with STI above a certain threshold differently.", "mimetype": "text/plain", "start_char_idx": 996, "end_char_idx": 1337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5943c3e5-ea7b-4808-b8d2-34a8a20dba51": {"__data__": {"id_": "5943c3e5-ea7b-4808-b8d2-34a8a20dba51", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "654dba60-7b35-41c1-aaa2-3cb551813d76", "node_type": "1", "metadata": {}, "hash": "21e12306507cfb033834a9e35c78e8d6de96042db6afff189f4389fe6268d7e1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}}, "text": "Conceptually, the probability value of a HebbianLink \nfrom A to B is the odds that if A is in the AF, so is B; and \ncorrespondingly, the InverseHebbianLink from A to B is \nweighted with the o dds that if A is in the AF, then B is not.", "mimetype": "text/plain", "start_char_idx": 1341, "end_char_idx": 1575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d75ec1b-1b58-4d1a-883c-f69f0040514c": {"__data__": {"id_": "9d75ec1b-1b58-4d1a-883c-f69f0040514c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5943c3e5-ea7b-4808-b8d2-34a8a20dba51", "node_type": "1", "metadata": {}, "hash": "327e120867a56c6f9ee6d1c1c50befbc2ff0ddb78021a6bdc7fb3ed32f7951d4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "node_type": "1", "metadata": {}, "hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "class_name": "RelatedNodeInfo"}}, "text": "A critical aspect of the ECAN equations is that Atoms \nperiodically spread their STI and LTI to other Atoms that connect to them via Hebbian and InverseHebbianLinks; this is the ECAN analogue of activation spreadi ng in \nneural networks.", "mimetype": "text/plain", "start_char_idx": 1578, "end_char_idx": 1815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dd6d34c-673d-4dce-b686-4d637fa899af": {"__data__": {"id_": "3dd6d34c-673d-4dce-b686-4d637fa899af", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}}, "text": "Based on the strong corr espondences, one could \nplausibly  label ECANs as \u201cEconomic Neural Networks\u201d; \nhowever we have chosen not to go that path, as ECANs are not intended as plausible neural models, but rather as nonlinear dynamical systems engineered to fulfill certain \nfunctions within non -brain -emulative AGI systems.  \nIntegration into OpenCog and the NCE  \nThe OpenCog AGI framework, within which the current ECAN implementation exists, is a complex framework with a complex underlying th eory, and here we will only \nhint at some of its key aspects.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f370525-4dd4-4317-a39b-6a035dddcf52": {"__data__": {"id_": "3f370525-4dd4-4317-a39b-6a035dddcf52", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3dd6d34c-673d-4dce-b686-4d637fa899af", "node_type": "1", "metadata": {}, "hash": "23cec5f2b42ef5a7543c25ea829b49fe12772394f4c111d055ea178bcb8d7d74", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}}, "text": "OpenCog is an open -source \nsoftware framework designed to support the construction \nof multiple AI systems; and the current main thrust of work \nwithin OpenCog is the implementation of a specific A GI \ndesign called OpenCogPrime (OCP), which is presented in the online wikibook (Goertzel, 2008).  Much of the OpenCog software code, and many of the ideas in the OCP \ndesign, have derived from the open -sourcing of aspects of \nthe proprietary Novamente Cognit ion Engine, which has \nbeen described extensively in previous publications.", "mimetype": "text/plain", "start_char_idx": 563, "end_char_idx": 1098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "740a137d-5178-46ef-9e69-8417f32d5c64": {"__data__": {"id_": "740a137d-5178-46ef-9e69-8417f32d5c64", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f370525-4dd4-4317-a39b-6a035dddcf52", "node_type": "1", "metadata": {}, "hash": "6e5ed92253892d78ba85e23df7059aa983540f307e1bd063238810eebffd8bbd", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}}, "text": "The first key entity in the OpenCog software \narchitecture is the AtomTable, which is a repository for \nweighted, labeled hypergraph nodes and hyperedges.  In \nthe OpenCog implementat ion of ECANs, the nodes and \nlinks involved in the ECAN are stored here.  OpenCog also \ncontains an object called the CogServer, which wraps up an AtomTable as well as (among other objects) a Scheduler that schedules a set of MindAgent objects that each (whe n allocated processor time by the Scheduler) carry out cognitive operations involving the AtomTable.", "mimetype": "text/plain", "start_char_idx": 1102, "end_char_idx": 1645, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9da10ac4-3051-4d72-b978-328049d5c617": {"__data__": {"id_": "9da10ac4-3051-4d72-b978-328049d5c617", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "740a137d-5178-46ef-9e69-8417f32d5c64", "node_type": "1", "metadata": {}, "hash": "8edb004bac2979ca104e3d0b6d170b476b7d1108044283854e20ef14e3f7d12f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "node_type": "1", "metadata": {}, "hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "class_name": "RelatedNodeInfo"}}, "text": "The essence of the OCP design consists of a specific set of MindAgents designed to work together in a collaborative \nway in order to create a system that c arries out actions \noriented toward achieving goals (where goals are \nrepresented as specific nodes in the AtomTable, and actions are represented as Procedure objects indexed by Atoms in the AtomTable, and the utility of a procedure for achieving a goal is r epresented by a certain set of \nprobabilistic logical links in the AtomTable, etc.).", "mimetype": "text/plain", "start_char_idx": 1647, "end_char_idx": 2146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d98f34f-2f72-43fb-ae65-f40a531ef44c": {"__data__": {"id_": "4d98f34f-2f72-43fb-ae65-f40a531ef44c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2b712d43-6221-440e-a002-d03602b380b8", "node_type": "1", "metadata": {}, "hash": "882992dced222a40f0a0b154e52f6c1eba635427e1382ef29af53ad92adcfc4c", "class_name": "RelatedNodeInfo"}}, "text": "OpenCog is still at an experimental stage but has been used \nfor such projects as statistical language analysis, \nprobabilistic inference, and the control of virtual agents  in \nonline virtual worlds (see opencog.org).  \n So, in an OpenCog context, ECAN consists of a set of \nAtom types, and then a set of MindAgents carrying out \nECAN operations such as HebbianLinkUpdating and \nImportanceUpdating.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36c5231e-2425-4727-a927-f70fce261c29": {"__data__": {"id_": "36c5231e-2425-4727-a927-f70fce261c29", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d98f34f-2f72-43fb-ae65-f40a531ef44c", "node_type": "1", "metadata": {}, "hash": "131a907ad55f98112743b4cd5ee47c9ed93e4a0d7593cfabb107fd41b21f8b51", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "2b712d43-6221-440e-a002-d03602b380b8", "node_type": "1", "metadata": {}, "hash": "882992dced222a40f0a0b154e52f6c1eba635427e1382ef29af53ad92adcfc4c", "class_name": "RelatedNodeInfo"}}, "text": "OCP also requires many other MindA gents carrying out other cognitive processes such as \nprobabilistic logical inference according to the PLN system \n(Goertzel et al, 2008) and evolutionary procedure learning \naccording to the MOSES system (Looks, 2006).", "mimetype": "text/plain", "start_char_idx": 401, "end_char_idx": 655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b2b591d-6223-4813-a17a-e28c6d1b39f1": {"__data__": {"id_": "4b2b591d-6223-4813-a17a-e28c6d1b39f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}}, "text": "The \ninteroperation of the ECAN MindAge nts with these other \nMindAgents is a subtle issue that will be briefly discussed \nin the final section of the paper, but the crux is simple to understand.  \n The CogServer is understood to maintain a kind of \ncentral bank of STI and LTI funds.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 284, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50": {"__data__": {"id_": "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b2b591d-6223-4813-a17a-e28c6d1b39f1", "node_type": "1", "metadata": {}, "hash": "4849d7693462646c0ad6ac290e3e0dbc3dd8e8ac98fafac6a6b41efed7f2fb37", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}}, "text": "When a non -EAN \nMindAgent finds an Atom valuable, it sends that Atom a \ncertain amount of Stimulus, which results in that Atom\u2019s \nSTI and LTI values being increased (via equations to be presented below, that transfer STI and LTI funds from the CogServer to the Atoms in ques tion).  Then, the ECAN \nImportanceUpdating MindAgent carries out multiple \noperations, including some that transfer STI and LTI funds \nfrom s ome Atoms back to the CogServer.", "mimetype": "text/plain", "start_char_idx": 286, "end_char_idx": 736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "126f4762-aabd-4b1c-bc70-fe0799b95fc5": {"__data__": {"id_": "126f4762-aabd-4b1c-bc70-fe0799b95fc5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50", "node_type": "1", "metadata": {}, "hash": "56c74c5721e4efecdded478b75b299654596b55a01dc0e423a9c68f9b1ced111", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}}, "text": "Definition and Analysis of Variant 1  \n We now define a specific set of equations in ac cordance \nwith the ECAN conceptual framework described above.  \nWe define   \n\u20ac HSTI=s1,\uf04c,sn [ ] to be the vector of STI \nvalues, and \n  \n\u20ac C=c11,\uf04c,c1n\n\uf04d\uf04f\uf04d\ncn1,\uf04c,", "mimetype": "text/plain", "start_char_idx": 739, "end_char_idx": 988, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11e27bec-2a02-4e08-a07f-548853a4ecbf": {"__data__": {"id_": "11e27bec-2a02-4e08-a07f-548853a4ecbf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "126f4762-aabd-4b1c-bc70-fe0799b95fc5", "node_type": "1", "metadata": {}, "hash": "3b95220080b366a1ac84db1374b038c4e0af606d5f732638b2cbd359c7a82b76", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}}, "text": "\uf04c,cnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the connection matrix of \nHebbian probability values, where it is assumed that the \nexistence of a  HebbianLink or InverseHebbianLink \nbetween A and B are mutually exclusive possibilities.", "mimetype": "text/plain", "start_char_idx": 986, "end_char_idx": 1212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "395e24d6-de01-4143-be35-23074911de9b": {"__data__": {"id_": "395e24d6-de01-4143-be35-23074911de9b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11e27bec-2a02-4e08-a07f-548853a4ecbf", "node_type": "1", "metadata": {}, "hash": "004505880d8bf9906d42128950af3edf06075bb38a9b92ffb80e2766cbb1d7b9", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "node_type": "1", "metadata": {}, "hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "class_name": "RelatedNodeInfo"}}, "text": "We \nalso define \n  \n\u20ac CLTI=g11,\uf04c,g1n\n\uf04d\uf04f\uf04d\ngn1,\uf04c,gnn\uf8ee \n\uf8f0 \uf8ef \n\uf8ef \n\uf8ef \uf8f9 \n\uf8fb \uf8fa \n\uf8fa \n\uf8fa  to be the matrix of LTI \nvalues for each of the corresponding links.", "mimetype": "text/plain", "start_char_idx": 1213, "end_char_idx": 1358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63d3cd33-19a1-4e9d-94dc-00e702a3b83d": {"__data__": {"id_": "63d3cd33-19a1-4e9d-94dc-00e702a3b83d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}}, "text": "We assume an updating scheme in which, periodically, a \nnumbe r of Atoms are allocated Stimulus amounts, which \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <2>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ncauses the corresponding STI values to change according \nto the equations  \n \n\u20ac \u2200i:si=si\u2212rent +wages , \n \nwhere rent and wages are given by  \n \n\u20ac rent=Rent \u22c5max 0,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "704ce44f-9926-4c7d-bf09-208fd0b00092": {"__data__": {"id_": "704ce44f-9926-4c7d-bf09-208fd0b00092", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63d3cd33-19a1-4e9d-94dc-00e702a3b83d", "node_type": "1", "metadata": {}, "hash": "a28e37e11435db77159e128189c1fa77cfa880f2c2f678df4f8cd39768c2a3e4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}}, "text": "log20si\nrecentMaxSTI\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n2\uf8eb \n\uf8ed \uf8ec \n\uf8ec \n\uf8ec \uf8ec \uf8f6 \n\uf8f8 \uf8f7 \n\uf8f7 \n\uf8f7 \uf8f7 ,  if  si>0\n0,", "mimetype": "text/plain", "start_char_idx": 403, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46e8eb53-3933-4357-85e3-b02d260613d4": {"__data__": {"id_": "46e8eb53-3933-4357-85e3-b02d260613d4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "704ce44f-9926-4c7d-bf09-208fd0b00092", "node_type": "1", "metadata": {}, "hash": "44b484857ecc9d963dd518f6941ce1afd5d1e9d66f874d84bbb78a8febb61c67", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}}, "text": "if  si>0\n0,                                                          if  si\u22640\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \n \nand \n \n\u20ac wages =Wage Stimulus\npi\ni=1n\n\u2211,if  pi=1\nWage Stimulus\nn\u2212 pi\ni=1n\n\u2211,if  pi=0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f4 \n\uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4 \n\uf8f4 ,", "mimetype": "text/plain", "start_char_idx": 472, "end_char_idx": 680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d508dcf7-d57b-422a-b5dd-02abecb69bdd": {"__data__": {"id_": "d508dcf7-d57b-422a-b5dd-02abecb69bdd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46e8eb53-3933-4357-85e3-b02d260613d4", "node_type": "1", "metadata": {}, "hash": "ef399150364f792b6bace4942e32cf90b753b03e70f613be9840f546e8ef75a1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}}, "text": "where   \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{} is the cue \npattern for the pattern that is to be retieved.  \nAll quantities enclosed in angled brackets are system \nparameters, and LTI updating is accomplished using a completely analogous set of equations.  \n The chang ing STI values then cause updating of the \nconnection matrix, according to the \u201cconjunction\u201d equations.", "mimetype": "text/plain", "start_char_idx": 684, "end_char_idx": 1052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fed9fdc3-2d5a-486b-b4a6-0b4ee68bd6ef": {"__data__": {"id_": "fed9fdc3-2d5a-486b-b4a6-0b4ee68bd6ef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d508dcf7-d57b-422a-b5dd-02abecb69bdd", "node_type": "1", "metadata": {}, "hash": "fb55e202db70aa5b96e5c7f32d6b79d7f71e859c1012f897b480259d89788839", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "node_type": "1", "metadata": {}, "hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "class_name": "RelatedNodeInfo"}}, "text": "First define  \n \n\u20ac normi=si\nrecentMaxSTI,if si\u22650\nsi\nrecentMinSTI,if si<0\uf8f1 \n\uf8f2 \uf8f4 \n\uf8f3 \uf8f4 . \n \nNext define  \n \n\u20ac conj =Conjunction si,sj()=normi\u00d7normj   \n \nand  \n \n\u20ac \u2032 c ij=ConjDecay conj+1\u2212conj( )cij.", "mimetype": "text/plain", "start_char_idx": 1053, "end_char_idx": 1248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ca44850-60f8-4c2d-b9b0-57f2e3863e90": {"__data__": {"id_": "4ca44850-60f8-4c2d-b9b0-57f2e3863e90", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}}, "text": "Finally update the matrix elements by settin g \n \n\u20ac cij=cji=\u2032 c ij,if  \u2032 c ij\u22650\n\u2032 c ij,        if  \u2032 c ij<0\uf8f1 \n\uf8f2 \n\uf8f3 . \n \nWe are currently also experimenting with updating the \nconnection matrix in accordance with the equations suggested by Storkey (1997, 1998, 1999.)  \n  A key property of these equations is that both wages \npaid to, and rent paid by, each node are positively \ncorrelated to their STI values.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb1ff6b9-48ce-4c21-87bc-666983d445c7": {"__data__": {"id_": "bb1ff6b9-48ce-4c21-87bc-666983d445c7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ca44850-60f8-4c2d-b9b0-57f2e3863e90", "node_type": "1", "metadata": {}, "hash": "30adba1802bb1989a3258a95bf5be02d2cb90ca02f8f4e0ceb8f73ad9a163577", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}}, "text": "That is, the more important \nnodes are paid more for their services, but they also pay \nmore in rent.  \n A fixed percentage of the links with the lowest LTI \nvalues is then forgotten (which corresponds e quationally to \nsetting the LTI to 0).  \n Separately from the above, the process of Hebbian \nprobability updating is carried out via a diffusion process in which some nodes \u201ctrade\u201d STI utilizing a diffusion \nmatrix D, a version of the connection matrix C norma lized \nso that D is a left stochastic matrix.", "mimetype": "text/plain", "start_char_idx": 410, "end_char_idx": 920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c31bf44-ce91-46aa-a31f-e768460944f1": {"__data__": {"id_": "4c31bf44-ce91-46aa-a31f-e768460944f1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb1ff6b9-48ce-4c21-87bc-666983d445c7", "node_type": "1", "metadata": {}, "hash": "2f7517ccb30a96e68151d5f0a1ee4fa808553f20c17aed39663bf64c6ff18a5a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}}, "text": "D acts on a similarly \nscaled vector v, normalized so that v is equivalent to a \nprobability vector of STI values.   \n The decision about which nodes diffuse in each \ndiffusion cycle is carried out via a decision fu nction. We \ncurrently are working with two types of decision functions: \na standard threshold function, by which nodes diffuse if \nand only if the nodes are in the AF; and a stochastic decision function in which nodes diffuse with probability \n\u20ac tanh shape si\u2212FocusBoundary( ) ( )+1\n2, where shape and \nFocusBoundary are parameters.", "mimetype": "text/plain", "start_char_idx": 921, "end_char_idx": 1469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec2dbf9e-9371-4712-91ae-2c496f713cd1": {"__data__": {"id_": "ec2dbf9e-9371-4712-91ae-2c496f713cd1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c31bf44-ce91-46aa-a31f-e768460944f1", "node_type": "1", "metadata": {}, "hash": "e09d87ef39020cd7b1572a42f6525177ab0b9b6c0f77fc35675eb89742075df4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "node_type": "1", "metadata": {}, "hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "class_name": "RelatedNodeInfo"}}, "text": "The details of the diffusion process are as follows. First, \nconstruct the diffusion matrix from the entries in the \nconnection matrix as follows:  \n \n\u20ac If cij\u22650, then dij=cij,\nelse, set dji=\u2212cij. \n \nNext, we normalize the column s of D to make D a left \nstochastic matrix.", "mimetype": "text/plain", "start_char_idx": 1473, "end_char_idx": 1746, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5": {"__data__": {"id_": "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}}, "text": "Next, we normalize the column s of D to make D a left \nstochastic matrix. In so doing, we ensure that each node \nspreads no more that a \n\u20ac MaxSpread  proportion of its STI, \nby setting  \n \n\u20ac if dij\ni=1n\n\u2211 >MaxSpread : \n\u20ac dij=dij\u00d7MaxSpread\ndij\ni=1n\n\u2211,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bdb63763-b762-400b-b87f-ae36cfb35f15": {"__data__": {"id_": "bdb63763-b762-400b-b87f-ae36cfb35f15", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5", "node_type": "1", "metadata": {}, "hash": "3f12378c123c87499debde5c7a1febff0329917168e96513fadd865632c2cff3", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}}, "text": "for i\u2260j\ndjj=1\u2212MaxSpread\uf8f1 \n\uf8f2 \uf8f4 \uf8f4 \n\uf8f3 \uf8f4 \n\uf8f4  \nelse: \n\u20ac djj=1\u2212 dij\ni=1\ni\u2260jn\n\u2211 \n \nNow we obtain a scaled STI vector v by setting  \n \n  \n\u20ac minSTI =\ni\u22081,2,\uf04c,n { }minsi  and maxSTI =\ni\u22081,2,\uf04c,", "mimetype": "text/plain", "start_char_idx": 252, "end_char_idx": 434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0": {"__data__": {"id_": "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bdb63763-b762-400b-b87f-ae36cfb35f15", "node_type": "1", "metadata": {}, "hash": "a669599fa7ef2f0758dcff238ca2af67866ae48de90e036b666403e267ce62f9", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}}, "text": "2,\uf04c,n { }maxsi \n \n\u20ac vi=si\u2212minSTI\nmaxSTI\u2212minSTI \n \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <3>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nThe diffusion matrix is then used to update the node STIs  \n \n\u20ac \u2032 v =Dv \n \nand the STI values are rescaled to the interval \n\u20ac minSTI, maxSTI [ ].", "mimetype": "text/plain", "start_char_idx": 430, "end_char_idx": 753, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c888b2e-7dfe-40a3-aeb9-bf8c56f72c6a": {"__data__": {"id_": "1c888b2e-7dfe-40a3-aeb9-bf8c56f72c6a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0", "node_type": "1", "metadata": {}, "hash": "35eb6caf21020bdeb4d01ca3e5af8992b2a8cdeed674a7a6ae3ae73a81f8cd81", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "aa57e059-57a6-4dbc-82d2-770ab207e208", "node_type": "1", "metadata": {}, "hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "class_name": "RelatedNodeInfo"}}, "text": "maxSTI [ ].  \n In both the re nt and wage stage and in the diffusion \nstage, the total STI and LTI funds of the system each \nseparately form a conserved quantity: in the case of diffusion, the vector v is simply the total STI times a \nprobability vector.", "mimetype": "text/plain", "start_char_idx": 742, "end_char_idx": 996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89e65ffb-d683-4684-ac42-b6024f306cbe": {"__data__": {"id_": "89e65ffb-d683-4684-ac42-b6024f306cbe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7aac72e1-b0f2-498a-a05e-71766094c87d", "node_type": "1", "metadata": {}, "hash": "103e9eb9623f0ff9fed4585d06b478e62eb47a0869becb5fd5a6b587c394777a", "class_name": "RelatedNodeInfo"}}, "text": "To maintain overall system funds w ithin \nhomeostatic bounds, a mid -cycle tax and rent -adjustment \ncan be triggered if necessary; the equations currently used \nfor this are  \n \n\u2022 \n\u20ac Rent =recent stimulus awarded before update \u00d7Wage\nrecent size of AF; \n\u2022 \n\u20ac tax=x\nn, where x is the distance from the current \nAtomSpace bounds to the center  of the \nhomeostatic range for AtomSpace funds;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cd1764b-da9e-4729-bf31-92b63b9c9e25": {"__data__": {"id_": "2cd1764b-da9e-4729-bf31-92b63b9c9e25", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89e65ffb-d683-4684-ac42-b6024f306cbe", "node_type": "1", "metadata": {}, "hash": "4552449f4a6550db6857e1032b7bec78539abaa2984238feb6a2a080bade7aa6", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7aac72e1-b0f2-498a-a05e-71766094c87d", "node_type": "1", "metadata": {}, "hash": "103e9eb9623f0ff9fed4585d06b478e62eb47a0869becb5fd5a6b587c394777a", "class_name": "RelatedNodeInfo"}}, "text": "\u2022 \n\u20ac \u2200i:si=si\u2212tax \nInvestigation of Convergence Properties  \nNow we investigate some of the properties that the above \nECAN equations display when we use an ECAN defined by them as an associative memory netwo rk in the manner \nof a Hopfield network.  \n We consider a situation where the ECAN is supplied \nwith memories via a \u201ctraining\u201d phase in which one \nimprints it with a series of binary patterns of the form \n  \n\u20ac P=p1,\uf04c,pn [ ], with \n\u20ac pi\u22080,1{}.", "mimetype": "text/plain", "start_char_idx": 391, "end_char_idx": 842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0ff4020-d983-45a3-85b0-d7271108e0b4": {"__data__": {"id_": "d0ff4020-d983-45a3-85b0-d7271108e0b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cd1764b-da9e-4729-bf31-92b63b9c9e25", "node_type": "1", "metadata": {}, "hash": "46546bb16f073eaf202d5420c25efd09107813308f5cf98525905d402b5af7b6", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7aac72e1-b0f2-498a-a05e-71766094c87d", "node_type": "1", "metadata": {}, "hash": "103e9eb9623f0ff9fed4585d06b478e62eb47a0869becb5fd5a6b587c394777a", "class_name": "RelatedNodeInfo"}}, "text": "Nois y versions of \nthese patterns are then used as cue patterns during the \nretrieval process.  \n We obviously desire that the ECAN retrieve the stored \npattern corresponding to a given cue pattern. In order to \nachieve this goal, the ECAN must converge to the corr ect \nfixed point.", "mimetype": "text/plain", "start_char_idx": 843, "end_char_idx": 1127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6aa9061a-fd26-4762-8f7f-6bce5dd13371": {"__data__": {"id_": "6aa9061a-fd26-4762-8f7f-6bce5dd13371", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}}, "text": "Theorem:  For a given value of e in the STI rent \ncalculation, there is a subset of hyperbolic decision functions for which the ECAN dynamics converge to an attracting fixed point.  \n Proof:  Rent is  zero whenever \n\u20ac si\u2264recentMaxSTI\n20,  so we \nconsider this case first.  The updating process for the rent \nand wage stage can then be written as\n\u20ac fs()=s+constant .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9": {"__data__": {"id_": "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6aa9061a-fd26-4762-8f7f-6bce5dd13371", "node_type": "1", "metadata": {}, "hash": "3ce8c2072fa4396df225250d4d31aeeeace2146d1246d1c23d53a3b4e339b4c5", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}}, "text": "The \nnext stage is governed by the hyperbolic decision function  \n \n\u20ac gs()=tanh shape s-FocusBoundary( ) ( )+1\n2. \n \nThe entire updating sequence is obtained  by the \ncomposition   \n\u20ac g\uf06ff( )s(), whose derivative is then  \n   \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51(), \n \nwhich has magnitude less than 1 whenever -2 < shape < 2. \nWe next consider the case \n\u20ac si>recentMaxSTI\n20.", "mimetype": "text/plain", "start_char_idx": 366, "end_char_idx": 736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc": {"__data__": {"id_": "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9", "node_type": "1", "metadata": {}, "hash": "e64adfb5ce58b17ed7611f63f13477521082bdc38e772f1426d44029767b5287", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}}, "text": "We next consider the case \n\u20ac si>recentMaxSTI\n20. The function f  \nnow takes the form  \n \n\u20ac fs()=s\u2212log20s/recentMaxSTI ( )\n2+constant,  \n \nand we have  \n \n  \n\u20ac g\uf06ff( )\u2032=sech2fs()()\u22c5shape\n2\u22c51\u22121\ns\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7 .", "mimetype": "text/plain", "start_char_idx": 688, "end_char_idx": 895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3637f9ee-d5cc-48f5-9d4e-18428e594cbc": {"__data__": {"id_": "3637f9ee-d5cc-48f5-9d4e-18428e594cbc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc", "node_type": "1", "metadata": {}, "hash": "8e68382afbf5fac19eac7356b494612573b9b13fd6283ff0e3f081bffa3c121e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}}, "text": "which has magnitude less than 1 whenever \n\u20ac shape <2\u22c5recentMaxSTI\nrecentMaxSTI -20. Choosing the shape parameter to \nsatisfy \n\u20ac 0<shape <min 2, 2\u22c5recentMaxSTI\nrecentMaxSTI -20\uf8eb \n\uf8ed \uf8ec \uf8f6 \n\uf8f8 \uf8f7  then \nguarantees that \n  \n\u20ac g\uf06ff( )\u2032<1.", "mimetype": "text/plain", "start_char_idx": 899, "end_char_idx": 1127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9545c519-89ef-41ff-94e5-5089066dd525": {"__data__": {"id_": "9545c519-89ef-41ff-94e5-5089066dd525", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3637f9ee-d5cc-48f5-9d4e-18428e594cbc", "node_type": "1", "metadata": {}, "hash": "eb407612f7b02439e1f9af192bfdad21880f8c8999a3e03a81dbd19dbb105826", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "node_type": "1", "metadata": {}, "hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "class_name": "RelatedNodeInfo"}}, "text": "Finally,   \n\u20ac g\uf06ff maps the closed \ninterval [recentMinSti, recentMaxSTI] into itself, so \napplying the Contraction Mapping Theorem completes the proof.  \nDefinition and Analysis of Variant 2  \nThe ECAN variant described above has performed \ncompletely acceptably in our experimen ts so far; however \nwe have also experimented with an alternate variant, with different convergence properties.", "mimetype": "text/plain", "start_char_idx": 1128, "end_char_idx": 1519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c923514-3e96-4737-a3c7-7ab1d1531db7": {"__data__": {"id_": "1c923514-3e96-4737-a3c7-7ab1d1531db7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}}, "text": "In Variant 2, the dynamics of the ECAN are specifically designed so that a \ncertain conceptually intuitive function serves as a \nLiapunov function  of the dynamics.   \n At a given time t, for a given Atom indexed i, we define \ntwo quantities: OUT\ni(t) = the total amount that Atom i pays \nin rent and tax and diffusion during the time -t iteration of \nECAN ;  INi(t) = the total amount that Atom i receives in \ndiffusion, stimulus and welfare during the time -t iteration \nof ECAN .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7222d101-a3a5-4374-bd55-ee6a2680cd15": {"__data__": {"id_": "7222d101-a3a5-4374-bd55-ee6a2680cd15", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c923514-3e96-4737-a3c7-7ab1d1531db7", "node_type": "1", "metadata": {}, "hash": "b2385013bbb7485288c6aa929491da0a5ecd5f4bd5ca4f005649ad70d11082f9", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}}, "text": "Note that welfare is a new concept to  be \nintroduced below.  We then define DIFF i(t)  = |IN i(t)  - \nOUT i(t)| ; and define AVDIFF(t) as the average of DIFF i(t)  \nover all i in the ECAN.   \n The design goal of Variant 2 of the ECAN equations is \nto ensure that, if the parameters are tweaked appropriately, AVDIFF can serve as a (deterministic or stochastic, \ndepending on the details) Liapunov function for ECAN \ndynamics.", "mimetype": "text/plain", "start_char_idx": 484, "end_char_idx": 910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84e7d415-f40b-4b30-8b79-a701d2fc6c2e": {"__data__": {"id_": "84e7d415-f40b-4b30-8b79-a701d2fc6c2e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7222d101-a3a5-4374-bd55-ee6a2680cd15", "node_type": "1", "metadata": {}, "hash": "e044e24f9a2feaca0f09078c6ca48c9c9a24b64ee0ac4ba894d757f58e5bb0e0", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}}, "text": "This implies that with ap propriate parameters \nthe ECAN dynamics will converge toward a state where AVDIFF=0, meaning that no Atom is making any profit or \nincurring any loss.  It must be noted that this kind of \nconvergence is not always desirable, and sometimes one might want the p arameters set otherwise.", "mimetype": "text/plain", "start_char_idx": 912, "end_char_idx": 1222, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "210287bb-99d5-402d-b624-3a632204d66a": {"__data__": {"id_": "210287bb-99d5-402d-b624-3a632204d66a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84e7d415-f40b-4b30-8b79-a701d2fc6c2e", "node_type": "1", "metadata": {}, "hash": "240b3733c271a2b50c6c48fc1ad4ba559065ca103587c934ffe9c6eb40658667", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}}, "text": "But if one wants \nthe STI components of an ECAN to converge to some \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <4>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nspecific values, as for instance in a classic associative \nmemory application, Variant 2 can guarantee this easily.  \n In Variant 2, each ECAN cycle begins with rent \ncollection and welfare distribution, which occurs via \ncollecting rent via the Variant 1 equation, and then \nperforming the following two steps.", "mimetype": "text/plain", "start_char_idx": 1224, "end_char_idx": 1732, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ebc1059-4fa0-488b-8d83-2b6bd9222ff8": {"__data__": {"id_": "6ebc1059-4fa0-488b-8d83-2b6bd9222ff8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "210287bb-99d5-402d-b624-3a632204d66a", "node_type": "1", "metadata": {}, "hash": "3a89ef509e659dc770e49ed5510becd1986e8b6d07233cb1c58ced27f2a4587f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e6e98ea0-635b-4fe4-9424-b47a84863043", "node_type": "1", "metadata": {}, "hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "class_name": "RelatedNodeInfo"}}, "text": "Step A: calculate X, \ndefined as the positive part of the total amount by which AVDIFF has been increased via the  overall rent collection \nprocess.  Step B: redistribute X to needy Atoms as follows: For each Atom z, calculate the positive part of (OUT - IN), \ndefined as deficit(z).", "mimetype": "text/plain", "start_char_idx": 1734, "end_char_idx": 2017, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39be06f3-9820-42d9-98d4-7d8bf4a9f226": {"__data__": {"id_": "39be06f3-9820-42d9-98d4-7d8bf4a9f226", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}}, "text": "Distribute (X + e) wealth among all Atoms z, giving each Atom a percentage of X that is \nproportional to deficit(z), but never so much as to cause \nOUT < IN for any Atom (the welfare being given counts \ntoward IN).   Here e>0 ensures AVDIFF decrease; e=0 may \nbe appropriate if convergence is not required in a certain \nsituation.  \n Step B is the w elfare step, which guarantees that rent \ncollection will decrease AVDIFF.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9": {"__data__": {"id_": "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39be06f3-9820-42d9-98d4-7d8bf4a9f226", "node_type": "1", "metadata": {}, "hash": "d1b3ffbf2e08bccabf56a2a260ea8afc7cbcdc47e8d42af0225eed499f523e04", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}}, "text": "Step A calculates the \namount by which the rich have been made poorer, and uses this to make the poor richer.  In the case that the sum of deficit(z) over all nodes z is less than X, a mid -cycle rent \nadjustment may be triggered, calculated so that step B will decrease AVDIFF.   (I.e. we cut rent on the rich, if the poor don't need their money to stay out of deficit.)", "mimetype": "text/plain", "start_char_idx": 425, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "334731eb-0664-4639-812a-e9cfb52e78b3": {"__data__": {"id_": "334731eb-0664-4639-812a-e9cfb52e78b3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9", "node_type": "1", "metadata": {}, "hash": "26b3387d028668b052767a32e3fe446f0c4ae4d7e5c388c68e227b57d7435fa5", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}}, "text": "Similarly, in each Variant 2 ECAN cycle, there is a \nwage -paying proc ess, which involves the wage -paying \nequation from Variant 1 followed by two steps.  Step A: \ncalculate Y, defined as the positive part of the total amount \nby which AVDIFF has been increased via the overall wage \npayment process.  Step B: exert taxation based  on the \nsurplus Y as follows:  For each Atom z, calculate the \npositive part of (IN - OUT), defined as surplus(z).", "mimetype": "text/plain", "start_char_idx": 800, "end_char_idx": 1248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fd38d23-2ad0-4d41-a8c2-56f0517ca0ec": {"__data__": {"id_": "5fd38d23-2ad0-4d41-a8c2-56f0517ca0ec", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "334731eb-0664-4639-812a-e9cfb52e78b3", "node_type": "1", "metadata": {}, "hash": "b96011613be7797c130f5f1e094e4f9eccd5373c373942e7cf43fd849da87388", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "757ac2bf-2531-4356-a7f9-afedf4c00900", "node_type": "1", "metadata": {}, "hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "class_name": "RelatedNodeInfo"}}, "text": "Collect \n(Y + e1) wealth from all Atom z, collecting from each node \na percentage of Y that is proportional to surplus(z), but \nnever so much as to cause IN < OUT for any node (the \nnew STI being collected counts toward OUT).   \n In case the total of surplus(z) over all nodes z is less than \nY, one may trigger a mid -cycle wage adjustment, \ncalculated so that step B will decrease AVDIFF.   I.e. we \ncut wages since there is not enough surplus to support it.", "mimetype": "text/plain", "start_char_idx": 1252, "end_char_idx": 1712, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69": {"__data__": {"id_": "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}}, "text": "I.e. we \ncut wages since there is not enough surplus to support it.  \n Finally, in the Variant 2 ECAN cycle, diffusion is done a \nlittle differently, via iterating the following process: If \nAVDIFF has increased during the diffusion round so far, then choose a random node  whose diffusion would \ndecrease AVDIFF, and let it diffuse; if AVDIFF has \ndecreased during the diffusion round so far, then choose a \nrandom node whose diffusion would increase AVDIFF, \nand let it diffuse.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7353fbe9-e724-4ada-849d-6394f166642f": {"__data__": {"id_": "7353fbe9-e724-4ada-849d-6394f166642f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69", "node_type": "1", "metadata": {}, "hash": "950cac1690d2b3e07c0ff258d44ebef40a0a4fc249a53ca6b184a00538df81c1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}}, "text": "In carrying out these steps, we avoid letting the s ame node diffuse twice in the same round.  \nThis algorithm does not let all Atoms diffuse in each cycle, but it stochastically lets a lot of diffusion happen in a way \nthat maintains  AVDIFF constant.  The iteration may be \nmodified to bias toward an average decrease in AVDIFF.  \n The random element in the diffusion step, together with \nthe logic of the rent/welfare and wage/tax steps, combines \nto yield the result that for Variant 2 of ECAN dynamics, \nAVDIFF is a stochastic Lyaponov function.", "mimetype": "text/plain", "start_char_idx": 482, "end_char_idx": 1032, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfcb3baa-25cf-47ec-897d-4bcaf0842a70": {"__data__": {"id_": "bfcb3baa-25cf-47ec-897d-4bcaf0842a70", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7353fbe9-e724-4ada-849d-6394f166642f", "node_type": "1", "metadata": {}, "hash": "d09e6dc0fb692df6c3646632aaf5277cda8376b916e67aea952ca4dacf962dbe", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}}, "text": "The details of the p roof of this will be given elsewhere due to space \nconsiderations but the outline of the argument should be  \nclear from the construction of Variant 2.  And note that by setting the e and e1 parameter to 0, the convergence \nrequirement can be eliminated, allow ing the network to \nevolve more spontaneously as may be appropriate in some \ncontexts; these parameters allow one to explicitly adjust the convergence rate.   \n One may also derive results pertaining to the \nmeaningfulness of the attractors, in various special  cases.", "mimetype": "text/plain", "start_char_idx": 1034, "end_char_idx": 1584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58d204f0-3277-4072-b963-2877104fed8b": {"__data__": {"id_": "58d204f0-3277-4072-b963-2877104fed8b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bfcb3baa-25cf-47ec-897d-4bcaf0842a70", "node_type": "1", "metadata": {}, "hash": "f32bb92858bb0294d94e223323bb7de5113f0df3d952b648401f07d9fedc803e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "node_type": "1", "metadata": {}, "hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "class_name": "RelatedNodeInfo"}}, "text": "For instance, if we have a memory consisting of a set M of m nodes, and we imprint the memory on the ECAN by stimulating m nodes during an interval of time, then we \nwant to be able to show that the condition where precisely \nthose m nodes are in th e AF is a fixed -point attractor.  \nHowever, this is not difficult, because one must only show \nthat if these m nodes and none others are in the AF, this \ncondition will persist.  Rigorous proof of this and related theorems will appear in a follow -up paper.", "mimetype": "text/plain", "start_char_idx": 1587, "end_char_idx": 2095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d53beac-47e5-47ae-a228-28e2af2f4ab4": {"__data__": {"id_": "2d53beac-47e5-47ae-a228-28e2af2f4ab4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b958e4f5-8eca-48b9-8adc-be9ea9040702", "node_type": "1", "metadata": {}, "hash": "9b9af49ad9bb08a360d5bfcd8f0226070f4681affc794b92bcd5577e03382fdc", "class_name": "RelatedNodeInfo"}}, "text": "Associative  Memory  \nWe have carried out experiments gauging the performance of Variant 1 of ECAN as an associative memory, using the implementation of ECAN within OpenCog, and using both the conventional and Storkey Hebbian updating formulas.  Extensive disc ussion of these results (along with Variation \n2 results) will be deferred to a later publication due to \nspace limitations, but we will make a few relevant \ncomments here.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7473e1c-5880-4768-bda8-b805e3227cf4": {"__data__": {"id_": "d7473e1c-5880-4768-bda8-b805e3227cf4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d53beac-47e5-47ae-a228-28e2af2f4ab4", "node_type": "1", "metadata": {}, "hash": "0a760f0f9031d6d87143ed9c04eadf1fa8a4f96cc0c99dc6be9726338331378a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b958e4f5-8eca-48b9-8adc-be9ea9040702", "node_type": "1", "metadata": {}, "hash": "9b9af49ad9bb08a360d5bfcd8f0226070f4681affc794b92bcd5577e03382fdc", "class_name": "RelatedNodeInfo"}}, "text": "As with a Hopfield net memory, the memory capacity (defined as the number of memor ies that can be retrieved \nfrom the network with high accuracy) depends on the sparsity of the network, with denser networks leading to \ngreater capacity.", "mimetype": "text/plain", "start_char_idx": 440, "end_char_idx": 677, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d": {"__data__": {"id_": "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}}, "text": "In the ECAN case the capacity also \ndepends on a variety of parameters of the ECAN equations, \nand the p recise unraveling of these dependencies is a \nsubject of current research.  However, one interesting dependency has already been uncovered in our preliminary experimentation, which has to do with the size of the AF \nversus the size of the memories being stor ed. \n    Define the size of a memory (a pattern being imprinted) \nas the number of nodes that are stimulated during imprinting of that memory.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f046b2e0-29ef-4aca-8462-4e3bcf57410f": {"__data__": {"id_": "f046b2e0-29ef-4aca-8462-4e3bcf57410f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d", "node_type": "1", "metadata": {}, "hash": "9d862303cf44c83a07d8cabb83d6e32f43a5e73369f980b3427a8cdb1e48d706", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}}, "text": "In a classical Hopfield net \nexperiment, the mean size of a memory is usually around, \nsay, .2 -.5 of the number of n eurons.  In typical OpenCog \nassociative memory situations, we believe the mean size of a memory will be one or two orders of magnitude smaller than that, so that each memory occupies only a relatively small portion of the overall network.", "mimetype": "text/plain", "start_char_idx": 508, "end_char_idx": 865, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61e37d99-77c4-470d-8a56-c7c1fbd89819": {"__data__": {"id_": "61e37d99-77c4-470d-8a56-c7c1fbd89819", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f046b2e0-29ef-4aca-8462-4e3bcf57410f", "node_type": "1", "metadata": {}, "hash": "390683f7ed9a9025cb86078c1f62158f13a085b4ba3fb64eb79bcdf59967d08b", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}}, "text": "What we have found is that the memory capacity of an \nECAN is generally comparable to that of a Hopfield net \nwith the same number of nodes and links, if and only if the \nECAN parameters are tuned so that the memories being imprinted can fit into the AF.  That is, the AF threshold or \n(in the hyperbolic case) shape parameter must be tuned so that the size of the memories is not so large that the active nodes in a memory cannot stably fit into the AF.", "mimetype": "text/plain", "start_char_idx": 872, "end_char_idx": 1326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb": {"__data__": {"id_": "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61e37d99-77c4-470d-8a56-c7c1fbd89819", "node_type": "1", "metadata": {}, "hash": "4959ff2bd3ca6f33dad47aff435d1529b5c635caaae9ca75d8cb52115196f52f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}}, "text": "This \nAGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <5>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ntuning may be done adaptively by testing the impact of \ndifferent thr eshold/shape values on various memories of  \nthe appropriate size; or potentially a theoretical relationship between these quantities could be derived, but \nthis has not been done yet.  This is a reasonably satisfying \nresult given the cognitive foundation of ECAN: in loose \nterms what it means is that ECAN works best for \nremembering things that fit into its focus of attention during the imprinting process.", "mimetype": "text/plain", "start_char_idx": 1328, "end_char_idx": 1943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06589a63-7cf8-4ce0-bb77-23b7519d53bc": {"__data__": {"id_": "06589a63-7cf8-4ce0-bb77-23b7519d53bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb", "node_type": "1", "metadata": {}, "hash": "aa75a6a98e2122e6d03629c1253de10cc21701ee640c3a727bd76251fc97aa24", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "c2244cae-1cab-458e-92d8-476fdc951855", "node_type": "1", "metadata": {}, "hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "class_name": "RelatedNodeInfo"}}, "text": "Interaction between ECANs and other  \nOpenCog Components  \nOur analysis above has focused on the associativ e-memory \nproperties of the networks, however, from the perspective of their utility within OpenCog or other integrative AI systems, this is just one among many critical aspects of ECANs.", "mimetype": "text/plain", "start_char_idx": 1948, "end_char_idx": 2243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a07b7a52-511f-4a98-a681-3e77fa08fe61": {"__data__": {"id_": "a07b7a52-511f-4a98-a681-3e77fa08fe61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "In this final section we will discuss the broader \nintended utilizat ion of ECANs in OpenCog in more depth.  \n First of all, associative -memory functionality is directly \nimportant in OpenCogPrime because it is used to drive \nconcept creation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bef524b-9188-491d-b2f0-ba8a26e84747": {"__data__": {"id_": "1bef524b-9188-491d-b2f0-ba8a26e84747", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a07b7a52-511f-4a98-a681-3e77fa08fe61", "node_type": "1", "metadata": {}, "hash": "d8b38556e1ac8edee842b7280bf4a442e030520f5c484e916c9e48ca670c4c53", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "The OCP heuristic called \u201cmap formation\u201d creates new Nodes corresponding to prominen t \nattractors in the ECAN, a step that (according to our preliminary results) not only increases the  memory \ncapacity of the network beyond what can be achieved with \na pure ECAN but also enables attractors to be explicitly  \nmanipulated by PLN inference.  \n Equally important to associative memory is the \ncapability of ECANs to facilitate effective allocation of the attention of other cognitive processes to appropriate \nknowledge items (Atoms).", "mimetype": "text/plain", "start_char_idx": 246, "end_char_idx": 780, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24814402-beb4-46ad-a988-6e8b52fabbee": {"__data__": {"id_": "24814402-beb4-46ad-a988-6e8b52fabbee", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bef524b-9188-491d-b2f0-ba8a26e84747", "node_type": "1", "metadata": {}, "hash": "0afb62cea597b464652e4da16b0e79cea3fe5048419381e829160ef4a9bf29d1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "For example, one key role of \nECANs in OCP is to guide the forward and backward \nchaining processes of PLN (Probabilistic Logic Network) inference.", "mimetype": "text/plain", "start_char_idx": 781, "end_char_idx": 928, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66441850-c26f-4920-b4bb-31dd09585bbb": {"__data__": {"id_": "66441850-c26f-4920-b4bb-31dd09585bbb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "24814402-beb4-46ad-a988-6e8b52fabbee", "node_type": "1", "metadata": {}, "hash": "c89a18c8119f8a49f25fb22d13ba1e2234f84ba1867a5506dc3619a1cea21b34", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "At each step, the PLN inference chainer is faced \nwith a great number of inference steps from which to \nchoose; and a choice is made using a statistical \u201cbandit \nproblem\u201d mechanism t hat selects each possible inference \nstep with a probability proportional to its expected \n\u201cdesirability.\u201d  In this context, there is considerable appeal in the heuristic of weighting inference steps using probabilities proportional to the STI values of the Atoms \nthey contain.  One thus arrives at a combined PLN/EAN \ndynamic as follows:  \n \n1.", "mimetype": "text/plain", "start_char_idx": 930, "end_char_idx": 1459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a61dc099-0969-4535-9f2b-c99cf3162517": {"__data__": {"id_": "a61dc099-0969-4535-9f2b-c99cf3162517", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66441850-c26f-4920-b4bb-31dd09585bbb", "node_type": "1", "metadata": {}, "hash": "f22ef8206b97e5caa91b26b986f2d98c0da3bd2e0c05c7638e7c41a7a692257f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "One thus arrives at a combined PLN/EAN \ndynamic as follows:  \n \n1. An inference step is carried out, involving a \nchoice among multiple possible inference steps, which is made using STI -based weightings (and \nmade among Atoms that LTI weighting s have \ndeemed valuable enough to remain in RAM)  \n2. The Atoms involved in the inference step are rewarded with STI and LTI proportionally to the \nutility of the inference step (how much it \nincreases the confidence of Atoms in the system\u2019s memory)  \n3.", "mimetype": "text/plain", "start_char_idx": 1393, "end_char_idx": 1893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acb3faa5-db68-4d9c-a7cd-af0743e37625": {"__data__": {"id_": "acb3faa5-db68-4d9c-a7cd-af0743e37625", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a61dc099-0969-4535-9f2b-c99cf3162517", "node_type": "1", "metadata": {}, "hash": "12ba3272841b4478a8c2385dbf44763ed3743856c1df171a72ff219c61823e13", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "034f3096-dcf3-492e-b658-e398170d2f34", "node_type": "1", "metadata": {}, "hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "class_name": "RelatedNodeInfo"}}, "text": "The ECAN opera tes, and multiple Atom\u2019s \nimportance values are updated  \n4. Return to Step 1 if the inference isn\u2019t finished   An analogous interplay may occur between ECANs and the MOSES procedure learning algorithm that also plays a key role in OCP.", "mimetype": "text/plain", "start_char_idx": 1894, "end_char_idx": 2145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75b1eee5-4e21-4b9c-afe4-513ebd477f6a": {"__data__": {"id_": "75b1eee5-4e21-4b9c-afe4-513ebd477f6a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "It seems intuitively cle ar that the same attractor -\nconvergence properties highlighted in the present analysis of associative -memory behavior, will also be highly \nvaluable for the application of ECANs to attention \nallocation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43a68db3-de7b-46e1-a9ca-00cfc4346362": {"__data__": {"id_": "43a68db3-de7b-46e1-a9ca-00cfc4346362", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75b1eee5-4e21-4b9c-afe4-513ebd477f6a", "node_type": "1", "metadata": {}, "hash": "b442e676186e1d4137f0e3af09f96f6233611a3d7479ac30603d223fc7a8229d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "If a collection of Atoms is often collectively \nuseful for some cognitive process (such as PLN), then the \nassociative -memory -type behavior of ECANs means that \nonce a handful of the Atoms in the collection are found useful in a certain inference process, the other Atoms in the collection will get their STI sign ificantly boosted, and will \nbe likely to get chosen in subsequent portions of that same inference process.  This is exactly the sort of dynamics one \nwould like to see occur.", "mimetype": "text/plain", "start_char_idx": 232, "end_char_idx": 723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28f9323d-fa92-4fbb-bc85-f782dcfe061f": {"__data__": {"id_": "28f9323d-fa92-4fbb-bc85-f782dcfe061f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43a68db3-de7b-46e1-a9ca-00cfc4346362", "node_type": "1", "metadata": {}, "hash": "a4062b56edf7af110c3c7977e3cd756c7076c485b2fab33c98faf30d30d6eecc", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "This is exactly the sort of dynamics one \nwould like to see occur.  Systematic experimentation with \nthese interactions between ECAN and other OpenCog  \nprocesses is one of our research priorities going forwards.  \nReferences \nAmit, Daniel (1992).  Modeling Brain Function .  Cambridge University Press.  \nGoertzel, Ben (2006).  The Hidden Pattern .  Brown Walker.  \nGoertzel, Ben (2007). Virtual Easter Egg Hunting .  In Advances in Artificial \nGeneral Intelligence , IOS Press.  \nGoertzel, Ben (2008).", "mimetype": "text/plain", "start_char_idx": 657, "end_char_idx": 1160, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4": {"__data__": {"id_": "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28f9323d-fa92-4fbb-bc85-f782dcfe061f", "node_type": "1", "metadata": {}, "hash": "83010b91c3fc15076e22689586a242faab281ea5e6cf3d5097ae58d96bb8caa5", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "Goertzel, Ben (2008).  OpenCogPrime: Design for a Thinking Machine , online at \nhttp://www.opencog.org/wiki/OpenCogPrime:WikiBook  \nGoertzel, Ben, Matthew Ikle\u2019, Izabela Goertzel and Ari Heljakka.  Probabilistic \nLogic Networks.   Springer.  \nHutter, Marcus (2004).   Universal AI .  Springer.  \nLooks, Moshe (2006).  Competent Program Evolution .  PhD thesis in CS \ndepartment, Washington Universi ty at St. Louis.", "mimetype": "text/plain", "start_char_idx": 1139, "end_char_idx": 1554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3971a7e7-6b2c-4542-840a-e12beae42c35": {"__data__": {"id_": "3971a7e7-6b2c-4542-840a-e12beae42c35", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4", "node_type": "1", "metadata": {}, "hash": "7d24a65834e8709fbdfb6e74d5db5cb7f9054cf1b3f3dcd946ccca3bbf85ec3f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "PhD thesis in CS \ndepartment, Washington Universi ty at St. Louis. \nStorkey A.J. (1997) Increasing the capacity of the Hopfield network without \nsacrificing functionality , ICANN97 p451 -456. \nStorkey, Amos (1998). Palimpsest Memories:\udbff\udc14 A New High\udbff\udc08Capacity Forgetful \nLearning Rule for Hopfield Networks .  \nStorkey A.J.", "mimetype": "text/plain", "start_char_idx": 1488, "end_char_idx": 1808, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e722ffae-4b80-40cd-b448-ed89f8baa3a6": {"__data__": {"id_": "e722ffae-4b80-40cd-b448-ed89f8baa3a6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3971a7e7-6b2c-4542-840a-e12beae42c35", "node_type": "1", "metadata": {}, "hash": "b6cac1eb4b7ea6fbb6f324977f0420901a5f572d187415c60641e65f8b782912", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "node_type": "1", "metadata": {}, "hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "class_name": "RelatedNodeInfo"}}, "text": "Storkey A.J. and R. Valabregue (1999) The basins of attraction of a new Hopfield \nlearning rule , Neural Networks 12 869 -876.", "mimetype": "text/plain", "start_char_idx": 1796, "end_char_idx": 1922, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f0f307d-0247-4c93-a962-941215b424e0": {"__data__": {"id_": "0f0f307d-0247-4c93-a962-941215b424e0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}}, "text": "AGI-2009 - Published by Atlantis Press, \u00a9 the authors \n                                        <6>\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nSee discussions, st ats, and author pr ofiles f or this public ation at : https://www .researchgate.ne t/public ation/334769428\nAn Inferential Approach to Mining Su rprising Patterns in Hypergraphs\nChapt er \u00b7 July 2019\nDOI: 10.1007/978-3-030-27005-6_6\nCITATIONS\n2READS\n224\n2 author s,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3426f4a0-4591-43eb-b84d-ac97c8e5e374": {"__data__": {"id_": "3426f4a0-4591-43eb-b84d-ac97c8e5e374", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f0f307d-0247-4c93-a962-941215b424e0", "node_type": "1", "metadata": {}, "hash": "04a29bf765d44cc80f57de5cb04dddbd5e58c40c409ee5aa365c16d4805d15b2", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}}, "text": "including:\nNil Geisw eiller\n92 PUBLICA TIONS \u00a0\u00a0\u00a0251 CITATIONS \u00a0\u00a0\u00a0\nSEE PROFILE\nAll c ontent f ollo wing this p age was uplo aded b y Nil Geisw eiller  on 30 No vember 2022.\nThe user has r equest ed enhanc ement of the do wnlo aded file.\n\nAn Inferential Approach to Mining Surprising\nPatterns in Hypergraphs\nNil Geisweiller and Ben Goertzel\nSingularityNET Foundation, The Netherlands\n{nil,ben}@singularitynet.io\nAbstract.", "mimetype": "text/plain", "start_char_idx": 413, "end_char_idx": 832, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "681298e8-023c-445c-b8ca-5d73e64a7bda": {"__data__": {"id_": "681298e8-023c-445c-b8ca-5d73e64a7bda", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3426f4a0-4591-43eb-b84d-ac97c8e5e374", "node_type": "1", "metadata": {}, "hash": "e33a863455ca387b876a2099fbe992eb265c4cd3e192fe1799af81811619ee5d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}}, "text": "A novel pattern mining algorithm and a novel formal def-\ninition of surprisingness are introduced, both framed in the context of\nformal reasoning. Hypergraphs are used to represent the data in which\npatterns are mined, the patterns themselves, and the control rules for\nthe pattern miner. The implementation of these tools in the OpenCog\nframework, as part of a broader multi-algorithm approach to AGI, is\ndescribed.\nKeywords: Pattern Miner\u00b7Surprisingness\u00b7Reasoning\u00b7Hypergraphs.", "mimetype": "text/plain", "start_char_idx": 833, "end_char_idx": 1311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15f7a5f9-cc57-435b-a399-444957d02a1b": {"__data__": {"id_": "15f7a5f9-cc57-435b-a399-444957d02a1b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "681298e8-023c-445c-b8ca-5d73e64a7bda", "node_type": "1", "metadata": {}, "hash": "a35891e410035900b44fea618e9926ae27288b836dbb12f17e91acec57a812c0", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}}, "text": "Keywords: Pattern Miner\u00b7Surprisingness\u00b7Reasoning\u00b7Hypergraphs.\n1 Introduction\nPattern recognition is broadly recognized as a key aspect of general intelligence,\nas well as of many varieties of specialized intelligence. General intelligence can\nbe envisioned, among other ways, as the process of an agent recognizing patterns\nin itself and its environment, including patterns regarding which of its actions\ntend to achieve which goals in which contexts [5].", "mimetype": "text/plain", "start_char_idx": 1250, "end_char_idx": 1705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa4601c0-6b54-4a5e-954e-8fe0d97ad64e": {"__data__": {"id_": "fa4601c0-6b54-4a5e-954e-8fe0d97ad64e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15f7a5f9-cc57-435b-a399-444957d02a1b", "node_type": "1", "metadata": {}, "hash": "eceb4854cd88e9c20ca45b4e30c6a349be0a5de66e451c0cc41922542aaa9422", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "d391100b-91b0-4c50-b915-ab8622a68516", "node_type": "1", "metadata": {}, "hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "class_name": "RelatedNodeInfo"}}, "text": "The scope of pattern recognition algorithms in AI and allied disciplines is\nvery broad, including many specialized algorithms aimed at recognizing pat-\nterns in particular sorts of data such as visual data, auditory data or genomic\ndata. Among more general-purpose approaches to pattern recognition, so-called\n\u201dpattern mining\u201d plays a prominent role.", "mimetype": "text/plain", "start_char_idx": 1706, "end_char_idx": 2056, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "885da95a-b5a6-4466-8755-7aba3c2cbb4b": {"__data__": {"id_": "885da95a-b5a6-4466-8755-7aba3c2cbb4b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "82801c68-7461-45d0-8db4-eb16255cca29", "node_type": "1", "metadata": {}, "hash": "7705b4d38fe246a00c967b6ad34119282148c2f9f7b9382bbe1b9a2324edc315", "class_name": "RelatedNodeInfo"}}, "text": "Mining here refers to the process of\nsystematically searching a body of data to \ufb01nd a large number of patterns sat-\nisfying certain criteria. Most pattern mining algorithms are greedy in operation,\nmeaning they start by \ufb01nding simple patterns and then try to combine these\nto guide their search for more complex patterns, and iterate this approach a\nfew times.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd2631ef-da81-4a56-a503-e6eda1c05db7": {"__data__": {"id_": "cd2631ef-da81-4a56-a503-e6eda1c05db7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}}, "text": "Pattern mining algorithms tend to work at the syntactic level, such\nas subtree mining [2], where patterns are subtrees within a database of trees,\nand each subtree represents a concept containing all the trees consistent with\nthat subtree. This is both a limit and a strength. Limit because they cannot\nexpress arbitrary abstractions, and strength because they can be relatively e\ufb03-\ncient. Moreover even purely syntactic pattern miners can go a long way if much\nof the semantic knowledge is represented in syntax.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07b1c1b7-df4e-4ddc-858c-87fc62ea5600": {"__data__": {"id_": "07b1c1b7-df4e-4ddc-858c-87fc62ea5600", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd2631ef-da81-4a56-a503-e6eda1c05db7", "node_type": "1", "metadata": {}, "hash": "31336b8b468b61c6bf69199c5c46491d11ae9173ca3348c024ae49c19954971d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}}, "text": "For instance if the data con-\ntains human(John) and human\u21d2mortal a purely syntactic pattern miner will\nnot be able to take into account the implicit datum mortal(John) unless a step\n\n2 N. Geisweiller et al.\nof inference is formerly taken to make it visible. Another shortcoming of pattern\nmining is the volume of patterns it tends to produce. For that reason it can be\nuseful to rank the patterns according to interestingness [12]. One can also use\npattern mining in combination with other pattern recognition techniques, e.g.", "mimetype": "text/plain", "start_char_idx": 514, "end_char_idx": 1040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44dc1a75-9e66-4ae9-83f9-f454ee5027c1": {"__data__": {"id_": "44dc1a75-9e66-4ae9-83f9-f454ee5027c1", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07b1c1b7-df4e-4ddc-858c-87fc62ea5600", "node_type": "1", "metadata": {}, "hash": "75fada1db868027c084bf4beb5a7dd8db364ea26a19ef5f2b2fa04875e20d4db", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}}, "text": "One can also use\npattern mining in combination with other pattern recognition techniques, e.g.\nevolutionary programming or logical inference.\nHere we present a novel approach to pattern mining that combines semantic\nwith syntactic understanding of patterns, and that uses a sophisticated measure\nof pattern surprisingness to \ufb01lter the combinatorial explosion of patterns. The\nsurprisingness measure and the semantic aspect of patterns are handled via\nembedding the pattern mining process in an inference engine, operating on a\nhighly general hypergraph-based knowledge representation.", "mimetype": "text/plain", "start_char_idx": 946, "end_char_idx": 1530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd": {"__data__": {"id_": "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "44dc1a75-9e66-4ae9-83f9-f454ee5027c1", "node_type": "1", "metadata": {}, "hash": "86a0ada44b8d68d30b0a6dac07f394e110dc79f35650e77eaab2387a14d7e2a1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}}, "text": "1.1 Contribution\nA pattern miner algorithm alongside a measure of surprisingness designed to\n\ufb01nd patterns in hypergraph database are introduced. Both are implemented on\nthe OpenCog framework [6], on top of the Uni\ufb01ed Rule Engine , URE for short,\nthe reasoning engine of OpenCog. Framing pattern mining as reasoning provides\nthe following advantages:\n1. Enable hybridizations between syntactic and semantic pattern mining.\n2. Allow to handle the full notion of surprisingness, as will be further shown.\n3. O\ufb00er more transparency.", "mimetype": "text/plain", "start_char_idx": 1531, "end_char_idx": 2059, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03397da8-70c2-4a37-89c3-235fb95c17da": {"__data__": {"id_": "03397da8-70c2-4a37-89c3-235fb95c17da", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd", "node_type": "1", "metadata": {}, "hash": "573bf034916381246d48498c741e24d3016df55bb7f562a98389c21584c61d43", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "node_type": "1", "metadata": {}, "hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "class_name": "RelatedNodeInfo"}}, "text": "3. O\ufb00er more transparency. Produced knowledge can be reasoned upon. Rea-\nsoning steps selected during mining can be represented as data for subsequent\nmining and reasoning, enabling meta-learning by leveraging URE\u2019s inference\ncontrol mechanism.", "mimetype": "text/plain", "start_char_idx": 2033, "end_char_idx": 2277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d8024f4-1756-4db1-8eb1-907f492dcbb2": {"__data__": {"id_": "3d8024f4-1756-4db1-8eb1-907f492dcbb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}}, "text": "The last point, although already important as it stands, goes further than it may\nat \ufb01rst seem. One of the motivations to have a pattern miner in OpenCog is to\nmine inference traces, to discover control rules and apply these control rules to\nspeed up reasoning, akin to a Heuristic Algorithmic Memory [9] for reasoning.\nBy framing not only pattern mining but more generally learning as reasoning\nwe hope to kickstart a virtuous self-improvement cycle.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10b15a04-60a5-41b7-9452-bbc2daa5c635": {"__data__": {"id_": "10b15a04-60a5-41b7-9452-bbc2daa5c635", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d8024f4-1756-4db1-8eb1-907f492dcbb2", "node_type": "1", "metadata": {}, "hash": "f4dc8d7caf55737a0b5a68a8d30c0959e0a86e892755f674a7004d0ed254deda", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}}, "text": "Towards that end more\ncomponents of OpenCog, such as MOSES [8], an evolutionary program learner,\nare in the process of being ported to the URE.\nFraming learning as reasoning is not without drawbacks as more transparency\ncomes at a computational cost. However by carefully partitioning transpar-\nent/costly versus opaque/e\ufb03cient computations we hope to reach an adequate\nbalance between e\ufb03ciency and open-endedness.", "mimetype": "text/plain", "start_char_idx": 452, "end_char_idx": 866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "888ecc74-47e4-4d9d-b442-46f9920b3b8d": {"__data__": {"id_": "888ecc74-47e4-4d9d-b442-46f9920b3b8d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10b15a04-60a5-41b7-9452-bbc2daa5c635", "node_type": "1", "metadata": {}, "hash": "9110be3ccc54b761cc49f312c86a1328f7fb01384ee902fb34b92533216af7b2", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}}, "text": "For instance in the case of evolu-\ntionary programming, decisions pertaining to what regions of the program space\nto explore is best processed as reasoning, given the importance and the cost of\nsuch operation. While more systematic operations such as evaluating the \ufb01tness\nof a candidate can be left as opaque. One may draw a speculative analogy with\nthe distinction between conscious and unconscious processes.", "mimetype": "text/plain", "start_char_idx": 867, "end_char_idx": 1278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13b044c4-c3bd-428f-8a0c-5c86bc26340e": {"__data__": {"id_": "13b044c4-c3bd-428f-8a0c-5c86bc26340e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "888ecc74-47e4-4d9d-b442-46f9920b3b8d", "node_type": "1", "metadata": {}, "hash": "ee813eb9115a825701e8a3a0c687251fc0f371cef6fd68ec882a801c20d70b55", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}}, "text": "One may draw a speculative analogy with\nthe distinction between conscious and unconscious processes.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 3\n1.2 Outline\nIn Section 2 a pattern mining algorithm over hypergraphs is presented; it is\nframed as reasoning in Section 3. In Section 4 a de\ufb01nition of surprisingness is\nprovided, and a more specialized implementation is derived from it. Then, in\nSection 5 an example of how it can be framed as reasoning is presented, both\nfor the specialized and abstract de\ufb01nitions of surprisingness.", "mimetype": "text/plain", "start_char_idx": 1178, "end_char_idx": 1736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10b83668-f8dc-410e-9068-b9b3162a90e4": {"__data__": {"id_": "10b83668-f8dc-410e-9068-b9b3162a90e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13b044c4-c3bd-428f-8a0c-5c86bc26340e", "node_type": "1", "metadata": {}, "hash": "970a7487284c6da0ff5b1e73ba0f131510c01217be5fa7804a822abd42fec74d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "b209620d-edf9-4ee9-8bec-c511561b5272", "node_type": "1", "metadata": {}, "hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "class_name": "RelatedNodeInfo"}}, "text": "2 Pattern Mining in Hypergraph Database\n2.1 AtomSpace: Hypergraph Database\nLet us \ufb01rst rapidly recall what is the AtomSpace [6], the hypergraph knowledge\nstore with which we shall work here. The AtomSpace is the OpenCog AGI frame-\nwork\u2019s primary data storage solution. It is a labeled hypergraph particularly\nsuited for representing symbolic knowledge, but is also capable of representing\nsub-symbolic knowledge (probabilities, tensors, etc), and most importantly com-\nbinations of the two.", "mimetype": "text/plain", "start_char_idx": 1737, "end_char_idx": 2227, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844": {"__data__": {"id_": "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "In the OpenCog terminology, edges of that hypergraph are\ncalled links, vertices are called nodes , and atoms are either links or nodes.\nFor example one may express that cars are vehicles with\n(Inheritance (Concept \"car\") (Concept \"vehicle\"))\nInheritance is a link connecting two concept nodes, carand vehicle .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "668e7c9f-4385-4926-b145-788a8e4ab66c": {"__data__": {"id_": "668e7c9f-4385-4926-b145-788a8e4ab66c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844", "node_type": "1", "metadata": {}, "hash": "9b60cdc2905828269caa5312981d932940bbeb9f28b4edc986777bbec0292167", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "If one\nwishes to express the other way around, how much vehicles are cars, then one\ncan attach the inheritance with a truth value\n(Inheritance (stv 0.4 0.8) (Concept \"vehicle\") (Concept \"car\"))\nwhere 0.4 represents a probability and 0.8 represents a con\ufb01dence.\nStoring knowledge as hypergraph rather than collections of formulae allows\nto rapidly query atoms and how they relate to other atoms.", "mimetype": "text/plain", "start_char_idx": 311, "end_char_idx": 705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0": {"__data__": {"id_": "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "668e7c9f-4385-4926-b145-788a8e4ab66c", "node_type": "1", "metadata": {}, "hash": "fb80aca456b3aead8a1a86fc3b4144c373923f07593b1424855d6a3befe4e0a4", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "2.2 Pattern Matching\nOpenCog comes with a pattern matcher , a component that can query the Atom-\nSpace, similar in spirit to SQL, but di\ufb00erent in several aspects. For instance\nqueries are themselves programs represented as atoms in the AtomSpace. This\ninsures re\ufb02exivity where queries can be queried or produced by queries.", "mimetype": "text/plain", "start_char_idx": 706, "end_char_idx": 1029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f4c3da8-71af-46fd-91a9-a1a9dd58b264": {"__data__": {"id_": "6f4c3da8-71af-46fd-91a9-a1a9dd58b264", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0", "node_type": "1", "metadata": {}, "hash": "968735809f773ee973704448b04c1177cce66958894bc48f00c260f6b7b94890", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "This\ninsures re\ufb02exivity where queries can be queried or produced by queries.\nHere\u2019s an example of such a query\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nwhich fetches instances of transitivity of inheritance in the AtomSpace. For in-\nstance if the AtomSpace contains\n\n4 N. Geisweiller et al.", "mimetype": "text/plain", "start_char_idx": 953, "end_char_idx": 1310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58e61e39-eceb-4384-9db6-bb9ecb926f94": {"__data__": {"id_": "58e61e39-eceb-4384-9db6-bb9ecb926f94", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f4c3da8-71af-46fd-91a9-a1a9dd58b264", "node_type": "1", "metadata": {}, "hash": "f3076376ab96c23e49ae65cab8419cb2444fdd120176cd1c9f10568cc3aa5c4a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "For in-\nstance if the AtomSpace contains\n\n4 N. Geisweiller et al.\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\n(Inheritance (Concept \"mammal\") (Concept \"animal\"))\n(Inheritance (Concept \"square\") (Concept \"shape\"))\nit retrieves\n(Set (List (Concept \"cat\") (Concept \"mammal\") (Concept \"animal\")))\nwhere cat,mammal andanimal are associated to variable $X,$Yand$Zaccording\nto the pre\ufb01x order of the query, but square andshape are not retrieved because\nthey do not exhibit transitivity.", "mimetype": "text/plain", "start_char_idx": 1245, "end_char_idx": 1729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5460ff6-5527-4729-b38d-26d955dc8837": {"__data__": {"id_": "f5460ff6-5527-4729-b38d-26d955dc8837", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58e61e39-eceb-4384-9db6-bb9ecb926f94", "node_type": "1", "metadata": {}, "hash": "17ffe8b08974040d93d96d4306d844dfeac5a6fdb7c030e26ef9f9e2f27e7f0f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "83ce28df-2b6c-4272-a60c-062c4afece97", "node_type": "1", "metadata": {}, "hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "class_name": "RelatedNodeInfo"}}, "text": "The construct Setrepresents a set of atoms,\nand List in this context represents tuples of values. The construct Getmeans\nretrieve. The construct Present means that the arguments are patterns to be\nconjunctively matched against the data present in the AtomSpace. We also call\nthe arguments of Present ,clauses , and say that the pattern is a conjunction of\nclauses .", "mimetype": "text/plain", "start_char_idx": 1730, "end_char_idx": 2095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6470c3e0-540a-4b63-b550-99fb7a144731": {"__data__": {"id_": "6470c3e0-540a-4b63-b550-99fb7a144731", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}}, "text": "In addition, the pattern matcher can rewrite. For instance a transitivity rule\ncould be implemented with\n(Bind (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\")))\n(Inheritance (Variable \"$X\") (Variable \"$Z\")))\nThe pattern matcher provides the building blocks for the reasoning engine. In\nfact the URE is, for the most part, pattern matching + uni\ufb01cation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3e752d3-841f-472d-8ab3-a51caee198f9": {"__data__": {"id_": "d3e752d3-841f-472d-8ab3-a51caee198f9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6470c3e0-540a-4b63-b550-99fb7a144731", "node_type": "1", "metadata": {}, "hash": "5abeb86871ef9b7abe653e035989bc7a8061b88fa592db93601abb95a92d3cac", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}}, "text": "The collection\nof atoms that can be executed in OpenCog, to query the atomspace, reason or\nsuch, forms a language called Atomese .\n2.3 Pattern Mining as Inverse of Pattern Matching\nThe pattern miner solves the inverse problem of pattern matching. It attempts\nto \ufb01nd queries that would retrieve a certain minimum number of matches. This\nnumber is called the support in the pattern mining terminology [1,2].\nIt is worth mentioning that the pattern matcher has more constructs than\nGet,Present andBind ; for declaring types, expressing preconditions, and per-\nforming general computations.", "mimetype": "text/plain", "start_char_idx": 405, "end_char_idx": 991, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c92d4036-793d-465b-94d2-ee31c907ac42": {"__data__": {"id_": "c92d4036-793d-465b-94d2-ee31c907ac42", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3e752d3-841f-472d-8ab3-a51caee198f9", "node_type": "1", "metadata": {}, "hash": "2e13076db72aa0c670fbdc9d892ff13779ef5807907a033bd8e86602bf3c288a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}}, "text": "However the pattern miner only supports a subset\nof constructs due to the inherent complexity of such expressiveness.\n2.4 High Level Algorithm of the Pattern Miner\nBefore showing how to express pattern mining as reasoning, let us explain the\nalgorithm itself.\nOur pattern mining algorithm operates like most pattern mining algorithms\n[2] by greedily searching the space of frequent patterns while pruning the parts\nthat do not reach the minimum support. It typically starts from the most ab-\nstract one, the toppattern, constructing specializations of it and only retain those\nthat have enough support, then repeat.", "mimetype": "text/plain", "start_char_idx": 992, "end_char_idx": 1607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1890a880-585e-4161-af3d-138fb313accd": {"__data__": {"id_": "1890a880-585e-4161-af3d-138fb313accd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c92d4036-793d-465b-94d2-ee31c907ac42", "node_type": "1", "metadata": {}, "hash": "ad5331cc4c85255400ee83de54847733a809b0eb0ae3c9f8be608e3a5bf7c18b", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}}, "text": "The apriori property [1] guaranties that\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 5\nno pattern with enough support will be missed based on the fact that patterns\nwithout enough support cannot have specializations with enough support. More\nformally, given a database D, a minimal support Sand an initialize collection C\nof patterns with enough support, the mining algorithm is as follows\n1. Select a pattern PfromC.\n2. Produce a shallow specialization QofPwith support equal to or above S.\n3.", "mimetype": "text/plain", "start_char_idx": 1608, "end_char_idx": 2128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08366056-1fb3-499c-bed3-a3374071986b": {"__data__": {"id_": "08366056-1fb3-499c-bed3-a3374071986b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1890a880-585e-4161-af3d-138fb313accd", "node_type": "1", "metadata": {}, "hash": "16b2dc76874d7f285c760d1e29116d64c05ecc8fb2a0050ec29bc1ca671dff5a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "35fe60d5-9729-4613-af55-ea0344f5ba4d", "node_type": "1", "metadata": {}, "hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "class_name": "RelatedNodeInfo"}}, "text": "Produce a shallow specialization QofPwith support equal to or above S.\n3. Add QtoC, remove Pif all its shallow specializations have been produced.\n4. Repeat till a termination criterion has been met.", "mimetype": "text/plain", "start_char_idx": 2055, "end_char_idx": 2254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3efa6881-bc15-4b5f-b1ef-90b2478e157c": {"__data__": {"id_": "3efa6881-bc15-4b5f-b1ef-90b2478e157c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "3bda7171-3737-44d5-bece-ce2cf32331b9", "node_type": "1", "metadata": {}, "hash": "59f708f45fb5720993e4a239e8b2ca3febb68aade5779606aedf4b506a09f1da", "class_name": "RelatedNodeInfo"}}, "text": "4. Repeat till a termination criterion has been met.\nThe pattern collection Cis usually initialized with the top pattern\n(Get (Present (Variable \"$X\")))\nthat matches the whole database, and from which all subsequent patterns are\nspecialized.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f": {"__data__": {"id_": "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}}, "text": "A shallow specialization is a specialization such that the expansion\nis only a level deep. For instance, if Dis the 3 inheritances links of Subsection\n2.2 (cat is a mammal, a mammal is an animal and square is a shape), a shallow\nspecialization of the top pattern could be\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nwhich would match all inheritance links, thus have a support of 3.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 400, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d41f3050-1f04-4c65-ac40-be3a391aad84": {"__data__": {"id_": "d41f3050-1f04-4c65-ac40-be3a391aad84", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f", "node_type": "1", "metadata": {}, "hash": "2b67fd48f143be878cdf96f00bbcc4e9cf61e477a160aba15af4086c8807b396", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}}, "text": "A subsequent\nshallow specialization of it could be\n(Get (Present (Inheritance (Concept \"cat\") (Variable \"$Y\"))))\nwhich would only match\n(Inheritance (Concept \"cat\") (Concept \"mammal\"))\nand have a support of 1. So if the minimum support Sis 2, this one would\nbe discarded. In practice the algorithm is complemented by heuristics to avoid\nexhaustive search, but that is the core of it.", "mimetype": "text/plain", "start_char_idx": 401, "end_char_idx": 784, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72274b31-0107-4bb5-adb3-647f06a9c264": {"__data__": {"id_": "72274b31-0107-4bb5-adb3-647f06a9c264", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d41f3050-1f04-4c65-ac40-be3a391aad84", "node_type": "1", "metadata": {}, "hash": "5639ce8ff65aa685a33e6b1573726784dee004e4d54468ff1288570dbdcd4d07", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}}, "text": "3 Framing Pattern Mining as Reasoning\nThe hardest part of the algorithm above is step 1, selecting which pattern to\nexpand; this has the biggest impact on how the space is explored. When pat-\ntern mining is framed as reasoning such decision corresponds to a premise or\nconclusion selection . Let us formalize the type of propositions we need to prove\nin order to search the space of patterns. For sake of conciseness we will use a\nhybridization between mathematics and Atomese, it being understood that all\ncan be formalized in Atomese.", "mimetype": "text/plain", "start_char_idx": 785, "end_char_idx": 1321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df92c951-b195-4213-8bd8-686c3c4fb161": {"__data__": {"id_": "df92c951-b195-4213-8bd8-686c3c4fb161", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72274b31-0107-4bb5-adb3-647f06a9c264", "node_type": "1", "metadata": {}, "hash": "19a6f2ed74431bfd0c9dc0157d961bd3daebd66ce6ed4a1ad7a85f0b38e593ac", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}}, "text": "Given a database Dand a minimum support S\nwe want to instantiate and prove the following theorem\nS\u2264support (P,D)\nwhich expresses that pattern Phas enough support with respect to the data\nbaseD. To simplify we introduce the predicate minsup (P, S,D) as a shorthand\nforS\u2264support (P,D). The primary inference rule we need is (given in Gentzen\nstyle),\n\n6 N. Geisweiller et al.", "mimetype": "text/plain", "start_char_idx": 1322, "end_char_idx": 1694, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6bdb32f-365a-410f-8d36-cc20eba47ac3": {"__data__": {"id_": "e6bdb32f-365a-410f-8d36-cc20eba47ac3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df92c951-b195-4213-8bd8-686c3c4fb161", "node_type": "1", "metadata": {}, "hash": "88e2ce7bd76e14a334924bd992cfdb7c51f49c38b5204a08ccbfd22327775189", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "00e71b59-1d3c-40fe-ba95-f28f456faa39", "node_type": "1", "metadata": {}, "hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "class_name": "RelatedNodeInfo"}}, "text": "minsup (Q, S,D) spec (Q, P)(AP)minsup (P, S,D)\nexpressing that if Qhas enough support, and Qis a specialization of P, then\nPhas enough support, essentially formalizing the apriori property (AP). We\ncan either apply such rule in a forward way, top-down, or in a backward way,\nbottom-up.", "mimetype": "text/plain", "start_char_idx": 1695, "end_char_idx": 1980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0cecfe5-c34e-4996-ba27-8b80d728a8c9": {"__data__": {"id_": "c0cecfe5-c34e-4996-ba27-8b80d728a8c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}}, "text": "If we search from more abstract to more specialized we want to\nuse it in a backward way. Meaning the reasoning engine needs to choose P\n(conclusion selection from minsup (P, S,D)) and then construct a specialization\nQ. In practice that rule is actually written backward so that choosing Pamounts\nto a premise selection , but is presented here this way for expository purpose.\nThe de\ufb01nition of spec is left out, but it is merely a variation of the subtree\nrelationship accounting for variables.\nOther heuristic rules can be used to infer knowledge about minsup .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6": {"__data__": {"id_": "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0cecfe5-c34e-4996-ba27-8b80d728a8c9", "node_type": "1", "metadata": {}, "hash": "48b377146aefe3d57b55a70ba49914060c02ea242324c95a6c268b82c55fcf52", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}}, "text": "Other heuristic rules can be used to infer knowledge about minsup . They are\nheuristics because unlike the apriori property, they do not guaranty complete-\nness, but can speed-up the search by eliminating large portions of the search\nspace.", "mimetype": "text/plain", "start_char_idx": 494, "end_char_idx": 734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbd63e28-8a46-4a13-9136-3731b4bc7b86": {"__data__": {"id_": "dbd63e28-8a46-4a13-9136-3731b4bc7b86", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6", "node_type": "1", "metadata": {}, "hash": "825d18d0c3454b87f99a538042cc737ed77856c0062342d4807b9ef4325e4234", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}}, "text": "For instance the following rule\nminsup (P, S,D) minsup (Q, S,D) R(P\u2297Q)(CE)minsup (P\u2297Q, S,D)\nexpresses that if PandQhave enough support, and a certain combination P\u2297Q\nhas a certain property R, then such combination has enough support. Such rule\ncan be used to build the conjunction of patterns.", "mimetype": "text/plain", "start_char_idx": 735, "end_char_idx": 1028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8dcbeed-9812-41d7-8b8c-7945ef76f63a": {"__data__": {"id_": "f8dcbeed-9812-41d7-8b8c-7945ef76f63a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dbd63e28-8a46-4a13-9136-3731b4bc7b86", "node_type": "1", "metadata": {}, "hash": "83d880f33488ffbaacbcf458fd118ab73ccab33b45154f808c85eff6f69b07a3", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}}, "text": "Such rule\ncan be used to build the conjunction of patterns. For instance given PandQ\nboth equal to\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))))\nOne can combine them (joint by variable $Y) to form\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nThe property Rhere is that both clauses must share at least one joint variable\nand the combination must have its support above or equal to the minimum\nthreshold.", "mimetype": "text/plain", "start_char_idx": 969, "end_char_idx": 1451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfce8e9f-a1c8-43e6-9fe9-c5fe8889a35f": {"__data__": {"id_": "bfce8e9f-a1c8-43e6-9fe9-c5fe8889a35f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8dcbeed-9812-41d7-8b8c-7945ef76f63a", "node_type": "1", "metadata": {}, "hash": "995f45bcc0fc9c278a76d4479559f783bdccb4d5d177d4e605abf15cb3b553f7", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "92c54c82-d608-40fc-b2e4-9add7448dbae", "node_type": "1", "metadata": {}, "hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "class_name": "RelatedNodeInfo"}}, "text": "4 Surprisingness\nEven with the help of the apriori property and additional heuristics to prune\nthe search, the volume of mined patterns can still be overwhelming. For that it\nis helpful to assign to the patterns a measure of interestingness . This is a broad\nnotion and we will restrict our attention to the sub-notion of surprisingness , that\ncan be de\ufb01ned as what is contrary to expectations .\nJust like for pattern mining, surprisingness can be framed as reasoning. They\nare many ways to formalize it.", "mimetype": "text/plain", "start_char_idx": 1452, "end_char_idx": 1956, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de95fd07-02e8-4a7d-944d-7cbb1b3e974d": {"__data__": {"id_": "de95fd07-02e8-4a7d-944d-7cbb1b3e974d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}}, "text": "They\nare many ways to formalize it. We tentatively suggest that in its most general\nsense, surprisingness may be the considered as the di\ufb00erence of outcome between\ndi\ufb00erent inferences over the same conjecture.\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 7\nOf course in most conventional logical systems, if consistent, di\ufb00erent infer-\nences will produce the same result.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d6e4b57-5b96-4430-950d-d2a0d3af1329": {"__data__": {"id_": "1d6e4b57-5b96-4430-950d-d2a0d3af1329", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de95fd07-02e8-4a7d-944d-7cbb1b3e974d", "node_type": "1", "metadata": {}, "hash": "a0bad2ee5155f76d5147440ed8f6a72e74425625ba1120206bf241cae9e609d8", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}}, "text": "However in para-consistent systems, such as\nPLN for Probabilistic Logic Network [4], OpenCog\u2019s logic for common sense rea-\nsoning, con\ufb02icting outcomes are possible. In particular PLN allows propositions\nto be believed with various degrees of truth, ranging from total ignorance to\nabsolute certainty. Thus PLN is well suited for such de\ufb01nition of surprisingness.\nMore speci\ufb01cally we de\ufb01ne surprisingness as the distance of truth values be-\ntween di\ufb00erent inferences over the same conjecture .", "mimetype": "text/plain", "start_char_idx": 397, "end_char_idx": 889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "818b970a-96b4-48e6-aceb-a67d5a3ecb7b": {"__data__": {"id_": "818b970a-96b4-48e6-aceb-a67d5a3ecb7b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d6e4b57-5b96-4430-950d-d2a0d3af1329", "node_type": "1", "metadata": {}, "hash": "728a2274f9adb49bf2a6e066ecb04922cc430f0bfcb93cb8fec0956a600fc220", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}}, "text": "In PLN a truth value is a\nsecond order distribution, probabilities over probabilities, Chapter 4 of [4]. Sec-\nond order distributions are good at capturing uncertainties. Total ignorance is\nrepresented by a \ufb02at distribution (Bayesian prior), or a slightly concave one\n(Je\ufb00reys prior [7]), and absolute certainty by a Dirac delta function.\nSuch de\ufb01nition of surprisingness has the merit of encompassing a wide variety\nof cases; like the surprisingness of \ufb01nding a proof contradicting human intuition.", "mimetype": "text/plain", "start_char_idx": 890, "end_char_idx": 1389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49d42f7c-db02-4840-9396-0c6d15ebc2ce": {"__data__": {"id_": "49d42f7c-db02-4840-9396-0c6d15ebc2ce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "818b970a-96b4-48e6-aceb-a67d5a3ecb7b", "node_type": "1", "metadata": {}, "hash": "6fbbb29ee2aed3c1b1ef1ca2fae162f0875263944310da399d240117abb69d2e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}}, "text": "For instance the outcome of Euclid\u2019s proof of the in\ufb01nity of prime numbers might\ncontradict the intuition of a beginner upon observation that prime numbers\nrapidly rarefy as they grow. It also encompasses the surprisingness of observing\nan unexpected event, or the surprisingness of discovering a pattern in seemingly\nrandom data. All these cases can be framed as ways of constructing di\ufb00erent\ntypes of inferences and \ufb01nding contradictions between them.", "mimetype": "text/plain", "start_char_idx": 1390, "end_char_idx": 1843, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e632fbdd-ac29-4be9-b74e-b2a9dec0cc01": {"__data__": {"id_": "e632fbdd-ac29-4be9-b74e-b2a9dec0cc01", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49d42f7c-db02-4840-9396-0c6d15ebc2ce", "node_type": "1", "metadata": {}, "hash": "4760283db3c240ab5aa11093b24902b19116f23abd4775605f512926c346fab0", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "cebeec0e-7cb2-499b-822c-b985697592dc", "node_type": "1", "metadata": {}, "hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "class_name": "RelatedNodeInfo"}}, "text": "For instance in the\ncase of discovering a pattern in a database, one inference could calculate the\nempirical probability based on the data, while an other inference could calculate\na probability estimate based on variable independences.\nThe distance measure to use to compare conjecture outcomes remains to be\nde\ufb01ned.", "mimetype": "text/plain", "start_char_idx": 1844, "end_char_idx": 2161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5d067e9-5241-45d6-a128-84e3c4f95900": {"__data__": {"id_": "c5d067e9-5241-45d6-a128-84e3c4f95900", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}}, "text": "The distance measure to use to compare conjecture outcomes remains to be\nde\ufb01ned. Since our truth values are distributions the Jensen-Shannon Distance ,\nJSD for short [3], suggested as surprisingness measure in [11], could be used. The\nadvantage of such distance is that it accounts well for uncertainty. If for instance\na pattern is discovered in a small data set displaying high levels of dependencies\nbetween variables (thus surprising relative to an independence assumption), the\nsurprisingness measure should consider the possibility that it might be a \ufb02uke\nsince the data set is small.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48cdaa2f-36eb-407c-80ec-3591f27d6a94": {"__data__": {"id_": "48cdaa2f-36eb-407c-80ec-3591f27d6a94", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5d067e9-5241-45d6-a128-84e3c4f95900", "node_type": "1", "metadata": {}, "hash": "1a9567eccd926a744fc687e2da1cc5877b648f87145251dbd04864a70f57993b", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}}, "text": "Fortunately, the smaller the data set, the \ufb02atter the\nsecond order distributions representing the empirical and the estimated truth\nvalues of the pattern, consequently reducing the JSD.\nLikewise one can imagine the following experiments. In the \ufb01rst experiment\na coin is tossed 3 times, a probability p1of head is calculated, then the coin is\ntossed 3 more times, a second probability p2of head is calculated. p1andp2\nmight be very di\ufb00erent, but it should not be surprising given the low number\nof observations.", "mimetype": "text/plain", "start_char_idx": 591, "end_char_idx": 1102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a596085-481e-45cb-b03e-cd7143a30116": {"__data__": {"id_": "2a596085-481e-45cb-b03e-cd7143a30116", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48cdaa2f-36eb-407c-80ec-3591f27d6a94", "node_type": "1", "metadata": {}, "hash": "50b04ac4848f37ab74af7f68cfaf2747a245263f150aee25ddb92c74dfcf4453", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}}, "text": "On the contrary, in the second experiment the coin is tossed a\nbillion times, p1is calculated, then another billion times, p2is calculated. Here\neven tiny di\ufb00erences between p1andp2should be surprising. In both cases the\nJensen-Shannon Distance seems to adequatly accounts for the uncertainty.", "mimetype": "text/plain", "start_char_idx": 1103, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2324a4b-d287-4f37-936f-3aa29d4ff177": {"__data__": {"id_": "f2324a4b-d287-4f37-936f-3aa29d4ff177", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a596085-481e-45cb-b03e-cd7143a30116", "node_type": "1", "metadata": {}, "hash": "d7532098fa667650347556fe86277b626407d4939f6e9d1bfb20891e5f04dbb8", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}}, "text": "In both cases the\nJensen-Shannon Distance seems to adequatly accounts for the uncertainty.\nA slight re\ufb01nement of our de\ufb01nition of surprisingness, probably closer to\nhuman intuition, can be obtained by \ufb01xing one type of inference provided by the\ncurrent model of the world from which rapid (and usually uncertain) conclusions\ncan be derived, and the other type of inference implied by the world itself, either\n\n8 N. Geisweiller et al.", "mimetype": "text/plain", "start_char_idx": 1306, "end_char_idx": 1739, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "856ca3dc-734d-4cac-a6d4-e30750bee8f2": {"__data__": {"id_": "856ca3dc-734d-4cac-a6d4-e30750bee8f2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2324a4b-d287-4f37-936f-3aa29d4ff177", "node_type": "1", "metadata": {}, "hash": "cd42dab939bdf8096239a1190ed481e78777117836f7db0403c908a778f2b858", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "1e73c683-2014-42b6-8021-49e0306c5579", "node_type": "1", "metadata": {}, "hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "class_name": "RelatedNodeInfo"}}, "text": "via observations, in the case of an experiential reality, or via crisp and long chains\nof deductions in the case of a mathematical reality.\n4.1 Independence-based Surprisingness\nHere we explore a limited form of surprisingness based on the independence\nof the variables involved in the clauses of a pattern, called I-Surprisingness for\nIndependence-based Surprisingness.", "mimetype": "text/plain", "start_char_idx": 1740, "end_char_idx": 2110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d": {"__data__": {"id_": "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nhas two clauses\n(Inheritance (Variable \"$X\") (Variable \"$Y\"))\nand\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))\nIf each clause is considered independently, that is the distribution of values taken\nby the variable tuples ( $X,$Y) appearing in the \ufb01rst clause is independent from\nthe distribution of values taken by the variable tuples ( $Y,$Z) in the second\nclause,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8a768ab-d186-4f11-904a-fe7c8ad137b4": {"__data__": {"id_": "e8a768ab-d186-4f11-904a-fe7c8ad137b4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d", "node_type": "1", "metadata": {}, "hash": "a8186e20a32df9b9c3364834a5fce989d269c34d9fb08982185068e0d59b3b02", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "$Z) in the second\nclause, one can simply use the product of the two probabilities to obtain an\nprobability estimate of their conjunctions. However the presence of joint vari-\nables, here $Y, makes this calculation incorrect. The connections need to be taken\ninto account. To do that we use the fact that a pattern of connected clauses is\nequivalent to a pattern of disconnected clauses combined with a condition of\nequality between the joint variables.", "mimetype": "text/plain", "start_char_idx": 460, "end_char_idx": 912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "399d020c-3cf6-410c-94f4-7a8db05bb85c": {"__data__": {"id_": "399d020c-3cf6-410c-94f4-7a8db05bb85c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8a768ab-d186-4f11-904a-fe7c8ad137b4", "node_type": "1", "metadata": {}, "hash": "c1882f834079fa1a5ec8e1170a5290eff46fe9226b54dda147fc47bf71283dee", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "For instance\n(Get (Present (Inheritance (Variable \"$X\") (Variable \"$Y\"))\n(Inheritance (Variable \"$Y\") (Variable \"$Z\"))))\nis equivalent to\n(Get (And (Present (Inheritance (Variable \"$X\") (Variable \"$Y1\"))\n(Inheritance (Variable \"$Y2\") (Variable \"$Z\")))\n(Equal (Variable \"$Y1\") (Variable \"$Y2\"))))\nwhere the joint variables, here $Y, have been replaced by variable occurrences in\neach clause, $Y1and $Y2.", "mimetype": "text/plain", "start_char_idx": 913, "end_char_idx": 1315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "069cdfcc-630c-46f0-a945-8f0ad3479755": {"__data__": {"id_": "069cdfcc-630c-46f0-a945-8f0ad3479755", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "399d020c-3cf6-410c-94f4-7a8db05bb85c", "node_type": "1", "metadata": {}, "hash": "31685d6387ecf04b327cf32401bbde0857eb3cc081af8b8d5f7cff43570ae24d", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "Then we can express the probability estimate as the\nproduct of the probabilities of the clauses, times the probability of having the\nvalues of the joint variables equal.", "mimetype": "text/plain", "start_char_idx": 1316, "end_char_idx": 1485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0884879f-7bc7-4530-ad46-fbded1002edb": {"__data__": {"id_": "0884879f-7bc7-4530-ad46-fbded1002edb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "069cdfcc-630c-46f0-a945-8f0ad3479755", "node_type": "1", "metadata": {}, "hash": "b8acda1068d2f780f322d3781b0bcfbce96665c5b33f766b940037f005758e9f", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "5 I-Surprisingness Framed as Reasoning and Beyond\nThe proposition to infer in order to calculate surprisingness is de\ufb01ned as\nsurp (P,D, s)\n\nAn Inferential Approach to Mining Surprising Patterns in Hypergraphs 9\nwhere surp is a predicate relating the pattern Pand the database Dto its\nsurprisingness s, de\ufb01ned as\ns:=dst(emp(P,D),est(P,D))\nwhere dstis the Jensen-Shannon distance, empis the empirical second order\ndistribution of P, and estits estimate.", "mimetype": "text/plain", "start_char_idx": 1486, "end_char_idx": 1937, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25a106eb-234f-4edc-816f-a307fdd9d3db": {"__data__": {"id_": "25a106eb-234f-4edc-816f-a307fdd9d3db", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0884879f-7bc7-4530-ad46-fbded1002edb", "node_type": "1", "metadata": {}, "hash": "6fb3704a49da6723587639a48c0b2c381869bb35423c8d0e28506b5779168ae7", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "e187e190-220d-4917-a7a2-e9f42f5a424f", "node_type": "1", "metadata": {}, "hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "class_name": "RelatedNodeInfo"}}, "text": "The calculation of emp(P,D) is easily\nhandled by a direct evaluation rule that uses the support of Pand the size\nofDto obtain the parameters of the beta-binomial-distribution describing its\nsecond order probability.", "mimetype": "text/plain", "start_char_idx": 1938, "end_char_idx": 2153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f64043c-7e2a-41c4-b648-aaa15229d033": {"__data__": {"id_": "5f64043c-7e2a-41c4-b648-aaa15229d033", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "However, the mean by which the estimate is calculated\nis let unspeci\ufb01ed. This is up to the reasoning engine to \ufb01nd an inference path\nto calculate it. Below is an example of inference tree to calculate surp based on\nI-Surprisingness\nPDPD(DE)emp(P,D)PD(IS)est(P,D)(JSD)dst(emp(P,D),est(P,D))(S)surp (P,D,dst(emp(P,D),est(P,", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 321, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acb61c45-4767-49de-b055-017e9054fa4a": {"__data__": {"id_": "acb61c45-4767-49de-b055-017e9054fa4a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f64043c-7e2a-41c4-b648-aaa15229d033", "node_type": "1", "metadata": {}, "hash": "6c5ced2af2d8bcf1e1ec7cfd61677dd233a1b0c07dde97df50647c5e55208860", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "D))(S)surp (P,D,dst(emp(P,D),est(P,D)))\nwhere\n\u2013(S) is a rule to construct the surp predicate,\n\u2013(JSD) is a rule to calculate the Jensen-Shannon Distance,\n\u2013(DE) is the direct evaluation rule to calculate the empirical second order\nprobability of Paccording toD,\n\u2013(IS) is a rule to calculate the estimate of Pbased on I-Surprisingness de-\nscribed in Section 4.1.\nThat inference tree uses a single rule (IS) to calculate the estimate.", "mimetype": "text/plain", "start_char_idx": 286, "end_char_idx": 716, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c69460d-250a-4b64-93a2-b144aa6b0090": {"__data__": {"id_": "4c69460d-250a-4b64-93a2-b144aa6b0090", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acb61c45-4767-49de-b055-017e9054fa4a", "node_type": "1", "metadata": {}, "hash": "25b296c59ce65bd4ed13101eb8456784114bcd9b418fb8451f5677167d21ef91", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "1.\nThat inference tree uses a single rule (IS) to calculate the estimate. Most rules\nare complex, such as (JSD), and actually have the heavy part of the calculation\ncoded in C++ for maximum e\ufb03ciency. So all that the URE must do is put\ntogether such inference tree, which can be done reasonably well given how much\ncomplexity is encapsulated in the rules.\nAs of today we have only implemented (IS) for the estimate.", "mimetype": "text/plain", "start_char_idx": 643, "end_char_idx": 1057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "210e3c58-7c26-4d4d-aeeb-f38743467f93": {"__data__": {"id_": "210e3c58-7c26-4d4d-aeeb-f38743467f93", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c69460d-250a-4b64-93a2-b144aa6b0090", "node_type": "1", "metadata": {}, "hash": "43956761caac5fb9b7b17f97e65c7909418dc9ed1d62416d061b313b42bba7c1", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "As of today we have only implemented (IS) for the estimate. In general,\nhowever, we want to have more rules, and ultimately enough so that the esti-\nmate can be inferred in an open-ended way. In such scenario, the inference tree\nwould look very similar to the one above, with the di\ufb00erence that the (IS) rule\nwould be replaced by a combination of other rules. Such approach naturally\nleads to a dynamic surprisingness measure.", "mimetype": "text/plain", "start_char_idx": 998, "end_char_idx": 1424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c2cd12f-6f9a-4900-8849-11dbbacb8153": {"__data__": {"id_": "5c2cd12f-6f9a-4900-8849-11dbbacb8153", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "210e3c58-7c26-4d4d-aeeb-f38743467f93", "node_type": "1", "metadata": {}, "hash": "146ec564314cb666caeab931cc07ace5a91683ebf42f2f3da4ac534e3b52f4a6", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "Such approach naturally\nleads to a dynamic surprisingness measure. Indeed, inferring that some pattern\nis I-Surprising requires to infer its empirical probability, and this knowledge can\nbe further utilized to infer estimates of related patterns. For instance, if say an\nI-Surprising pattern is discovered about pets and food.", "mimetype": "text/plain", "start_char_idx": 1358, "end_char_idx": 1684, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06bc1abc-1485-47b1-99e6-f91f1b039183": {"__data__": {"id_": "06bc1abc-1485-47b1-99e6-f91f1b039183", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c2cd12f-6f9a-4900-8849-11dbbacb8153", "node_type": "1", "metadata": {}, "hash": "2de04b44894527854b038bda58266b6194ce03f606c02e593e9a6f3386e3ee37", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "node_type": "1", "metadata": {}, "hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "class_name": "RelatedNodeInfo"}}, "text": "For instance, if say an\nI-Surprising pattern is discovered about pets and food. A pattern about cats and\nfood might also be measured as I-Surprising, however the fact that cat inherits\npet may lead to constructing an inference that estimates the combination of cat\nand food based on the combination of pet and food, possibly leading to a much\nbetter estimate, and thus decreasing the surprisingness of that pattern.", "mimetype": "text/plain", "start_char_idx": 1605, "end_char_idx": 2020, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e83ce9b4-a63e-499d-9145-58d680c0ad1e": {"__data__": {"id_": "e83ce9b4-a63e-499d-9145-58d680c0ad1e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}}, "text": "10 N. Geisweiller et al.\n6 Discussion\nThe ideas presented above have been implemented as open source C++ code in\nthe OpenCog framework, and have been evaluated on some initial test datasets,\nincluding a set of logical relationships drawn from the SUMO ontology [10]. The\nresults of this empirical experimentation are omitted here for space reasons and\nwill be posted online as supplementary information.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac8499c2-41f9-43ea-ba89-b0d0110e7736": {"__data__": {"id_": "ac8499c2-41f9-43ea-ba89-b0d0110e7736", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e83ce9b4-a63e-499d-9145-58d680c0ad1e", "node_type": "1", "metadata": {}, "hash": "ebf4068c1723a0e667051ec254ebc18b4a11632f4a9f94a61441ce8b888bb88e", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}}, "text": "These early experiments\nprovide tentative validation of the sensibleness of the approach presented: using\ninference on a hypergraph based representation to carry out pattern mining that\nweaves together semantics and syntax and is directed toward a sophisticated\nversion of surprisingness rather than simpler objective functions like frequency.\nFuture work will explore applications to a variety of practical datasets, in-\ncluding empirical data and logs from an inference engine; and richer integration\nof these methods with more powerful but more expensive techniques such as\npredicate logic inference and evolutionary learning.\nReferences\n1.", "mimetype": "text/plain", "start_char_idx": 404, "end_char_idx": 1047, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d8577ff-2165-41af-8b82-c02212fd1928": {"__data__": {"id_": "2d8577ff-2165-41af-8b82-c02212fd1928", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac8499c2-41f9-43ea-ba89-b0d0110e7736", "node_type": "1", "metadata": {}, "hash": "528d47f9e3a7866371190a7034228016571b7694d79789102cf71df13c8b0434", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}}, "text": "References\n1. Agrawal, R., Srikant, R.: Fast algorithms for mining association rules. Proceedings\nof the 20th International Conference on Very Large Data Bases (1994)\n2. Chi, Y., Muntz, R., Nijssen, S., N. Kok, J.: Frequent subtree mining - an overview.\nFundam. Inform. 66, 161\u2013198 (01 2005)\n3. Endres, D., Schindelin, J.: A new metric for probability distributions.", "mimetype": "text/plain", "start_char_idx": 1034, "end_char_idx": 1400, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9db3d52e-ffdf-4639-b596-ae6b58a290de": {"__data__": {"id_": "9db3d52e-ffdf-4639-b596-ae6b58a290de", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d8577ff-2165-41af-8b82-c02212fd1928", "node_type": "1", "metadata": {}, "hash": "fb22a7742f0b6c8f9818b6e591327a859ef7e7c11103ccd3505f45829a4702ba", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}}, "text": "Endres, D., Schindelin, J.: A new metric for probability distributions. Information\nTheory, IEEE Transactions on 49, 1858 \u2013 1860 (08 2003)\n4. Goertzel, B., Ikle, M., Goertzel, I.F., Heljakka, A.: Probabilistic Logic Networks.\nSpringer US (2009)\n5. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence, Part\n1: A Path to Advanced Agi Via Embodied Learning and Cognitive Synergy.", "mimetype": "text/plain", "start_char_idx": 1329, "end_char_idx": 1732, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a4534fb-b959-4077-9e95-c63e1e552d28": {"__data__": {"id_": "2a4534fb-b959-4077-9e95-c63e1e552d28", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9db3d52e-ffdf-4639-b596-ae6b58a290de", "node_type": "1", "metadata": {}, "hash": "615f4723a7663f4a42352b191398feac46d2e394db6f6186e10e2f550c200193", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "node_type": "1", "metadata": {}, "hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "class_name": "RelatedNodeInfo"}}, "text": "At-\nlantis Press (2014)\n6. Goertzel, B., Pennachin, C., Geisweiller, N.: Engineering General Intelligence,\nPart 2: The CogPrime Architecture for Integrative, Embodied AGI. Atlantis Press\n(2014)\n7. Je\ufb00reys, H.: An Invariant Form for the Prior Probability in Estimation Problems.", "mimetype": "text/plain", "start_char_idx": 1733, "end_char_idx": 2010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbe64b43-880f-425f-86d3-c2a94ce8f965": {"__data__": {"id_": "dbe64b43-880f-425f-86d3-c2a94ce8f965", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "node_type": "1", "metadata": {}, "hash": "f1a02cfd759052d33e112969d6b8efa33bc596758a3e6a4f1ab4b844569fb032", "class_name": "RelatedNodeInfo"}}, "text": "Proceedings of the Royal Society of London Series A 186, 453\u2013461 (1946)\n8. Looks, M., Sc, B., Missouri, S.L., Louis, S.: Abstract competent program evolution\nby moshe looks (2006)\n9.\u00a8Ozkural, E.: Towards heuristic algorithmic memory. In: Schmidhuber, J.,\nTh\u00b4 orisson, K.R., Looks, M. (eds.) Arti\ufb01cial General Intelligence. pp. 382\u2013387.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1557ee2b-a84a-495f-abae-7fa0af15edf5": {"__data__": {"id_": "1557ee2b-a84a-495f-abae-7fa0af15edf5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dbe64b43-880f-425f-86d3-c2a94ce8f965", "node_type": "1", "metadata": {}, "hash": "b09421275b2d3f0759534d9bb7025106e0d1d31811b798450205903c1286c735", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "node_type": "1", "metadata": {}, "hash": "f1a02cfd759052d33e112969d6b8efa33bc596758a3e6a4f1ab4b844569fb032", "class_name": "RelatedNodeInfo"}}, "text": "(eds.) Arti\ufb01cial General Intelligence. pp. 382\u2013387.\nSpringer Berlin Heidelberg, Berlin, Heidelberg (2011)\n10. Pease, A.: Ontology: A practical guide. Articulate Software Press, Angwin, CA (01\n2011)\n11. Pienta, R., Lin, Z., Kahng, M., Vreeken, J., Talukdar, P.P., Abello, J.,\nParameswaran, G., Chau, D.H.P.", "mimetype": "text/plain", "start_char_idx": 284, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eda6c0a3-56aa-4790-a353-45853740bf09": {"__data__": {"id_": "eda6c0a3-56aa-4790-a353-45853740bf09", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "444f91ef-6810-4546-87d4-5de5d12cf942", "node_type": "4", "metadata": {}, "hash": "d295160d49f5bcc01a4c31a046f2c3e4c74a7ae17f21eb28e90b11136a2f415a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1557ee2b-a84a-495f-abae-7fa0af15edf5", "node_type": "1", "metadata": {}, "hash": "9f96fb801e7e55a62e95d4ccaea10442c5ff8a368fcc2eaebf3087541ca18364", "class_name": "RelatedNodeInfo"}, "4": {"node_id": "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "node_type": "1", "metadata": {}, "hash": "f1a02cfd759052d33e112969d6b8efa33bc596758a3e6a4f1ab4b844569fb032", "class_name": "RelatedNodeInfo"}}, "text": ": Adaptivenav: Discovering locally interesting and\nsurprising nodes in large graphs. IEEE VIS Conference (Poster) (2015)\n12. Vreeken, J., Tatti, N.: Interesting Patterns, pp. 105\u2013134. Springer International\nPublishing, Cham (2014)\nView publication stats", "mimetype": "text/plain", "start_char_idx": 589, "end_char_idx": 842, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"32e51a37-983c-4862-9592-fe05a87c79cc": {"doc_hash": "0f3d99eed41635c27c3329a9ebea5b16cdc02b3dfe0b844fddaec941b76de83b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d9429d5c-b72c-4435-b4f4-10daf332d067": {"doc_hash": "ec9c8542e7c7d5c0035da66575043dd55af12ad6dfa68e538bfaa47d9ce56554", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "15324782-858d-4e53-acd1-a854bec067da": {"doc_hash": "f514345b3fae28480a2b441b0869a66ed63620af91507fb6b461635491f70355", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5": {"doc_hash": "501811e1953b890f74613fe966a338ec217d6c6417d34dbaa25014380b6e8f96", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb": {"doc_hash": "c741311a86abe1015f39894181306bd59a00808fe5f004d8de98023d2fcfbd90", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6": {"doc_hash": "7d8ffa74ae53903777e6c96aed595d9a4fec59b3bb0a303b104b817fe1db00d1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "bc54d88a-67e5-4ce8-9678-3120b35b8fd1": {"doc_hash": "d02fede6f44e5d656a8a9fd594a42c493e2b92a13739af132336e070c0b09045", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "7336d48b-9dcb-4a55-93bb-60c4db9ff773": {"doc_hash": "4020fdbce37755a26604661953301c88331fdba1b7942eabd8486682132a18a4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1515a848-c1fc-4637-9485-ca775b919e9c": {"doc_hash": "806a6a2323eccb29fff7578586507362b296b2e838622b8e03781194b0db6d18", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65": {"doc_hash": "61848e901dee85332f87857569c49b410fd0dbd8ee61cf821a82bc8a1e2813d3", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4": {"doc_hash": "385d447c7faa286e6eeec5ccb33e7f78c607a0cc0abd88b5911ce5470fee5758", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2b712d43-6221-440e-a002-d03602b380b8": {"doc_hash": "882992dced222a40f0a0b154e52f6c1eba635427e1382ef29af53ad92adcfc4c", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "eca65ecd-63cf-496d-b6b8-e9a6754a2517": {"doc_hash": "196e19c7dd0c9773873d2f0fec1e636d8c49c4d5356f211454e18aaf5d67d0a6", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5ddb5c13-0698-4e9e-99f2-44a4ceeca699": {"doc_hash": "a74e714da8fc1499f90fd7606361aed8aa354865a638c3b4165e16a83191b94d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f70233f1-b278-4421-a43e-84cfb9ee4bb5": {"doc_hash": "3b3a1f4e19875b5626f69633b12db74a7cfdd7e3f0ced045423dcb27ede97379", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "aa57e059-57a6-4dbc-82d2-770ab207e208": {"doc_hash": "61f3fad47ed51d62dd0c35dbbc38b16d8806a5941da772669cfdd9dd05d0531b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "7aac72e1-b0f2-498a-a05e-71766094c87d": {"doc_hash": "103e9eb9623f0ff9fed4585d06b478e62eb47a0869becb5fd5a6b587c394777a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f2f97ad6-ba74-4652-8457-a3c8d1339f85": {"doc_hash": "b6be913cc87fa93c9f2c7d527c7b1af0cc3ba49c28771845382148537ddf8f9e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e6e98ea0-635b-4fe4-9424-b47a84863043": {"doc_hash": "08dcd1515a385c1f9b37f17080f9b383118720b895a43c692b5575f73db2eee9", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "757ac2bf-2531-4356-a7f9-afedf4c00900": {"doc_hash": "beff68376c60041b9c6992b4015dfbca8ff26b7c3900c8599b5d7cb93f06dcdb", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1d39bf1a-4fbe-4836-9d73-7e660465d8e0": {"doc_hash": "f0e9767a878d12686f19439fe6d1afca227a779b199b403d8e6e0f1f56b2184a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "b958e4f5-8eca-48b9-8adc-be9ea9040702": {"doc_hash": "9b9af49ad9bb08a360d5bfcd8f0226070f4681affc794b92bcd5577e03382fdc", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c2244cae-1cab-458e-92d8-476fdc951855": {"doc_hash": "63f44885c0593f3dfbc607d4d280fdbbe722f0e2080da2ce8068bb4f463ac29a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "034f3096-dcf3-492e-b658-e398170d2f34": {"doc_hash": "5ba78dadf0e0286e9ed8e3afa5cfdc11553526fb76feb355b32943c2e9702369", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a": {"doc_hash": "ec47d6137e7aea618d0652a96744098f97e26dd3c0cf5f4d6d806d3c3c166ec8", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d391100b-91b0-4c50-b915-ab8622a68516": {"doc_hash": "f54e650104773d0864bc80f15f53f76d81c5e47b692bfa9c8fee4f02bb57004b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "82801c68-7461-45d0-8db4-eb16255cca29": {"doc_hash": "7705b4d38fe246a00c967b6ad34119282148c2f9f7b9382bbe1b9a2324edc315", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5": {"doc_hash": "3b4fe1a78823acc5f909b6bc10f587cdd9eb052ed733f1f406ee79021577fa47", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "b209620d-edf9-4ee9-8bec-c511561b5272": {"doc_hash": "6f334e5e3413425a6bbdc2deb72f4e7df9b3c8cbea693ab2cbf1747acced6d21", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "83ce28df-2b6c-4272-a60c-062c4afece97": {"doc_hash": "42d489b9b4e93ceea86508a27c4013468844821a177267fcf343baf3795f5581", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "35fe60d5-9729-4613-af55-ea0344f5ba4d": {"doc_hash": "7d045164e63299452c0263c5dc5c58accbce1b056f7e4df452bde59158d458b1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3bda7171-3737-44d5-bece-ce2cf32331b9": {"doc_hash": "59f708f45fb5720993e4a239e8b2ca3febb68aade5779606aedf4b506a09f1da", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "00e71b59-1d3c-40fe-ba95-f28f456faa39": {"doc_hash": "ecfaf7230eb452afd9297abef4d43b5b73f9e9cf21fbf6ec632b29b17a013cf2", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "92c54c82-d608-40fc-b2e4-9add7448dbae": {"doc_hash": "fce0c0762f07af98ec2f9e30589656628e4bcb0f5134d2b16798ac034c2382b4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "cebeec0e-7cb2-499b-822c-b985697592dc": {"doc_hash": "684ad75b09f81bd4e216b95acf42fa47d12c28b7d8dfbb5e09192a9a8b39f121", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1e73c683-2014-42b6-8021-49e0306c5579": {"doc_hash": "448da3afe366fae0f1ba5b4f52175465912a8328ad0ed8cfb2e6fd036cacf6ce", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e187e190-220d-4917-a7a2-e9f42f5a424f": {"doc_hash": "4f15920394c6c24e405082b173704524cd07ae912064fcd74cbc6169b263be2e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8": {"doc_hash": "10c9800af27b6a3d449bafc85cff58f3a60c3d29958c32fdf5efe2ea418a7b15", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0": {"doc_hash": "1447d54f67ec261e4d264db9be17069c0873ff19b8a44fae6a92f683c3c3f20e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "edfab44b-48cf-4ae7-a53b-67c49503d9b1": {"doc_hash": "f1a02cfd759052d33e112969d6b8efa33bc596758a3e6a4f1ab4b844569fb032", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "408db57b-f4c6-4498-8fb7-62694d06d7e9": {"doc_hash": "e1add1e5821cc88eb23937a262e98284f2bfcd9b7330c9070cdfc2f3bb9d8624", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "131dcd82-56ea-471e-913c-078d8c8fa663": {"doc_hash": "2e24101a6b8f6c67882e3f5b9e430470bac2d8e855752be288ea9485f564cb69", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "18207c4a-77dc-44f7-86d9-ef2fbd1e3729": {"doc_hash": "b5c4d66366f24773580eb075f07ee4f1bd0ed7bcfb46b21dcd2e523e4d620f0f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "000f8812-7534-46a9-8d88-f6ca499854b9": {"doc_hash": "7e1be3360fee1b2ca6f504f4aff404743455ab57f68a0f9dadfaef500f0e7c96", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "acf7ba6b-97b2-473f-a534-113d8d7e3f4a": {"doc_hash": "339a5f50e435026eeb88d9f85060ed4ae38bd9c28a6cfc017dce36c24a758429", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7": {"doc_hash": "7107669b299d9e378f30fbb2add9821c0c22bde027c0fea0f82bda035c78109d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa": {"doc_hash": "f34aace16aa7e91012281bb8b348a95e3f0d258790d1f91f97378e5e8a1ab4f5", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c1c3092c-c836-4d61-86b9-6afce0b7a4e8": {"doc_hash": "a0a7d68daa50a9b88a50f0f4acad7f8325cd102ec97e5a1693e2d1b3ff2fc120", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "8ea77f12-1d3f-410a-825b-6db79ae05844": {"doc_hash": "67d434c4c6410e91e22a46adc0fc311cc5d4cc1e20f35ff63218af733179b859", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2376e96b-0e5a-4e26-b840-329927592414": {"doc_hash": "94c55ec4c9b0803e07e299c32cbf448eece0d6f80ec71338cbc52458d52a86a0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2": {"doc_hash": "45a62ab0ac7191ab2a3de7187bccb83aaf7137d3539d602cc64d9e4c787298af", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "654dba60-7b35-41c1-aaa2-3cb551813d76": {"doc_hash": "21e12306507cfb033834a9e35c78e8d6de96042db6afff189f4389fe6268d7e1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5943c3e5-ea7b-4808-b8d2-34a8a20dba51": {"doc_hash": "327e120867a56c6f9ee6d1c1c50befbc2ff0ddb78021a6bdc7fb3ed32f7951d4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "9d75ec1b-1b58-4d1a-883c-f69f0040514c": {"doc_hash": "84c80545004b1d43e5666c29a6618d778a770ca2a2cea410b99fc66ae9e113e3", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3dd6d34c-673d-4dce-b686-4d637fa899af": {"doc_hash": "23cec5f2b42ef5a7543c25ea829b49fe12772394f4c111d055ea178bcb8d7d74", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3f370525-4dd4-4317-a39b-6a035dddcf52": {"doc_hash": "6e5ed92253892d78ba85e23df7059aa983540f307e1bd063238810eebffd8bbd", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "740a137d-5178-46ef-9e69-8417f32d5c64": {"doc_hash": "8edb004bac2979ca104e3d0b6d170b476b7d1108044283854e20ef14e3f7d12f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "9da10ac4-3051-4d72-b978-328049d5c617": {"doc_hash": "dbdfa667201ef5ad6ce0d5d8c54a43d0c7b485e7b397f85f7a308a1d36881662", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "4d98f34f-2f72-43fb-ae65-f40a531ef44c": {"doc_hash": "131a907ad55f98112743b4cd5ee47c9ed93e4a0d7593cfabb107fd41b21f8b51", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "36c5231e-2425-4727-a927-f70fce261c29": {"doc_hash": "c33bf96b37710e66cec204f5159f99945f1543679b9ff1176296ab479607f376", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "4b2b591d-6223-4813-a17a-e28c6d1b39f1": {"doc_hash": "4849d7693462646c0ad6ac290e3e0dbc3dd8e8ac98fafac6a6b41efed7f2fb37", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50": {"doc_hash": "56c74c5721e4efecdded478b75b299654596b55a01dc0e423a9c68f9b1ced111", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "126f4762-aabd-4b1c-bc70-fe0799b95fc5": {"doc_hash": "3b95220080b366a1ac84db1374b038c4e0af606d5f732638b2cbd359c7a82b76", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "11e27bec-2a02-4e08-a07f-548853a4ecbf": {"doc_hash": "004505880d8bf9906d42128950af3edf06075bb38a9b92ffb80e2766cbb1d7b9", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "395e24d6-de01-4143-be35-23074911de9b": {"doc_hash": "1e166f5ba6b88602ebf6aa11fcfc260f292bd1920ea4f33d59fffedbe89546cb", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "63d3cd33-19a1-4e9d-94dc-00e702a3b83d": {"doc_hash": "a28e37e11435db77159e128189c1fa77cfa880f2c2f678df4f8cd39768c2a3e4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "704ce44f-9926-4c7d-bf09-208fd0b00092": {"doc_hash": "44b484857ecc9d963dd518f6941ce1afd5d1e9d66f874d84bbb78a8febb61c67", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "46e8eb53-3933-4357-85e3-b02d260613d4": {"doc_hash": "ef399150364f792b6bace4942e32cf90b753b03e70f613be9840f546e8ef75a1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d508dcf7-d57b-422a-b5dd-02abecb69bdd": {"doc_hash": "fb55e202db70aa5b96e5c7f32d6b79d7f71e859c1012f897b480259d89788839", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "fed9fdc3-2d5a-486b-b4a6-0b4ee68bd6ef": {"doc_hash": "9191352c550be9ab6198cba9aed5c7ddb04bb30336fdbf8d7f31ce703592a696", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "4ca44850-60f8-4c2d-b9b0-57f2e3863e90": {"doc_hash": "30adba1802bb1989a3258a95bf5be02d2cb90ca02f8f4e0ceb8f73ad9a163577", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "bb1ff6b9-48ce-4c21-87bc-666983d445c7": {"doc_hash": "2f7517ccb30a96e68151d5f0a1ee4fa808553f20c17aed39663bf64c6ff18a5a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "4c31bf44-ce91-46aa-a31f-e768460944f1": {"doc_hash": "e09d87ef39020cd7b1572a42f6525177ab0b9b6c0f77fc35675eb89742075df4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "ec2dbf9e-9371-4712-91ae-2c496f713cd1": {"doc_hash": "99df25af729a5c056c4fb0719b745bb8842084e90443e5c1a9552eebb698a9ef", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5": {"doc_hash": "3f12378c123c87499debde5c7a1febff0329917168e96513fadd865632c2cff3", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "bdb63763-b762-400b-b87f-ae36cfb35f15": {"doc_hash": "a669599fa7ef2f0758dcff238ca2af67866ae48de90e036b666403e267ce62f9", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0": {"doc_hash": "35eb6caf21020bdeb4d01ca3e5af8992b2a8cdeed674a7a6ae3ae73a81f8cd81", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1c888b2e-7dfe-40a3-aeb9-bf8c56f72c6a": {"doc_hash": "78c5f2f4d1e996298137042c2f065f06766bbdc45d7b926e37b28103622f477f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "89e65ffb-d683-4684-ac42-b6024f306cbe": {"doc_hash": "4552449f4a6550db6857e1032b7bec78539abaa2984238feb6a2a080bade7aa6", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2cd1764b-da9e-4729-bf31-92b63b9c9e25": {"doc_hash": "46546bb16f073eaf202d5420c25efd09107813308f5cf98525905d402b5af7b6", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d0ff4020-d983-45a3-85b0-d7271108e0b4": {"doc_hash": "577780b1badceab74f7672fdac044d526efefb7268e20c63ca05b2290a01ada0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "6aa9061a-fd26-4762-8f7f-6bce5dd13371": {"doc_hash": "3ce8c2072fa4396df225250d4d31aeeeace2146d1246d1c23d53a3b4e339b4c5", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9": {"doc_hash": "e64adfb5ce58b17ed7611f63f13477521082bdc38e772f1426d44029767b5287", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc": {"doc_hash": "8e68382afbf5fac19eac7356b494612573b9b13fd6283ff0e3f081bffa3c121e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3637f9ee-d5cc-48f5-9d4e-18428e594cbc": {"doc_hash": "eb407612f7b02439e1f9af192bfdad21880f8c8999a3e03a81dbd19dbb105826", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "9545c519-89ef-41ff-94e5-5089066dd525": {"doc_hash": "071babd3ec3764bf2c24b45de337a13dfcaaaf316e054d3bf8c6080e35cd1722", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1c923514-3e96-4737-a3c7-7ab1d1531db7": {"doc_hash": "b2385013bbb7485288c6aa929491da0a5ecd5f4bd5ca4f005649ad70d11082f9", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "7222d101-a3a5-4374-bd55-ee6a2680cd15": {"doc_hash": "e044e24f9a2feaca0f09078c6ca48c9c9a24b64ee0ac4ba894d757f58e5bb0e0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "84e7d415-f40b-4b30-8b79-a701d2fc6c2e": {"doc_hash": "240b3733c271a2b50c6c48fc1ad4ba559065ca103587c934ffe9c6eb40658667", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "210287bb-99d5-402d-b624-3a632204d66a": {"doc_hash": "3a89ef509e659dc770e49ed5510becd1986e8b6d07233cb1c58ced27f2a4587f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "6ebc1059-4fa0-488b-8d83-2b6bd9222ff8": {"doc_hash": "a1c77ba0afa580702a0e15fd744a49a794896200bb98397dc7f731695c0e2ac8", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "39be06f3-9820-42d9-98d4-7d8bf4a9f226": {"doc_hash": "d1b3ffbf2e08bccabf56a2a260ea8afc7cbcdc47e8d42af0225eed499f523e04", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9": {"doc_hash": "26b3387d028668b052767a32e3fe446f0c4ae4d7e5c388c68e227b57d7435fa5", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "334731eb-0664-4639-812a-e9cfb52e78b3": {"doc_hash": "b96011613be7797c130f5f1e094e4f9eccd5373c373942e7cf43fd849da87388", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5fd38d23-2ad0-4d41-a8c2-56f0517ca0ec": {"doc_hash": "0f6269ea80fda30b1b4b98fd9c0ef4769184d084e563949cd54680499b831fce", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69": {"doc_hash": "950cac1690d2b3e07c0ff258d44ebef40a0a4fc249a53ca6b184a00538df81c1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "7353fbe9-e724-4ada-849d-6394f166642f": {"doc_hash": "d09e6dc0fb692df6c3646632aaf5277cda8376b916e67aea952ca4dacf962dbe", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "bfcb3baa-25cf-47ec-897d-4bcaf0842a70": {"doc_hash": "f32bb92858bb0294d94e223323bb7de5113f0df3d952b648401f07d9fedc803e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "58d204f0-3277-4072-b963-2877104fed8b": {"doc_hash": "cd90eb335356c8f97d6b5f02e2b2ab29193af6dcf3d2fe6ae9fead5ba141e260", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2d53beac-47e5-47ae-a228-28e2af2f4ab4": {"doc_hash": "0a760f0f9031d6d87143ed9c04eadf1fa8a4f96cc0c99dc6be9726338331378a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d7473e1c-5880-4768-bda8-b805e3227cf4": {"doc_hash": "253e3d1e84de800b0577ba8b1ad27aaa3422f9ea0f84c4f77fffc981c1b2df05", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d": {"doc_hash": "9d862303cf44c83a07d8cabb83d6e32f43a5e73369f980b3427a8cdb1e48d706", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f046b2e0-29ef-4aca-8462-4e3bcf57410f": {"doc_hash": "390683f7ed9a9025cb86078c1f62158f13a085b4ba3fb64eb79bcdf59967d08b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "61e37d99-77c4-470d-8a56-c7c1fbd89819": {"doc_hash": "4959ff2bd3ca6f33dad47aff435d1529b5c635caaae9ca75d8cb52115196f52f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb": {"doc_hash": "aa75a6a98e2122e6d03629c1253de10cc21701ee640c3a727bd76251fc97aa24", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "06589a63-7cf8-4ce0-bb77-23b7519d53bc": {"doc_hash": "78bd0ea6792a6e6f03a7dc234584f367c70f06d688bd741fea65db899b9bb95d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "a07b7a52-511f-4a98-a681-3e77fa08fe61": {"doc_hash": "d8b38556e1ac8edee842b7280bf4a442e030520f5c484e916c9e48ca670c4c53", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1bef524b-9188-491d-b2f0-ba8a26e84747": {"doc_hash": "0afb62cea597b464652e4da16b0e79cea3fe5048419381e829160ef4a9bf29d1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "24814402-beb4-46ad-a988-6e8b52fabbee": {"doc_hash": "c89a18c8119f8a49f25fb22d13ba1e2234f84ba1867a5506dc3619a1cea21b34", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "66441850-c26f-4920-b4bb-31dd09585bbb": {"doc_hash": "f22ef8206b97e5caa91b26b986f2d98c0da3bd2e0c05c7638e7c41a7a692257f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "a61dc099-0969-4535-9f2b-c99cf3162517": {"doc_hash": "12ba3272841b4478a8c2385dbf44763ed3743856c1df171a72ff219c61823e13", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "acb3faa5-db68-4d9c-a7cd-af0743e37625": {"doc_hash": "d0e184ba50c682d193f35334944b4c37281bd8876e87c54094133758fc4f5906", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "75b1eee5-4e21-4b9c-afe4-513ebd477f6a": {"doc_hash": "b442e676186e1d4137f0e3af09f96f6233611a3d7479ac30603d223fc7a8229d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "43a68db3-de7b-46e1-a9ca-00cfc4346362": {"doc_hash": "a4062b56edf7af110c3c7977e3cd756c7076c485b2fab33c98faf30d30d6eecc", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "28f9323d-fa92-4fbb-bc85-f782dcfe061f": {"doc_hash": "83010b91c3fc15076e22689586a242faab281ea5e6cf3d5097ae58d96bb8caa5", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4": {"doc_hash": "7d24a65834e8709fbdfb6e74d5db5cb7f9054cf1b3f3dcd946ccca3bbf85ec3f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3971a7e7-6b2c-4542-840a-e12beae42c35": {"doc_hash": "b6cac1eb4b7ea6fbb6f324977f0420901a5f572d187415c60641e65f8b782912", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e722ffae-4b80-40cd-b448-ed89f8baa3a6": {"doc_hash": "f1c2696682894137d04219b01d7eec017d59a4a82731206d7c8a27c14b957a96", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "0f0f307d-0247-4c93-a962-941215b424e0": {"doc_hash": "04a29bf765d44cc80f57de5cb04dddbd5e58c40c409ee5aa365c16d4805d15b2", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3426f4a0-4591-43eb-b84d-ac97c8e5e374": {"doc_hash": "e33a863455ca387b876a2099fbe992eb265c4cd3e192fe1799af81811619ee5d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "681298e8-023c-445c-b8ca-5d73e64a7bda": {"doc_hash": "a35891e410035900b44fea618e9926ae27288b836dbb12f17e91acec57a812c0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "15f7a5f9-cc57-435b-a399-444957d02a1b": {"doc_hash": "eceb4854cd88e9c20ca45b4e30c6a349be0a5de66e451c0cc41922542aaa9422", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "fa4601c0-6b54-4a5e-954e-8fe0d97ad64e": {"doc_hash": "10c578ae182abffe8b306878e888885f3bf0c3a02dbf462e85b7ef509a565768", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "885da95a-b5a6-4466-8755-7aba3c2cbb4b": {"doc_hash": "7705b4d38fe246a00c967b6ad34119282148c2f9f7b9382bbe1b9a2324edc315", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "cd2631ef-da81-4a56-a503-e6eda1c05db7": {"doc_hash": "31336b8b468b61c6bf69199c5c46491d11ae9173ca3348c024ae49c19954971d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "07b1c1b7-df4e-4ddc-858c-87fc62ea5600": {"doc_hash": "75fada1db868027c084bf4beb5a7dd8db364ea26a19ef5f2b2fa04875e20d4db", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "44dc1a75-9e66-4ae9-83f9-f454ee5027c1": {"doc_hash": "86a0ada44b8d68d30b0a6dac07f394e110dc79f35650e77eaab2387a14d7e2a1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd": {"doc_hash": "573bf034916381246d48498c741e24d3016df55bb7f562a98389c21584c61d43", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "03397da8-70c2-4a37-89c3-235fb95c17da": {"doc_hash": "dca4e42477369aa1162fa17f6092055d4469818ad6be22f6b3468a83a932c38c", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3d8024f4-1756-4db1-8eb1-907f492dcbb2": {"doc_hash": "f4dc8d7caf55737a0b5a68a8d30c0959e0a86e892755f674a7004d0ed254deda", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "10b15a04-60a5-41b7-9452-bbc2daa5c635": {"doc_hash": "9110be3ccc54b761cc49f312c86a1328f7fb01384ee902fb34b92533216af7b2", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "888ecc74-47e4-4d9d-b442-46f9920b3b8d": {"doc_hash": "ee813eb9115a825701e8a3a0c687251fc0f371cef6fd68ec882a801c20d70b55", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "13b044c4-c3bd-428f-8a0c-5c86bc26340e": {"doc_hash": "970a7487284c6da0ff5b1e73ba0f131510c01217be5fa7804a822abd42fec74d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "10b83668-f8dc-410e-9068-b9b3162a90e4": {"doc_hash": "b16c3f39602ff14d2f9997c7d097336ffe931fbf50387ae0c32bcd01874f3326", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844": {"doc_hash": "9b60cdc2905828269caa5312981d932940bbeb9f28b4edc986777bbec0292167", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "668e7c9f-4385-4926-b145-788a8e4ab66c": {"doc_hash": "fb80aca456b3aead8a1a86fc3b4144c373923f07593b1424855d6a3befe4e0a4", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0": {"doc_hash": "968735809f773ee973704448b04c1177cce66958894bc48f00c260f6b7b94890", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "6f4c3da8-71af-46fd-91a9-a1a9dd58b264": {"doc_hash": "f3076376ab96c23e49ae65cab8419cb2444fdd120176cd1c9f10568cc3aa5c4a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "58e61e39-eceb-4384-9db6-bb9ecb926f94": {"doc_hash": "17ffe8b08974040d93d96d4306d844dfeac5a6fdb7c030e26ef9f9e2f27e7f0f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f5460ff6-5527-4729-b38d-26d955dc8837": {"doc_hash": "c8b7a772b37117e7725def8bffb9192d091f61af0052d6cc75921242a6fc5fc0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "6470c3e0-540a-4b63-b550-99fb7a144731": {"doc_hash": "5abeb86871ef9b7abe653e035989bc7a8061b88fa592db93601abb95a92d3cac", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d3e752d3-841f-472d-8ab3-a51caee198f9": {"doc_hash": "2e13076db72aa0c670fbdc9d892ff13779ef5807907a033bd8e86602bf3c288a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c92d4036-793d-465b-94d2-ee31c907ac42": {"doc_hash": "ad5331cc4c85255400ee83de54847733a809b0eb0ae3c9f8be608e3a5bf7c18b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1890a880-585e-4161-af3d-138fb313accd": {"doc_hash": "16b2dc76874d7f285c760d1e29116d64c05ecc8fb2a0050ec29bc1ca671dff5a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "08366056-1fb3-499c-bed3-a3374071986b": {"doc_hash": "eb60079cfbe3f898510a93692271a50dc865386720374dbaf6f44bbaf3fe14ab", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "3efa6881-bc15-4b5f-b1ef-90b2478e157c": {"doc_hash": "59f708f45fb5720993e4a239e8b2ca3febb68aade5779606aedf4b506a09f1da", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f": {"doc_hash": "2b67fd48f143be878cdf96f00bbcc4e9cf61e477a160aba15af4086c8807b396", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "d41f3050-1f04-4c65-ac40-be3a391aad84": {"doc_hash": "5639ce8ff65aa685a33e6b1573726784dee004e4d54468ff1288570dbdcd4d07", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "72274b31-0107-4bb5-adb3-647f06a9c264": {"doc_hash": "19a6f2ed74431bfd0c9dc0157d961bd3daebd66ce6ed4a1ad7a85f0b38e593ac", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "df92c951-b195-4213-8bd8-686c3c4fb161": {"doc_hash": "88e2ce7bd76e14a334924bd992cfdb7c51f49c38b5204a08ccbfd22327775189", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e6bdb32f-365a-410f-8d36-cc20eba47ac3": {"doc_hash": "3adab1916c9046298310d0dabe98fe6dbe188e6e27ba79d9999d7d5a5dc2494a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c0cecfe5-c34e-4996-ba27-8b80d728a8c9": {"doc_hash": "48b377146aefe3d57b55a70ba49914060c02ea242324c95a6c268b82c55fcf52", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6": {"doc_hash": "825d18d0c3454b87f99a538042cc737ed77856c0062342d4807b9ef4325e4234", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "dbd63e28-8a46-4a13-9136-3731b4bc7b86": {"doc_hash": "83d880f33488ffbaacbcf458fd118ab73ccab33b45154f808c85eff6f69b07a3", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f8dcbeed-9812-41d7-8b8c-7945ef76f63a": {"doc_hash": "995f45bcc0fc9c278a76d4479559f783bdccb4d5d177d4e605abf15cb3b553f7", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "bfce8e9f-a1c8-43e6-9fe9-c5fe8889a35f": {"doc_hash": "b7239d37a8f1643df05474595a50ea9d2d8f6c2814422af12f9eae8e17cf929b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "de95fd07-02e8-4a7d-944d-7cbb1b3e974d": {"doc_hash": "a0bad2ee5155f76d5147440ed8f6a72e74425625ba1120206bf241cae9e609d8", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1d6e4b57-5b96-4430-950d-d2a0d3af1329": {"doc_hash": "728a2274f9adb49bf2a6e066ecb04922cc430f0bfcb93cb8fec0956a600fc220", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "818b970a-96b4-48e6-aceb-a67d5a3ecb7b": {"doc_hash": "6fbbb29ee2aed3c1b1ef1ca2fae162f0875263944310da399d240117abb69d2e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "49d42f7c-db02-4840-9396-0c6d15ebc2ce": {"doc_hash": "4760283db3c240ab5aa11093b24902b19116f23abd4775605f512926c346fab0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e632fbdd-ac29-4be9-b74e-b2a9dec0cc01": {"doc_hash": "5b7e4b9c798783c88a77f858f08e88844c69344ccc97ad697789df50b379eff0", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "c5d067e9-5241-45d6-a128-84e3c4f95900": {"doc_hash": "1a9567eccd926a744fc687e2da1cc5877b648f87145251dbd04864a70f57993b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "48cdaa2f-36eb-407c-80ec-3591f27d6a94": {"doc_hash": "50b04ac4848f37ab74af7f68cfaf2747a245263f150aee25ddb92c74dfcf4453", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2a596085-481e-45cb-b03e-cd7143a30116": {"doc_hash": "d7532098fa667650347556fe86277b626407d4939f6e9d1bfb20891e5f04dbb8", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "f2324a4b-d287-4f37-936f-3aa29d4ff177": {"doc_hash": "cd42dab939bdf8096239a1190ed481e78777117836f7db0403c908a778f2b858", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "856ca3dc-734d-4cac-a6d4-e30750bee8f2": {"doc_hash": "8cbe583051a1a6f121002fbac63c20085da4a5bfd4414f79024138fc945b5fc8", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d": {"doc_hash": "a8186e20a32df9b9c3364834a5fce989d269c34d9fb08982185068e0d59b3b02", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e8a768ab-d186-4f11-904a-fe7c8ad137b4": {"doc_hash": "c1882f834079fa1a5ec8e1170a5290eff46fe9226b54dda147fc47bf71283dee", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "399d020c-3cf6-410c-94f4-7a8db05bb85c": {"doc_hash": "31685d6387ecf04b327cf32401bbde0857eb3cc081af8b8d5f7cff43570ae24d", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "069cdfcc-630c-46f0-a945-8f0ad3479755": {"doc_hash": "b8acda1068d2f780f322d3781b0bcfbce96665c5b33f766b940037f005758e9f", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "0884879f-7bc7-4530-ad46-fbded1002edb": {"doc_hash": "6fb3704a49da6723587639a48c0b2c381869bb35423c8d0e28506b5779168ae7", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "25a106eb-234f-4edc-816f-a307fdd9d3db": {"doc_hash": "4fc2a375ad59004f753b97e0fea5398cbc1b57cf301ab2e74611e79e36fe14df", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5f64043c-7e2a-41c4-b648-aaa15229d033": {"doc_hash": "6c5ced2af2d8bcf1e1ec7cfd61677dd233a1b0c07dde97df50647c5e55208860", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "acb61c45-4767-49de-b055-017e9054fa4a": {"doc_hash": "25b296c59ce65bd4ed13101eb8456784114bcd9b418fb8451f5677167d21ef91", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "4c69460d-250a-4b64-93a2-b144aa6b0090": {"doc_hash": "43956761caac5fb9b7b17f97e65c7909418dc9ed1d62416d061b313b42bba7c1", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "210e3c58-7c26-4d4d-aeeb-f38743467f93": {"doc_hash": "146ec564314cb666caeab931cc07ace5a91683ebf42f2f3da4ac534e3b52f4a6", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "5c2cd12f-6f9a-4900-8849-11dbbacb8153": {"doc_hash": "2de04b44894527854b038bda58266b6194ce03f606c02e593e9a6f3386e3ee37", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "06bc1abc-1485-47b1-99e6-f91f1b039183": {"doc_hash": "fde575b7955a45de6e543b44aa7b8c6694896ecebd26c38efb450f1448ac276a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "e83ce9b4-a63e-499d-9145-58d680c0ad1e": {"doc_hash": "ebf4068c1723a0e667051ec254ebc18b4a11632f4a9f94a61441ce8b888bb88e", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "ac8499c2-41f9-43ea-ba89-b0d0110e7736": {"doc_hash": "528d47f9e3a7866371190a7034228016571b7694d79789102cf71df13c8b0434", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2d8577ff-2165-41af-8b82-c02212fd1928": {"doc_hash": "fb22a7742f0b6c8f9818b6e591327a859ef7e7c11103ccd3505f45829a4702ba", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "9db3d52e-ffdf-4639-b596-ae6b58a290de": {"doc_hash": "615f4723a7663f4a42352b191398feac46d2e394db6f6186e10e2f550c200193", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "2a4534fb-b959-4077-9e95-c63e1e552d28": {"doc_hash": "b5c7ab4d6d99cfeca13f2ac9836a659f46417f99ef519090cc5c8035f406ce5b", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "dbe64b43-880f-425f-86d3-c2a94ce8f965": {"doc_hash": "b09421275b2d3f0759534d9bb7025106e0d1d31811b798450205903c1286c735", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "1557ee2b-a84a-495f-abae-7fa0af15edf5": {"doc_hash": "9f96fb801e7e55a62e95d4ccaea10442c5ff8a368fcc2eaebf3087541ca18364", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}, "eda6c0a3-56aa-4790-a353-45853740bf09": {"doc_hash": "eefd6286d7ff439c63911b4ddf3431beb7e2c4d8b7ed4a5ca74a3a23f457580a", "ref_doc_id": "444f91ef-6810-4546-87d4-5de5d12cf942"}}, "docstore/ref_doc_info": {"444f91ef-6810-4546-87d4-5de5d12cf942": {"node_ids": ["32e51a37-983c-4862-9592-fe05a87c79cc", "d9429d5c-b72c-4435-b4f4-10daf332d067", "15324782-858d-4e53-acd1-a854bec067da", "dd45d6ec-9caa-4cc0-aa62-4f67ad983ec5", "afb4bb41-bffa-46bf-8ee9-ad55ef2c7abb", "a710c7b5-7e3d-4cbd-a882-2d7e8bb256a6", "bc54d88a-67e5-4ce8-9678-3120b35b8fd1", "7336d48b-9dcb-4a55-93bb-60c4db9ff773", "1515a848-c1fc-4637-9485-ca775b919e9c", "2dcd7ddf-10c7-45c1-94a0-bd0d6a6b5c65", "b5d2fc35-ffd9-4266-b7d7-f17b455a54c4", "2b712d43-6221-440e-a002-d03602b380b8", "eca65ecd-63cf-496d-b6b8-e9a6754a2517", "5ddb5c13-0698-4e9e-99f2-44a4ceeca699", "f70233f1-b278-4421-a43e-84cfb9ee4bb5", "aa57e059-57a6-4dbc-82d2-770ab207e208", "7aac72e1-b0f2-498a-a05e-71766094c87d", "f2f97ad6-ba74-4652-8457-a3c8d1339f85", "e6e98ea0-635b-4fe4-9424-b47a84863043", "757ac2bf-2531-4356-a7f9-afedf4c00900", "1d39bf1a-4fbe-4836-9d73-7e660465d8e0", "b958e4f5-8eca-48b9-8adc-be9ea9040702", "c2244cae-1cab-458e-92d8-476fdc951855", "034f3096-dcf3-492e-b658-e398170d2f34", "f6e2fc78-4e6e-4f75-9433-8c07b0f2f10a", "d391100b-91b0-4c50-b915-ab8622a68516", "82801c68-7461-45d0-8db4-eb16255cca29", "f39e0bbf-7d97-44cc-83d3-55bcc5f55ff5", "b209620d-edf9-4ee9-8bec-c511561b5272", "83ce28df-2b6c-4272-a60c-062c4afece97", "35fe60d5-9729-4613-af55-ea0344f5ba4d", "3bda7171-3737-44d5-bece-ce2cf32331b9", "00e71b59-1d3c-40fe-ba95-f28f456faa39", "92c54c82-d608-40fc-b2e4-9add7448dbae", "cebeec0e-7cb2-499b-822c-b985697592dc", "1e73c683-2014-42b6-8021-49e0306c5579", "e187e190-220d-4917-a7a2-e9f42f5a424f", "7353a30d-32e1-4fa9-bab3-8e262ccbd0f8", "74e88bdf-f0d6-4f4d-9f3e-083180a47cc0", "edfab44b-48cf-4ae7-a53b-67c49503d9b1", "408db57b-f4c6-4498-8fb7-62694d06d7e9", "131dcd82-56ea-471e-913c-078d8c8fa663", "18207c4a-77dc-44f7-86d9-ef2fbd1e3729", "000f8812-7534-46a9-8d88-f6ca499854b9", "acf7ba6b-97b2-473f-a534-113d8d7e3f4a", "27c0176e-c5d6-4ca3-a612-1ea6a42d46c7", "3dc343cc-2fb6-4f16-ac38-d2ab02bbf7aa", "c1c3092c-c836-4d61-86b9-6afce0b7a4e8", "8ea77f12-1d3f-410a-825b-6db79ae05844", "2376e96b-0e5a-4e26-b840-329927592414", "d4aa89ab-4a65-4542-9f46-2f7bfc48b1e2", "654dba60-7b35-41c1-aaa2-3cb551813d76", "5943c3e5-ea7b-4808-b8d2-34a8a20dba51", "9d75ec1b-1b58-4d1a-883c-f69f0040514c", "3dd6d34c-673d-4dce-b686-4d637fa899af", "3f370525-4dd4-4317-a39b-6a035dddcf52", "740a137d-5178-46ef-9e69-8417f32d5c64", "9da10ac4-3051-4d72-b978-328049d5c617", "4d98f34f-2f72-43fb-ae65-f40a531ef44c", "36c5231e-2425-4727-a927-f70fce261c29", "4b2b591d-6223-4813-a17a-e28c6d1b39f1", "fdaeddd1-b178-47e1-84b0-a4a1e06bbe50", "126f4762-aabd-4b1c-bc70-fe0799b95fc5", "11e27bec-2a02-4e08-a07f-548853a4ecbf", "395e24d6-de01-4143-be35-23074911de9b", "63d3cd33-19a1-4e9d-94dc-00e702a3b83d", "704ce44f-9926-4c7d-bf09-208fd0b00092", "46e8eb53-3933-4357-85e3-b02d260613d4", "d508dcf7-d57b-422a-b5dd-02abecb69bdd", "fed9fdc3-2d5a-486b-b4a6-0b4ee68bd6ef", "4ca44850-60f8-4c2d-b9b0-57f2e3863e90", "bb1ff6b9-48ce-4c21-87bc-666983d445c7", "4c31bf44-ce91-46aa-a31f-e768460944f1", "ec2dbf9e-9371-4712-91ae-2c496f713cd1", "6c5e6f3a-cc8a-4e95-986e-f031ae4f13f5", "bdb63763-b762-400b-b87f-ae36cfb35f15", "68f9f6a8-a35d-48d0-ab3c-564e0dcf05b0", "1c888b2e-7dfe-40a3-aeb9-bf8c56f72c6a", "89e65ffb-d683-4684-ac42-b6024f306cbe", "2cd1764b-da9e-4729-bf31-92b63b9c9e25", "d0ff4020-d983-45a3-85b0-d7271108e0b4", "6aa9061a-fd26-4762-8f7f-6bce5dd13371", "3db86bf6-5cb4-41cf-85f5-eadea07f5dc9", "1dfc1e2a-380a-4e8f-9b0c-7d1d434191fc", "3637f9ee-d5cc-48f5-9d4e-18428e594cbc", "9545c519-89ef-41ff-94e5-5089066dd525", "1c923514-3e96-4737-a3c7-7ab1d1531db7", "7222d101-a3a5-4374-bd55-ee6a2680cd15", "84e7d415-f40b-4b30-8b79-a701d2fc6c2e", "210287bb-99d5-402d-b624-3a632204d66a", "6ebc1059-4fa0-488b-8d83-2b6bd9222ff8", "39be06f3-9820-42d9-98d4-7d8bf4a9f226", "0d765d72-a2aa-4679-b6aa-5a2f0acff0d9", "334731eb-0664-4639-812a-e9cfb52e78b3", "5fd38d23-2ad0-4d41-a8c2-56f0517ca0ec", "655ff9d7-3fc9-4279-bfb2-07c2ef8aaa69", "7353fbe9-e724-4ada-849d-6394f166642f", "bfcb3baa-25cf-47ec-897d-4bcaf0842a70", "58d204f0-3277-4072-b963-2877104fed8b", "2d53beac-47e5-47ae-a228-28e2af2f4ab4", "d7473e1c-5880-4768-bda8-b805e3227cf4", "f7552ce1-fa05-46a5-ac81-71a0d9eaf59d", "f046b2e0-29ef-4aca-8462-4e3bcf57410f", "61e37d99-77c4-470d-8a56-c7c1fbd89819", "c6cdd3dc-6755-409b-b4f4-4f93d4e2e9cb", "06589a63-7cf8-4ce0-bb77-23b7519d53bc", "a07b7a52-511f-4a98-a681-3e77fa08fe61", "1bef524b-9188-491d-b2f0-ba8a26e84747", "24814402-beb4-46ad-a988-6e8b52fabbee", "66441850-c26f-4920-b4bb-31dd09585bbb", "a61dc099-0969-4535-9f2b-c99cf3162517", "acb3faa5-db68-4d9c-a7cd-af0743e37625", "75b1eee5-4e21-4b9c-afe4-513ebd477f6a", "43a68db3-de7b-46e1-a9ca-00cfc4346362", "28f9323d-fa92-4fbb-bc85-f782dcfe061f", "0e2c6dc8-f4fc-4fa4-b571-44bb630d77f4", "3971a7e7-6b2c-4542-840a-e12beae42c35", "e722ffae-4b80-40cd-b448-ed89f8baa3a6", "0f0f307d-0247-4c93-a962-941215b424e0", "3426f4a0-4591-43eb-b84d-ac97c8e5e374", "681298e8-023c-445c-b8ca-5d73e64a7bda", "15f7a5f9-cc57-435b-a399-444957d02a1b", "fa4601c0-6b54-4a5e-954e-8fe0d97ad64e", "885da95a-b5a6-4466-8755-7aba3c2cbb4b", "cd2631ef-da81-4a56-a503-e6eda1c05db7", "07b1c1b7-df4e-4ddc-858c-87fc62ea5600", "44dc1a75-9e66-4ae9-83f9-f454ee5027c1", "5afd5a2b-f928-4b3a-a0a5-f8aa9db5b2bd", "03397da8-70c2-4a37-89c3-235fb95c17da", "3d8024f4-1756-4db1-8eb1-907f492dcbb2", "10b15a04-60a5-41b7-9452-bbc2daa5c635", "888ecc74-47e4-4d9d-b442-46f9920b3b8d", "13b044c4-c3bd-428f-8a0c-5c86bc26340e", "10b83668-f8dc-410e-9068-b9b3162a90e4", "9c403e29-cb1f-4d7b-9f8b-0d94afe4b844", "668e7c9f-4385-4926-b145-788a8e4ab66c", "27cb157b-aa42-42ea-ba04-fe6ab74e3fd0", "6f4c3da8-71af-46fd-91a9-a1a9dd58b264", "58e61e39-eceb-4384-9db6-bb9ecb926f94", "f5460ff6-5527-4729-b38d-26d955dc8837", "6470c3e0-540a-4b63-b550-99fb7a144731", "d3e752d3-841f-472d-8ab3-a51caee198f9", "c92d4036-793d-465b-94d2-ee31c907ac42", "1890a880-585e-4161-af3d-138fb313accd", "08366056-1fb3-499c-bed3-a3374071986b", "3efa6881-bc15-4b5f-b1ef-90b2478e157c", "8ebcdc99-5ff8-44dd-985c-d2ea78c5768f", "d41f3050-1f04-4c65-ac40-be3a391aad84", "72274b31-0107-4bb5-adb3-647f06a9c264", "df92c951-b195-4213-8bd8-686c3c4fb161", "e6bdb32f-365a-410f-8d36-cc20eba47ac3", "c0cecfe5-c34e-4996-ba27-8b80d728a8c9", "fbeb3dfa-7125-4f7e-b78f-585c8b0c34b6", "dbd63e28-8a46-4a13-9136-3731b4bc7b86", "f8dcbeed-9812-41d7-8b8c-7945ef76f63a", "bfce8e9f-a1c8-43e6-9fe9-c5fe8889a35f", "de95fd07-02e8-4a7d-944d-7cbb1b3e974d", "1d6e4b57-5b96-4430-950d-d2a0d3af1329", "818b970a-96b4-48e6-aceb-a67d5a3ecb7b", "49d42f7c-db02-4840-9396-0c6d15ebc2ce", "e632fbdd-ac29-4be9-b74e-b2a9dec0cc01", "c5d067e9-5241-45d6-a128-84e3c4f95900", "48cdaa2f-36eb-407c-80ec-3591f27d6a94", "2a596085-481e-45cb-b03e-cd7143a30116", "f2324a4b-d287-4f37-936f-3aa29d4ff177", "856ca3dc-734d-4cac-a6d4-e30750bee8f2", "0acbdb59-1fd4-4f24-bbc1-c15ac913e08d", "e8a768ab-d186-4f11-904a-fe7c8ad137b4", "399d020c-3cf6-410c-94f4-7a8db05bb85c", "069cdfcc-630c-46f0-a945-8f0ad3479755", "0884879f-7bc7-4530-ad46-fbded1002edb", "25a106eb-234f-4edc-816f-a307fdd9d3db", "5f64043c-7e2a-41c4-b648-aaa15229d033", "acb61c45-4767-49de-b055-017e9054fa4a", "4c69460d-250a-4b64-93a2-b144aa6b0090", "210e3c58-7c26-4d4d-aeeb-f38743467f93", "5c2cd12f-6f9a-4900-8849-11dbbacb8153", "06bc1abc-1485-47b1-99e6-f91f1b039183", "e83ce9b4-a63e-499d-9145-58d680c0ad1e", "ac8499c2-41f9-43ea-ba89-b0d0110e7736", "2d8577ff-2165-41af-8b82-c02212fd1928", "9db3d52e-ffdf-4639-b596-ae6b58a290de", "2a4534fb-b959-4077-9e95-c63e1e552d28", "dbe64b43-880f-425f-86d3-c2a94ce8f965", "1557ee2b-a84a-495f-abae-7fa0af15edf5", "eda6c0a3-56aa-4790-a353-45853740bf09"], "metadata": {}}}}